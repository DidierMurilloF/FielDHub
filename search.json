[{"path":[]},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [email][didier.murilloflorez@gmail.com]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to FielDHub","title":"Contributing to FielDHub","text":"First , thanks considering contributing FielDHub! 👍 ’s people like make rewarding us - project maintainers - work FielDHub. 😊 FielDHub open-source project, maintained people care.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to FielDHub","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How you can contribute","title":"Contributing to FielDHub","text":"several ways can contribute project. want know contribute open source projects like one, see Open Source Guide.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"share-the-love-️","dir":"","previous_headings":"How you can contribute","what":"Share the love ❤️","title":"Contributing to FielDHub","text":"Think FielDHub useful? Let others discover , telling person, via Twitter blog post. Using FielDHub paper writing? Consider citing .","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"ask-a-question-️","dir":"","previous_headings":"How you can contribute","what":"Ask a question ⁉️","title":"Contributing to FielDHub","text":"Using FielDHub got stuck? Browse documentation see can find solution. Still stuck? Post question issue GitHub. offer user support, ’ll try best address , questions often lead better documentation discovery bugs. Want ask question private? Contact package maintainer [email][didier.murilloflorez@ndsu.edu].","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"propose-an-idea-","dir":"","previous_headings":"How you can contribute","what":"Propose an idea 💡","title":"Contributing to FielDHub","text":"idea new FielDHub feature? Take look documentation issue list see isn’t included suggested yet. , suggest idea issue GitHub. can’t promise implement idea, helps : Explain detail work. Keep scope narrow possible. See want contribute code idea well.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"report-a-bug-","dir":"","previous_headings":"How you can contribute","what":"Report a bug 🐛","title":"Contributing to FielDHub","text":"Using FielDHub discovered bug? ’s annoying! Don’t let others experience report issue GitHub can fix . good bug report makes easier us , please include: operating system name version (e.g. Mac OS 10.13.6). details local setup might helpful troubleshooting. Detailed steps reproduce bug.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"improve-the-documentation-","dir":"","previous_headings":"How you can contribute","what":"Improve the documentation 📖","title":"Contributing to FielDHub","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"the-website","dir":"","previous_headings":"How you can contribute > Improve the documentation 📖","what":"The website","title":"Contributing to FielDHub","text":"website generated pkgdown. means don’t write html: content pulled together documentation code, vignettes, Markdown files, package DESCRIPTION _pkgdown.yml settings. know way around pkgdown, can propose file change improve documentation. , report issue can point right direction.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"function-documentation","dir":"","previous_headings":"How you can contribute > Improve the documentation 📖","what":"Function documentation","title":"Contributing to FielDHub","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R/ directory code repository. Look file name function. Propose file change update function documentation roxygen comments (starting #').","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"contribute-code-","dir":"","previous_headings":"How you can contribute","what":"Contribute code 📝","title":"Contributing to FielDHub","text":"Care fix bugs implement new functionality FielDHub? Awesome! 👏 look issue list leave comment things want work . See also development guidelines .","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to FielDHub","text":"try follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream master. Open RStudio project file (.Rproj). Write code. Test code (bonus points adding unit tests). Document code (see function documentation ). Check code devtools::check() aim 0 errors, warnings notes. Commit push changes. Submit pull request.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/CONTRIBUTING.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributing to FielDHub","text":"Contributing adapted CONTRIBUTING.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 North Dakota State University (NDSU) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Augmented Randomized Complete Block Design","text":"augmented randomized complete block design another option overcome problem limited facilities lack seed researchers want test many treatments. kind design, approach build augmented blocks allocate amount controls every block along treatments. FielDHub includes function run experimental designs, features include options set number entries number checks augmented blocks experiment. Users can also choose run experiment multiple locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"Augmented Randomized Complete Block Design","text":"example, say project needs test 120 genotypes cassava two locations. addition, research includes four checks six augmented blocks carry experiment. design setup comes 6 blocks size 24 plots total 144 plots distributed field 12 rows 12 columns.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"running-the-shiny-app","dir":"Articles","previous_headings":"","what":"Running the Shiny App","title":"Augmented Randomized Complete Block Design","text":"launch app need run either ","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Augmented Randomized Complete Block Design","text":"app running, go Unreplicated Designs > RCBD Augmented , follow following steps show generate RCBD Augmented.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Augmented Randomized Complete Block Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must columns ENTRY NAME. ENTRY column must unique entry integer number treatment/genotype. column NAME must unique name identifies treatment/genotype. ENTRY NAME must unique, duplicates allowed. following table, show example entries list format. example entry list four checks 8 treatments/genotypes. crucial allocate checks top part file. Enter number stacked experiments Input # Stacked Expts box. means number times experiment replicated. case perform just 1 experiment. augmented RCBD option choose whether randomize entries , Randomize Entries toggle button. recommended always randomized treatments/entries researchers choose randomize treatments, often due logistical issues. Enter number entries/treatments Input # Entries box, 120 example experiment. Set number checks per block Checks per Block box. case, 5 checks. Set number blocks Input # Blocks box, 6 example. total number plots field Input # Stacked Expts(Input # Entries + Input # Blocks * Checks per Block), per location. Enter number locations Input # Locations. Set 2. Select serpentine cartesian Plot Order Layout. example set serpentine layout. ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1987. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. entered information experiment left side panel, click Run! button run design. prompted select dimensions field list options drop middle screen box labeled Select dimensions field. case, select 12 x 12. Click Randomize! button randomize experiment set field dimensions see output plots. change dimensions , must re-randomize. change inputs left side panel running experiment initially, click Run Randomize buttons , re-run new inputs.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Augmented Randomized Complete Block Design","text":"run augmented RCBD FielDHub set dimensions field, several ways display information contained field book. first tab, Get Random, shows option change dimensions field re-randomize, well reference guide experiment design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"input-data","dir":"Articles","previous_headings":"Outputs","what":"Input Data","title":"Augmented Randomized Complete Block Design","text":"second tab, Input Data, can see entries randomization list, well table checks number times appear field. list entries, reps check included well.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"randomized-field","dir":"Articles","previous_headings":"Outputs","what":"Randomized Field","title":"Augmented Randomized Complete Block Design","text":"Randomized Field tab displays graphical representation randomization entries field specified dimensions. checks colored uniquely, showing number times distributed throughout field. display includes numbered labels rows columns. can copy field table save directly Excel file Copy Excel buttons top.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"plot-number-field","dir":"Articles","previous_headings":"Outputs","what":"Plot Number Field","title":"Augmented Randomized Complete Block Design","text":"Plot Number Field tab, table display field plots numbered according Plot Order Layout specified, either serpentine cartesian. can see corresponding entries plot number field book. Like Randomized Field tab, can copy table save Excel file Copy Excel buttons.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Augmented Randomized Complete Block Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"using-the-fieldhub-function-rcbd_augmented","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: RCBD_augmented()","title":"Augmented Randomized Complete Block Design","text":"can run design function RCBD_augmented() FielDHub package. First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) aug_RCBD <- RCBD_augmented(   lines = 120,   checks = 4,   b = 6,    repsExpt = 1,    l = 2,   random = TRUE,   exptName = \"Cassava_2022\",    plotNumber = c(1001, 2001),   locationNames = c(\"FARGO\", \"CASSELTON\"),   nrows = 12,   ncols = 12,   seed = 1987 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"details-on-the-inputs-entered-in-rcbd_augmented-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: RCBD_augmented()","what":"Details on the inputs entered in RCBD_augmented() above","title":"Augmented Randomized Complete Block Design","text":"description inputs used generate design, lines = 120 number entries checks = 4 number checks augmented block. b = 6 number augmented blocks. repsExpt = 1 number reps experiment. l = 2 number locations. random = TRUE means treatment/entries checks randomized. exptName = \"Cassava_2022\" optional name experiment. plotNumber = c(1001,2001) starting plot number location respectively, single number 1 location. locationNames = c(\"FARGO\", \"CASSELTON\") values representing respective name location. nrows = 12 number rows field. optional ncols = 12 number columns field. optional. seed = 1987 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"print-aug_rcbd-output","dir":"Articles","previous_headings":"2. Using the FielDHub function: RCBD_augmented()","what":"Print aug_RCBD output","title":"Augmented Randomized Complete Block Design","text":"print summary information object aug_RCBD, can use generic function print().","code":"print(aug_RCBD) Augmented Randomized Complete Block Design:   Information on the design parameters:  List of 11  $ rows                 : num 12  $ columns              : num 12  $ rows_within_blocks   : num 2  $ columns_within_blocks: num 12  $ treatments           : num 120  $ checks               : num 4  $ blocks               : num 6  $ plots_per_block      : num [1:6] 24 24 24 24 24 24  $ locations            : num 2  $ fillers              : num 0  $ seed                 : num 1987   10 First observations of the data frame with the RCBD_augmented field book:     ID         EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS BLOCK ENTRY TREATMENT 1   1 Cassava_2022    FARGO 2022 1001   1      1      0     1    98       G98 2   2 Cassava_2022    FARGO 2022 1002   1      2      0     1   103      G103 3   3 Cassava_2022    FARGO 2022 1003   1      3      0     1    87       G87 4   4 Cassava_2022    FARGO 2022 1004   1      4      1     1     2       CH2 5   5 Cassava_2022    FARGO 2022 1005   1      5      0     1    21       G21 6   6 Cassava_2022    FARGO 2022 1006   1      6      0     1   122      G122 7   7 Cassava_2022    FARGO 2022 1007   1      7      1     1     4       CH4 8   8 Cassava_2022    FARGO 2022 1008   1      8      0     1    44       G44 9   9 Cassava_2022    FARGO 2022 1009   1      9      0     1    23       G23 10 10 Cassava_2022    FARGO 2022 1010   1     10      0     1   113      G113"},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"access-to-aug_rcbd-output","dir":"Articles","previous_headings":"2. Using the FielDHub function: RCBD_augmented()","what":"Access to aug_RCBD output","title":"Augmented Randomized Complete Block Design","text":"function RCBD_augmented() returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. aug_RCBD$layoutRandom aug_RCBD$fieldBook. aug_RCBD$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, EXPT, LOCATION, YEAR, PLOT, ROW, COLUMN, CHECKS, ENTRY, TREATMENT. Let us see first 10 rows field book experiment.","code":"field_book <- aug_RCBD$fieldBook head(field_book, 10) ID         EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS BLOCK ENTRY TREATMENT 1   1 Cassava_2022    FARGO 2022 1001   1      1      0     1    98       G98 2   2 Cassava_2022    FARGO 2022 1002   1      2      0     1   103      G103 3   3 Cassava_2022    FARGO 2022 1003   1      3      0     1    87       G87 4   4 Cassava_2022    FARGO 2022 1004   1      4      1     1     2       CH2 5   5 Cassava_2022    FARGO 2022 1005   1      5      0     1    21       G21 6   6 Cassava_2022    FARGO 2022 1006   1      6      0     1   122      G122 7   7 Cassava_2022    FARGO 2022 1007   1      7      1     1     4       CH4 8   8 Cassava_2022    FARGO 2022 1008   1      8      0     1    44       G44 9   9 Cassava_2022    FARGO 2022 1009   1      9      0     1    23       G23 10 10 Cassava_2022    FARGO 2022 1010   1     10      0     1   113      G113"},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"plot-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: RCBD_augmented()","what":"Plot field layout","title":"Augmented Randomized Complete Block Design","text":"plotting layout function coordinates ROW COLUMN field book object can use generic function plot() follow,","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"plot-layout-for-location-1","dir":"Articles","previous_headings":"2. Using the FielDHub function: RCBD_augmented() > Plot field layout","what":"Plot layout for location 1","title":"Augmented Randomized Complete Block Design","text":"possible pass arguments plot() specific location. example, can plot layout location 2.","code":"plot(aug_RCBD)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/RCBD_augmented.html","id":"plot-layout-for-location-2","dir":"Articles","previous_headings":"2. Using the FielDHub function: RCBD_augmented() > Plot field layout","what":"Plot layout for location 2","title":"Augmented Randomized Complete Block Design","text":"","code":"plot(aug_RCBD, l = 2)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/alpha_lattice.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Alpha Lattice Design","text":"launch app need run either app running, go Lattice Designs > Alpha Lattice , follow following steps show generate kind design 55 treatments 3 reps.","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/alpha_lattice.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Alpha Lattice Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must columns ENTRY NAME. ENTRY column must unique entry integer number treatment. column NAME must unique name identifies treatment. ENTRY NAME must unique, duplicates allowed. following table, show example entries list format. example entry list 12 treatments. Input number treatments Input # Treatments box. alpha lattice design, number treatments must composite number. case, set 55. Select number replications treatments Input # Full Reps box. Set 3. Set number plots incomplete block Input # Plots per IBlock box. Set 5. Enter number locations Input # Locations. run experiment single location, set 1. Select serpentine cartesian Plot Order Layout. example use default cartesian layout. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. Set 101. Enter name location experiment Input Location box. multiple locations, name must comma separated list. example, set \"FARGO\". ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1235. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/alpha_lattice.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Alpha Lattice Design","text":"run alpha lattice design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/alpha_lattice.html","id":"field-layout","dir":"Articles","previous_headings":"Outputs","what":"Field Layout","title":"Alpha Lattice Design","text":"first click run button alpha lattice design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field change location displayed. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/alpha_lattice.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Alpha Lattice Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears Field Book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/alpha_lattice.html","id":"using-the-fieldhub-function-alpha_lattice","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: alpha_lattice()","title":"Alpha Lattice Design","text":"can run design function FielDHub package, alpha_lattice(). First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) alpha <- alpha_lattice(   t = 55,   r = 3,     k = 5,    l = 1,         plotNumber = 101,    locationNames = \"FARGO\",    seed = 1235 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/alpha_lattice.html","id":"details-on-the-inputs-entered-in-alpha_lattice-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: alpha_lattice()","what":"Details on the inputs entered in alpha_lattice() above","title":"Alpha Lattice Design","text":"description inputs used generate design, t = 55 number treatments. r=3 number replicates. k = 5 number plots per incomplete block. l = 1 number locations. plotNumber = 101 starting plot number. locationNames = \"FARGO\" optional name location. seed = 1235 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/alpha_lattice.html","id":"print-alpha-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: alpha_lattice()","what":"Print alpha object","title":"Alpha Lattice Design","text":"print summary information object alpha, can use generic function print().","code":"print(alpha) Alpha Lattice Design   Information on the design parameters:  List of 7  $ Reps            : num 3  $ iBlocks         : num 11  $ NumberTreatments: num 55  $ NumberLocations : num 1  $ Locations       : chr \"FARGO\"  $ seed            : num 1235  $ lambda          : num 0.222   10 First observations of the data frame with the alpha_lattice field book:     ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT 1   1    FARGO  101   1      1    1     4       G-4 2   2    FARGO  102   1      1    2     2       G-2 3   3    FARGO  103   1      1    3    11      G-11 4   4    FARGO  104   1      1    4    23      G-23 5   5    FARGO  105   1      1    5    30      G-30 6   6    FARGO  106   1      2    1    41      G-41 7   7    FARGO  107   1      2    2    33      G-33 8   8    FARGO  108   1      2    3    37      G-37 9   9    FARGO  109   1      2    4    36      G-36 10 10    FARGO  110   1      2    5    21      G-21"},{"path":"https://didiermurillof.github.io/FielDHub/articles/alpha_lattice.html","id":"access-to-alpha-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: alpha_lattice()","what":"Access to alpha object","title":"Alpha Lattice Design","text":"function alpha_lattice() returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. alpha$layoutRandom alpha$fieldBook. alpha$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, IBLOCK, UNIT, ENTRY, TREATMENT.","code":"field_book <- alpha$fieldBook head(alpha$fieldBook, 10) ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT 1   1    FARGO  101   1      1    1     4       G-4 2   2    FARGO  102   1      1    2     2       G-2 3   3    FARGO  103   1      1    3    11      G-11 4   4    FARGO  104   1      1    4    23      G-23 5   5    FARGO  105   1      1    5    30      G-30 6   6    FARGO  106   1      2    1    41      G-41 7   7    FARGO  107   1      2    2    33      G-33 8   8    FARGO  108   1      2    3    37      G-37 9   9    FARGO  109   1      2    4    36      G-36 10 10    FARGO  110   1      2    5    21      G-21"},{"path":"https://didiermurillof.github.io/FielDHub/articles/alpha_lattice.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: alpha_lattice()","what":"Plot the field layout","title":"Alpha Lattice Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follows,","code":"plot(alpha)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/crd.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Completely Randomized Design","text":"launch app need run either app running, go Designs > Completely Randomized Design (CRD) , follow following steps show generate kind design example 15 treatments 6 reps .","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/crd.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Completely Randomized Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must single column TREATMENT, containing list unique names identify treatment. Duplicate values allowed, entries must unique. following table, show example entries list format. example entry list ten treatments. Input number treatments Input # Treatments box, 15 case. Select number replications treatments Input # Full Reps box. Set 6. Select serpentine cartesian Plot Order Layout. example use default cartesian layout. Enter starting plot number Starting Plot Number box. Set 101. Enter name location experiment Input Location box. completely randomized design can run single location time. Set FARGO. ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1236. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/crd.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Completely Randomized Design","text":"run completely randomized design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/crd.html","id":"field-layout","dir":"Articles","previous_headings":"Outputs","what":"Field Layout","title":"Completely Randomized Design","text":"first click run button completely randomized design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/crd.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Completely Randomized Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears Field Book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/crd.html","id":"using-the-fieldhub-function-crd","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: CRD()","title":"Completely Randomized Design","text":"can run design function FielDHub package, CRD(). can enter information describing design like :","code":"crd <- CRD(   t = 15,   reps = 6,   plotNumber = 101,    locationName = \"FARGO\",   seed = 1236 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/crd.html","id":"details-on-the-inputs-entered-in-crd-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: CRD()","what":"Details on the inputs entered in CRD() above","title":"Completely Randomized Design","text":"description inputs used generate design, t = 15 number treatments. reps = 6 number replications treatment. plotNumber = 101 starting plot number. locationNames = \"FARGO\" optional name location. seed = 1234 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/crd.html","id":"print-crd-output","dir":"Articles","previous_headings":"2. Using the FielDHub function: CRD()","what":"Print crd output","title":"Completely Randomized Design","text":"print summary information object crd, can use generic function print().","code":"print(crd) Completely Randomized Design (CRD)   Information on the design parameters:  List of 5  $ numberofTreatments: num 15  $ treatments        : chr [1:15] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ Reps              : num 6  $ locationName      : chr \"FARGO\"  $ seed              : num 1236   10 First observations of the data frame with the CRD field book:     ID LOCATION PLOT REP TREATMENT 1   1    FARGO  101   4        T9 2   2    FARGO  102   4       T12 3   3    FARGO  103   2        T5 4   4    FARGO  104   3        T9 5   5    FARGO  105   6       T13 6   6    FARGO  106   5       T10 7   7    FARGO  107   5        T5 8   8    FARGO  108   2       T10 9   9    FARGO  109   2        T8 10 10    FARGO  110   3       T10"},{"path":"https://didiermurillof.github.io/FielDHub/articles/crd.html","id":"access-to-crd-output","dir":"Articles","previous_headings":"2. Using the FielDHub function: CRD()","what":"Access to crd output","title":"Completely Randomized Design","text":"CRD() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. crd$layoutRandom crd$fieldBook. crd$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, IBLOCK, UNIT, ENTRY, TREATMENT.","code":"field_book <- crd$fieldBook head(crd$fieldBook, 10) ID LOCATION PLOT REP TREATMENT 1   1    FARGO  101   4        T9 2   2    FARGO  102   4       T12 3   3    FARGO  103   2        T5 4   4    FARGO  104   3        T9 5   5    FARGO  105   6       T13 6   6    FARGO  106   5       T10 7   7    FARGO  107   5        T5 8   8    FARGO  108   2       T10 9   9    FARGO  109   2        T8 10 10    FARGO  110   3       T10"},{"path":"https://didiermurillof.github.io/FielDHub/articles/crd.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: CRD()","what":"Plot the field layout","title":"Completely Randomized Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follow,","code":"plot(crd)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"single-unreplicated-diagonal-arrangement-design","dir":"Articles","previous_headings":"","what":"Single Unreplicated Diagonal Arrangement Design","title":"Unreplicated Diagonal Arrangement Design","text":"vignette shows generate single multiple unreplicated diagonal arrangement designs using FielDHub Shiny App scripting function diagonal_arrangement() FielDHub R package.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Unreplicated Diagonal Arrangement Design","text":"experiments, insufficient seed quantity field space conduct trials large numbers genotypes, plant breeders must use unreplicated partially replicated experimental designs, like unreplicated designs checks allocated systematic diagonal distribution. cases, experiment split blocks specified size. allows breeders design field contains multiple different experiments, example, plants various stages maturity. FielDHub includes function run experimental designs, well tabs single multiple diagonal arrangement FielDHub app.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use Case","title":"Unreplicated Diagonal Arrangement Design","text":"Suppose plant breeding project needs identify superior entries barley. project, preliminary yield trial (PYT) carried 300 genotypes tested one experiment one location unreplicated design. experiment lying field containing 15 rows 22 columns plots. addition, 5 checks included systematic diagonal arrangement across field fill 30 plots representing 9.1% total number experimental plots.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"running-the-shiny-app","dir":"Articles","previous_headings":"","what":"Running the Shiny App","title":"Unreplicated Diagonal Arrangement Design","text":"launch app need run either ","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Unreplicated Diagonal Arrangement Design","text":"app running, go Unreplicated Designs > Single Diagonal Arrangement , follow following steps show generate single unreplicated diagonal arrangement design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Unreplicated Diagonal Arrangement Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must columns ENTRY NAME. ENTRY column must unique integer number entry treatment/genotype. column NAME must unique name identifies treatment/genotype. ENTRY NAME must unique, duplicates allowed. following table, show example entries list format. example entry list 4 checks 8 treatments/genotypes. crucial allocate checks top part file. Enter number entries/treatments Input # Entries box, 300 case. Select 5 drop-Input # Checks box. Since want run experiment 1 location, set Input # Locations 1. Select serpentine cartesian Plot Order Layout. example use serpentine layout. ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. instance, set 16. Enter name experiment Input Experiment Name box. example, PYT_BARLEY_2022. Enter starting plot number Starting Plot Number box. experiment want plot start 1001. Enter name site/location Input Location box. experiment set site FARGO. case users run experiment multiple locations, name location must enter separate comma, example: FARGO, CASSELTON, MINOT. entered information experiment left side panel, click Run! button run design. prompted select dimensions field list options drop-middle screen box labeled Select dimensions field. case, select 15 x 22. Click Randomize! button randomize experiment set field dimensions see output plots. change inputs left side panel running experiment initially, click Run Randomize buttons , re-run new inputs.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Unreplicated Diagonal Arrangement Design","text":"run single diagonal arrangement FielDHub set dimensions field, several ways display information contained field book. first tab, Expt Design Info, shows option change dimensions field re-randomize, well reference guide experiment design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"input-data","dir":"Articles","previous_headings":"Outputs","what":"Input Data","title":"Unreplicated Diagonal Arrangement Design","text":"second tab, Input Data, can see entries randomization list generated inputs, well table checks number times appear field.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"randomized-field","dir":"Articles","previous_headings":"Outputs","what":"Randomized Field","title":"Unreplicated Diagonal Arrangement Design","text":"Randomized Field tab displays graphical representation randomization entries field specified dimensions. checks colored uniquely, showing number times distributed throughout field. display includes numbered labels rows columns. can copy field table save directly Excel file Copy Excel buttons top. Choose % Checks: drop-box, users can play different options total amount checks field.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"plot-number-field","dir":"Articles","previous_headings":"Outputs","what":"Plot Number Field","title":"Unreplicated Diagonal Arrangement Design","text":"Plot Number Field tab, table display field plots numbered according Plot Order Layout specified, either serpentine cartesian. can see corresponding entries plot number field book. Like Randomized Field tab, can copy table save Excel file Copy Excel buttons.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Unreplicated Diagonal Arrangement Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"using-the-fieldhub-function-diagonal_arrangement","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: diagonal_arrangement()","title":"Unreplicated Diagonal Arrangement Design","text":"can run design function FielDHub package, diagonal_arrangement(). First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) single_diag <- diagonal_arrangement(   nrows = 15,   ncols = 22,   lines = 300,   checks = 5,   l = 1,   plotNumber = 1,   exptName = \"PYT_BARLEY_2022\",   locationNames = \"FARGO\",   seed = 16, )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"details-on-the-inputs-entered-in-diagonal_arrangement-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: diagonal_arrangement()","what":"Details on the inputs entered in diagonal_arrangement() above:","title":"Unreplicated Diagonal Arrangement Design","text":"nrows = 15 number columns field. ncols = 22 number rows field. lines = 300 number genotypes. checks = 5 number checks. l = 1 number locations. plotNumber = 1 starting plot number. exptName = \"PYT_BARLEY_2022\" optional name experiment locationNames = \"FARGO\" optional name location. seed = 16 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"print-single_diag-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: diagonal_arrangement()","what":"Print single_diag object","title":"Unreplicated Diagonal Arrangement Design","text":"print summary information object single_diag, can use generic function print().","code":"print(single_diag) Un-replicated Diagonal Arrangement Design   Information on the design parameters:  List of 11  $ rows          : num 15  $ columns       : num 22  $ treatments    : int 300  $ checks        : int 5  $ entry_checks  : int [1:5] 1 2 3 4 5  $ rep_checks    : num [1:5] 6 6 6 6 6  $ locations     : num 1  $ planter       : chr \"serpentine\"  $ percent_checks: chr \"9.1%\"  $ fillers       : num 0  $ seed          : num 16   10 First observations of the data frame with the diagonal_arrangement field book:     ID            EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 PYT_BARLEY_2022    FARGO 2022    1   1      1      0    62    Gen-62 2   2 PYT_BARLEY_2022    FARGO 2022    2   1      2      0    38    Gen-38 3   3 PYT_BARLEY_2022    FARGO 2022    3   1      3      0   200   Gen-200 4   4 PYT_BARLEY_2022    FARGO 2022    4   1      4      0   253   Gen-253 5   5 PYT_BARLEY_2022    FARGO 2022    5   1      5      0    94    Gen-94 6   6 PYT_BARLEY_2022    FARGO 2022    6   1      6      0    16    Gen-16 7   7 PYT_BARLEY_2022    FARGO 2022    7   1      7      0    42    Gen-42 8   8 PYT_BARLEY_2022    FARGO 2022    8   1      8      0   211   Gen-211 9   9 PYT_BARLEY_2022    FARGO 2022    9   1      9      0   170   Gen-170 10 10 PYT_BARLEY_2022    FARGO 2022   10   1     10      0   144   Gen-144"},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"access-to-single_diag-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: diagonal_arrangement()","what":"Access to single_diag object","title":"Unreplicated Diagonal Arrangement Design","text":"function diagonal_arrangement() returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. single_diag$layoutRandom single_diag$fieldBook. single_diag$fieldBook data frame containing information every plot field, information location plot treatment plot. seen output , field book columns ID, EXPT, LOCATION, YEAR, PLOT, ROW, COLUMN, CHECKS, ENTRY, TREATMENT. Let us see first 10 rows field book experiment.","code":"field_book <- single_diag$fieldBook head(field_book, 10) ID            EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 PYT_BARLEY_2022    FARGO 2022    1   1      1      0    62    Gen-62 2   2 PYT_BARLEY_2022    FARGO 2022    2   1      2      0    38    Gen-38 3   3 PYT_BARLEY_2022    FARGO 2022    3   1      3      0   200   Gen-200 4   4 PYT_BARLEY_2022    FARGO 2022    4   1      4      0   253   Gen-253 5   5 PYT_BARLEY_2022    FARGO 2022    5   1      5      0    94    Gen-94 6   6 PYT_BARLEY_2022    FARGO 2022    6   1      6      0    16    Gen-16 7   7 PYT_BARLEY_2022    FARGO 2022    7   1      7      0    42    Gen-42 8   8 PYT_BARLEY_2022    FARGO 2022    8   1      8      0   211   Gen-211 9   9 PYT_BARLEY_2022    FARGO 2022    9   1      9      0   170   Gen-170 10 10 PYT_BARLEY_2022    FARGO 2022   10   1     10      0   144   Gen-144"},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"plot-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: diagonal_arrangement()","what":"Plot field layout","title":"Unreplicated Diagonal Arrangement Design","text":"plotting layout function coordinates ROW COLUMN field book object can use generic function plot() follow,  figure shows map experiment randomized single unreplicated diagonal arrangement design. Gray plots represent unreplicated treatments, distinctively colored check plots replicated throughout field systematic diagonal arrangement.","code":"plot(single_diag)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"multiple-unreplicated-diagonal-arrangement-design","dir":"Articles","previous_headings":"","what":"Multiple Unreplicated Diagonal Arrangement Design","title":"Unreplicated Diagonal Arrangement Design","text":"Now, show generate kind unreplicated design multiple experiments field.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"use-case-1","dir":"Articles","previous_headings":"","what":"Use Case","title":"Unreplicated Diagonal Arrangement Design","text":"plant breeding project needs test 300 genotypes divided among three different experiments amounts 100, 120, 80 respectively. experiment represents different stages maturity. 3 experiments lying field containing 15 rows 22 columns plots. addition, 5 checks included systematic diagonal arrangement across experiments fill 30 plots representing 9.1% total number experimental plots. FielDHub can perform randomization design problem explained . can solved either app diagonal_arrangement() function.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"using-the-fieldhub-shiny-app-1","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Unreplicated Diagonal Arrangement Design","text":"generate multiple unreplicated diagonal arrangement design using FielDHub app: First, go Unreplicated Designs > Multiple Diagonal Arrangement , follow following steps show generate kind design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"inputs-1","dir":"Articles","previous_headings":"","what":"Inputs","title":"Unreplicated Diagonal Arrangement Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must columns ENTRY NAME. ENTRY column must unique entry integer number treatment/genotype. column NAME must unique name identifies treatment/genotype. ENTRY NAME must unique, duplicates allowed. following table, show example entries list format. example entry list four checks 8 treatments/genotypes. crucial allocate checks top part file. Note: wish create multiple blocks different sizes imported entries list, example, block size 80, 90, 100 plots, FielDHub read imported entries list checks, 80 entries first block, 90 entries second block, 100 entries last block. Select checkbox option Use entries across experiments purpose make replications instead testing different experiments. Checking option requires size blocks. example, testing 100 treatments across 3 blocks require set 300 Input # Entries 100, 100, 100 input Input # Entries per Expt. case keep unchecked option. Enter total number entries/treatments Input # Entries box, 300 case. Enter number entries/treatments experiment separate comma Input # Entries per Expt box, 100, 120, 80 case. Select 5 drop-Input # Checks box. Since want run experiment 1 location, set Input # Locations 1. Select Row Column Blocks Layout:. example set Row experiments/blocks layout. Select serpentine cartesian Plot Order Layout. example set serpentine layout. Enter starting plot number experiment Starting Plot Number box. experiment want plot start 1, 1001, 2001 experiment. app also allows setting one number experiments. example, plot number start 10. Enter name experiment Input Experiment Name box. example, MATURITY1, MATURITY2, MATURITY3. ensure randomization consistent across sessions, can set seed number box labeled Seed Number. instance, set 17. Enter name site/location Input Location box. experiment set site FARGO. case users run experiment multiple locations, name location must enter separate comma, example: FARGO, CASSELTON, MINOT. entered information experiment left side panel, click Run! button run design. prompted select dimensions field list options drop-middle screen box labeled Select dimensions field. case, select 15 x 22. Click Randomize! button randomize experiment set field dimensions see output plots. change inputs left side panel running experiment initially, click Run Randomize buttons , re-run new inputs.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"outputs-1","dir":"Articles","previous_headings":"","what":"Outputs","title":"Unreplicated Diagonal Arrangement Design","text":"run single diagonal arrangement FielDHub set dimensions field, several ways display information contained field book. first tab, Expt Design Info, shows option change dimensions field re-randomize, well reference guide experiment design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"input-data-1","dir":"Articles","previous_headings":"Outputs","what":"Input Data","title":"Unreplicated Diagonal Arrangement Design","text":"second tab, Input Data, can see entries randomization list generated inputs, well table checks number times appear field.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"randomized-field-1","dir":"Articles","previous_headings":"Outputs","what":"Randomized Field","title":"Unreplicated Diagonal Arrangement Design","text":"Randomized Field tab displays graphical representation randomization entries field specified dimensions. checks colored uniquely, showing number times distributed throughout field. display includes numbered labels rows columns. can copy field table save directly Excel file Copy Excel buttons top. tab Choose % Checks: box users can play different options total amount checks field.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"plot-number-field-1","dir":"Articles","previous_headings":"Outputs","what":"Plot Number Field","title":"Unreplicated Diagonal Arrangement Design","text":"Plot Number Field tab, table display field plots numbered according Plot Order Layout specified, either serpentine cartesian. can see corresponding entries plot number field book. Like Randomized field tab, can copy table save Excel file Copy Excel buttons.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"field-book-1","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Unreplicated Diagonal Arrangement Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"using-the-fieldhub-function-diagonal_arrangement-1","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: diagonal_arrangement()","title":"Unreplicated Diagonal Arrangement Design","text":"variation single diagonal arrangement included diagonal_arrangement() function multiple diagonal arrangement, experiment split blocks specified size.","code":"multi_diag <- diagonal_arrangement(   nrows = 15,   ncols = 22,   lines = 300,   kindExpt = \"DBUDC\",    blocks = c(100,120,80),   checks = 5,   l = 1,   plotNumber = c(1, 1001, 2001),   exptName = c(\"MATURITY1\", \"MATURITY2\", \"MATURITY3\"),   locationNames = \"FARGO\",   seed = 17 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"details-on-the-inputs-entered-in-diagonal_arrangement-above-1","dir":"Articles","previous_headings":"2. Using the FielDHub function: diagonal_arrangement()","what":"Details on the inputs entered in diagonal_arrangement() above:","title":"Unreplicated Diagonal Arrangement Design","text":"description inputs used generate design, nrows = 15 number columns field. ncols = 22 number rows field. lines = 300 number genotypes. kindExpt = \"DBUDC\" option randomize multiple experiments blocks = c(100,120,80) blocks multiple arrangement. checks = 5 number checks. l = 1 number locations. plotNumber = c(1, 1001, 2001) starting plot number experiment. just one number well. exptName = c(\"MATURITY1\", \"MATURITY2\", \"MATURITY3\") optional name experiment. locationNames = \"FARGO\" optional name location. seed = 17 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"print-multi_diag-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: diagonal_arrangement()","what":"Print multi_diag object","title":"Unreplicated Diagonal Arrangement Design","text":"printing summary information object multi_diag can use generic function print()","code":"print(multi_diag) Un-replicated Diagonal Arrangement Design   Information on the design parameters:  List of 11  $ rows          : num 15  $ columns       : num 22  $ treatments    : num [1:3] 100 120 80  $ checks        : int 5  $ entry_checks  : int [1:5] 1 2 3 4 5  $ rep_checks    : num [1:5] 6 7 5 7 5  $ locations     : num 1  $ planter       : chr \"serpentine\"  $ percent_checks: chr \"9.1%\"  $ fillers       : num 0  $ seed          : num 17   10 First observations of the data frame with the diagonal_arrangement field book:     ID      EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 MATURITY1    FARGO 2022    1   1      1      0    39    Gen-39 2   2 MATURITY1    FARGO 2022    2   1      2      0    37    Gen-37 3   3 MATURITY1    FARGO 2022    3   1      3      0    30    Gen-30 4   4 MATURITY1    FARGO 2022    4   1      4      0    68    Gen-68 5   5 MATURITY1    FARGO 2022    5   1      5      0    29    Gen-29 6   6 MATURITY1    FARGO 2022    6   1      6      0    46    Gen-46 7   7 MATURITY1    FARGO 2022    7   1      7      0    93    Gen-93 8   8 MATURITY1    FARGO 2022    8   1      8      0    28    Gen-28 9   9 MATURITY1    FARGO 2022    9   1      9      0    53    Gen-53 10 10 MATURITY1    FARGO 2022   10   1     10      0    58    Gen-58"},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"access-to-multi_diag-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: diagonal_arrangement()","what":"Access to multi_diag object","title":"Unreplicated Diagonal Arrangement Design","text":"function diagonal_arrangement() returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. multi_diag$layoutRandom multi_diag$fieldBook. multi_diag$fieldBook data frame containing information every plot field, information location plot treatment plot. seen output , field book columns ID, EXPT, LOCATION, YEAR, PLOT, ROW, COLUMN, CHECKS, ENTRY, TREATMENT. Let us see first 10 rows field book experiment.","code":"field_book <- multi_diag$fieldBook head(field_book, 10) ID      EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 MATURITY1    FARGO 2022    1   1      1      0    39    Gen-39 2   2 MATURITY1    FARGO 2022    2   1      2      0    37    Gen-37 3   3 MATURITY1    FARGO 2022    3   1      3      0    30    Gen-30 4   4 MATURITY1    FARGO 2022    4   1      4      0    68    Gen-68 5   5 MATURITY1    FARGO 2022    5   1      5      0    29    Gen-29 6   6 MATURITY1    FARGO 2022    6   1      6      0    46    Gen-46 7   7 MATURITY1    FARGO 2022    7   1      7      0    93    Gen-93 8   8 MATURITY1    FARGO 2022    8   1      8      0    28    Gen-28 9   9 MATURITY1    FARGO 2022    9   1      9      0    53    Gen-53 10 10 MATURITY1    FARGO 2022   10   1     10      0    58    Gen-58"},{"path":"https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","id":"plot-field-layout-1","dir":"Articles","previous_headings":"2. Using the FielDHub function: diagonal_arrangement()","what":"Plot field layout","title":"Unreplicated Diagonal Arrangement Design","text":"plotting layout function coordinates ROW COLUMN field book object can use generic function plot() follow,  figure shows map experiment randomized multiple unreplicated diagonal arrangement design. Gray, salmon, pink shade blocks unreplicated experiments, distinctively colored check plots replicated throughout field systematic diagonal arrangement.","code":"plot(multi_diag)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/full_factorial.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Full Factorial Design","text":"launch app need run either app running, go Designs > Full Factorial Designs , follow following steps show generate kind design example set 3 treatments levels 3, 3, 2 . run experiment 3 times.","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/full_factorial.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Full Factorial Design","text":"selection , means app going generate synthetic data entries names treatment based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must two columns: FACTORS LEVEL. Containing list unique names identify treatment level. Duplicate values allowed, entries must unique. following table, show example entries list format. example entry list three treatments/factors, 3, 3 2 levels . Choose whether use factorial design RCBD CRD Select Factorial Design Type box. Set RCBD. Set number entries factor comma separated list Input # Entries Factor box. want example experiment 3 factors 3, 3, 2 levels respectively, enter 3, 3, 2 box. Set number replications squares Input # Full Reps box. Set 3. Enter number locations Input # Locations. Set 1. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. case, set 101. Optionally, may enter name location experiment Input Location box. Select serpentine cartesian Plot Order Layout. example use default serpentine layout. designs, can set seed number box labeled Seed Number. example, set 1239. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/full_factorial.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Full Factorial Design","text":"run full factorial design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/full_factorial.html","id":"field-layout","dir":"Articles","previous_headings":"Outputs","what":"Field Layout","title":"Full Factorial Design","text":"first click run button full factorial design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field change location displayed. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/full_factorial.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Full Factorial Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears Field Book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/full_factorial.html","id":"using-the-fieldhub-function-full_factorial","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: full_factorial()","title":"Full Factorial Design","text":"can run design function FielDHub package, full_factorial(). First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) factorial <- full_factorial(   setfactors = c(3,3,2),    reps = 3,    l = 1,    type = 2,    plotNumber = 101,   planter = \"serpentine\",   locationNames = \"FARGO\",   seed = 1239 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/full_factorial.html","id":"details-on-the-inputs-entered-in-full_factorial-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: full_factorial()","what":"Details on the inputs entered in full_factorial() above","title":"Full Factorial Design","text":"description inputs used generate design, setfactors = c(3,3,2) levels factor. reps = 3 number replications treatment. l = 1 number locations. type = 2 means CRD RCBD, 1 2 respectively. plotNumber = 101 starting plot number. planter = \"serpentine\" order layout. locationNames = \"FARGO\" optional name location. seed = 1239 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/full_factorial.html","id":"print-factorial-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: full_factorial()","what":"Print factorial object","title":"Full Factorial Design","text":"","code":"print(factorial) Full Factorial Design   Information on the design parameters:  List of 9  $ factors           : chr [1:3] \"A\" \"B\" \"C\"  $ levels            : int [1:8] 0 1 2 0 1 2 0 1  $ runs              : int 18  $ all_treatments    :'data.frame': 18 obs. of  3 variables:   ..$ A: int [1:18] 0 1 2 0 1 2 0 1 2 0 ...   ..$ B: int [1:18] 0 0 0 1 1 1 2 2 2 0 ...   ..$ C: int [1:18] 0 0 0 0 0 0 0 0 0 1 ...  $ reps              : num 3  $ locations         : num 1  $ location_names    : chr \"FARGO\"  $ kind              : chr \"RCBD\"  $ levels_each_factor: num [1:3] 3 3 2   10 First observations of the data frame with the full_factorial field book:     ID LOCATION PLOT REP FACTOR_A FACTOR_B FACTOR_C TRT_COMB 1   1    FARGO  101   1        0        1        0    0*1*0 2   2    FARGO  102   1        1        1        0    1*1*0 3   3    FARGO  103   1        2        1        0    2*1*0 4   4    FARGO  104   1        2        1        1    2*1*1 5   5    FARGO  105   1        2        2        0    2*2*0 6   6    FARGO  106   1        1        0        1    1*0*1 7   7    FARGO  107   1        0        0        1    0*0*1 8   8    FARGO  108   1        1        2        0    1*2*0 9   9    FARGO  109   1        0        2        0    0*2*0 10 10    FARGO  110   1        0        1        1    0*1*1"},{"path":"https://didiermurillof.github.io/FielDHub/articles/full_factorial.html","id":"access-to-factorial-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: full_factorial()","what":"Access to factorial object","title":"Full Factorial Design","text":"full_factorial() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. factorial$layoutRandom factorial$fieldBook. factorial$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, TRT_COMB, columns factor individually.","code":"field_book <- factorial$fieldBook head(factorial$fieldBook, 10) ID LOCATION PLOT REP FACTOR_A FACTOR_B FACTOR_C TRT_COMB 1   1    FARGO  101   1        0        1        0    0*1*0 2   2    FARGO  102   1        1        1        0    1*1*0 3   3    FARGO  103   1        2        1        0    2*1*0 4   4    FARGO  104   1        2        1        1    2*1*1 5   5    FARGO  105   1        2        2        0    2*2*0 6   6    FARGO  106   1        1        0        1    1*0*1 7   7    FARGO  107   1        0        0        1    0*0*1 8   8    FARGO  108   1        1        2        0    1*2*0 9   9    FARGO  109   1        0        2        0    0*2*0 10 10    FARGO  110   1        0        1        1    0*1*1"},{"path":"https://didiermurillof.github.io/FielDHub/articles/full_factorial.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: full_factorial()","what":"Plot the field layout","title":"Full Factorial Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follow,","code":"plot(factorial)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/incomplete_blocks.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Incomplete Block Design","text":"launch app need run either app running, go Designs > Incomplete Block Design (IBD) , follow following steps show generate kind design example 28 treatments 4 reps. run experiment just one location.","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/incomplete_blocks.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Incomplete Block Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must columns ENTRY NAME. ENTRY column must unique entry integer number treatment/genotype. column NAME must unique name identifies treatment/genotype. ENTRY NAME must unique, duplicates allowed. following table, show example entries list format. example entry list 12 treatments. Input number treatments Input # Treatments box. alpha lattice design, number treatments must composite number. case, Set 28. Select number replications treatments Input # Full Reps box. Set 4. Set number plots incomplete block Input # Plots per IBlock box. Set 4. Enter number locations Input # Locations. run experiment single location, set 1. Select serpentine cartesian Plot Order Layout. example use default cartesian layout. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. Set 101. Enter name location experiment Input Location box. multiple locations, name must comma separated list. Set \"FARGO\". ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1243. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/incomplete_blocks.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Incomplete Block Design","text":"run incomplete block design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/incomplete_blocks.html","id":"field-layout","dir":"Articles","previous_headings":"Outputs","what":"Field Layout","title":"Incomplete Block Design","text":"first click run button incomplete block design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/incomplete_blocks.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Incomplete Block Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears Field Book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/incomplete_blocks.html","id":"using-the-fieldhub-function-incomplete_blocks","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: incomplete_blocks()","title":"Incomplete Block Design","text":"can run design function FielDHub package, incomplete_blocks(). First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) ibd <- incomplete_blocks(   t = 28,   r = 4,   k = 4,    l = 1,   seed = 1243 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/incomplete_blocks.html","id":"details-on-the-inputs-entered-in-incomplete_blocks-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: incomplete_blocks()","what":"Details on the inputs entered in incomplete_blocks() above","title":"Incomplete Block Design","text":"description inputs used generate design, t = 28 number treatments. r=4 number replicates. k = 4 number plots per incomplete block. l = 1 number locations plotNumber = 101 starting plot number. locationNames = \"FARGO\" optional name location. seed = 1243 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/incomplete_blocks.html","id":"print-ibd-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: incomplete_blocks()","what":"Print ibd object","title":"Incomplete Block Design","text":"","code":"print(ibd) Incomplete Blocks Design   Information on the design parameters:  List of 7  $ Reps            : num 4  $ iBlocks         : num 7  $ NumberTreatments: num 28  $ NumberLocations : num 1  $ Locations       : int 1  $ seed            : num 1243  $ lambda          : num 0.444   10 First observations of the data frame with the incomplete_blocks field book:     ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT 1   1        1  101   1      1    1    14      G-14 2   2        1  102   1      1    2     9       G-9 3   3        1  103   1      1    3    28      G-28 4   4        1  104   1      1    4    19      G-19 5   5        1  105   1      2    1     2       G-2 6   6        1  106   1      2    2    10      G-10 7   7        1  107   1      2    3     8       G-8 8   8        1  108   1      2    4    27      G-27 9   9        1  109   1      3    1    11      G-11 10 10        1  110   1      3    2    26      G-26"},{"path":"https://didiermurillof.github.io/FielDHub/articles/incomplete_blocks.html","id":"access-to-ibd-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: incomplete_blocks()","what":"Access to ibd object","title":"Incomplete Block Design","text":"incomplete_blocks() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. ibd$layoutRandom ibd$fieldBook. ibd$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, IBLOCK, UNIT, ENTRY, TREATMENT.","code":"field_book <- ibd$fieldBook head(ibd$fieldBook, 10) ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT 1   1        1  101   1      1    1    14      G-14 2   2        1  102   1      1    2     9       G-9 3   3        1  103   1      1    3    28      G-28 4   4        1  104   1      1    4    19      G-19 5   5        1  105   1      2    1     2       G-2 6   6        1  106   1      2    2    10      G-10 7   7        1  107   1      2    3     8       G-8 8   8        1  108   1      2    4    27      G-27 9   9        1  109   1      3    1    11      G-11 10 10        1  110   1      3    2    26      G-26"},{"path":"https://didiermurillof.github.io/FielDHub/articles/incomplete_blocks.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: incomplete_blocks()","what":"Plot the field layout","title":"Incomplete Block Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follow,","code":"plot(ibd)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/latin_square.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Latin Square Design","text":"launch app need run either app running, go Designs > Latin Square Design , follow following steps show generate kind design example 5 treatments 2 reps.","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/latin_square.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Latin Square Design","text":"selection , means app going generate synthetic data entries names treatment based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must three columns: ROW, COLUMN TREATMENT. columns contain list unique names identify treatment. Duplicate values allowed, entries must unique. following table, show example entries list format. example entry list 5 treatments. Input number treatments Input # Treatments box. alpha lattice design, number treatments must composite number. Select number replications treatments Input # Full Reps box. number treatments number full reps set dimensions field. Select serpentine cartesian Plot Order Layout. example use default serpentine layout. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. Enter name location experiment Input Location box. completely randomized design can run single location time. ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 123. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/latin_square.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Latin Square Design","text":"run Latin square design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/latin_square.html","id":"field-layout","dir":"Articles","previous_headings":"Outputs","what":"Field Layout","title":"Latin Square Design","text":"first click run button Latin square design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/latin_square.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Latin Square Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/latin_square.html","id":"using-the-fieldhub-function-latin_square","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: latin_square()","title":"Latin Square Design","text":"can run design function FielDHub package, latin_square(). First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) lsd <- latin_square(   t = 5,   reps = 2,   plotNumber = 101,   planter = \"serpentine\",   seed = 1238 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/latin_square.html","id":"details-on-the-inputs-entered-in-latin_square-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: latin_square()","what":"Details on the inputs entered in latin_square() above","title":"Latin Square Design","text":"t = 5 number treatments. reps = 2 number replications (squares). plotNumber = 101 starting plot number. planter = \"cartesian\" plot order layout. locationNames = \"FARGO\" optional name location. seed = 1238 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/latin_square.html","id":"print-lsd-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: latin_square()","what":"Print lsd object","title":"Latin Square Design","text":"","code":"print(lsd) Latin Square Design:   Information on the design parameters:  List of 4  $ treatments  : int 5  $ squares     : num 2  $ locationName: NULL  $ seed        : num 1238   10 First observations of the data frame with the latin_square field book:     ID LOCATION PLOT SQUARE   ROW   COLUMN TREATMENT 1   1        1  101      1 Row 1 Column 1        T5 2   2        1  102      1 Row 1 Column 2        T1 3   3        1  103      1 Row 1 Column 3        T2 4   4        1  104      1 Row 1 Column 4        T4 5   5        1  105      1 Row 1 Column 5        T3 6   6        1  110      1 Row 2 Column 1        T4 7   7        1  109      1 Row 2 Column 2        T2 8   8        1  108      1 Row 2 Column 3        T3 9   9        1  107      1 Row 2 Column 4        T1 10 10        1  106      1 Row 2 Column 5        T5"},{"path":"https://didiermurillof.github.io/FielDHub/articles/latin_square.html","id":"access-to-lsd-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: latin_square()","what":"Access to lsd object","title":"Latin Square Design","text":"latin_square() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. lsd$layoutRandom lsd$fieldBook. lsd$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, SQUARE, ROW, COLUMN, TREATMENT.","code":"field_book <- lsd$fieldBook head(lsd$fieldBook, 10) ID LOCATION PLOT SQUARE   ROW   COLUMN TREATMENT 1   1        1  101      1 Row 1 Column 1        T5 2   2        1  102      1 Row 1 Column 2        T1 3   3        1  103      1 Row 1 Column 3        T2 4   4        1  104      1 Row 1 Column 4        T4 5   5        1  105      1 Row 1 Column 5        T3 6   6        1  110      1 Row 2 Column 1        T4 7   7        1  109      1 Row 2 Column 2        T2 8   8        1  108      1 Row 2 Column 3        T3 9   9        1  107      1 Row 2 Column 4        T1 10 10        1  106      1 Row 2 Column 5        T5"},{"path":"https://didiermurillof.github.io/FielDHub/articles/latin_square.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: latin_square()","what":"Plot the field layout","title":"Latin Square Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follow,","code":"plot(lsd)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/methods.html","id":"print","dir":"Articles","previous_headings":"","what":"print()","title":"Methods in FielDHub","text":"print() function prints design parameters experiment first 10 rows field book. first 10 rows field book saved output function assigned variable.","code":"print(experiment) Randomized Complete Block Design (RCBD):   Information on the design parameters:  List of 7  $ blocks              : num 3  $ number.of.treatments: num 12  $ treatments          : chr [1:12] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ locations           : num 2  $ plotNumber          : num [1:6] 1001 1101 1201 2001 2101 ...  $ locationNames       : chr [1:2] \"A\" \"B\"  $ seed                : num 123   10 First observations of the data frame with the RCBD field book:     ID LOCATION PLOT REP TREATMENT 1   1        A 1001   1        T3 2   2        A 1002   1       T12 3   3        A 1003   1       T10 4   4        A 1004   1        T2 5   5        A 1005   1        T6 6   6        A 1006   1       T11 7   7        A 1007   1        T5 8   8        A 1008   1        T4 9   9        A 1009   1        T9 10 10        A 1010   1        T8"},{"path":"https://didiermurillof.github.io/FielDHub/articles/methods.html","id":"summary","dir":"Articles","previous_headings":"","what":"summary()","title":"Methods in FielDHub","text":"summary() function outputs list design parameters layout randomization plot numbers.","code":"summary(experiment) Randomized Complete Block Design (RCBD):   1. Information on the design parameters:  List of 8  $ blocks              : num 3  $ number.of.treatments: num 12  $ treatments          : chr [1:12] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ locations           : num 2  $ plotNumber          : num [1:6] 1001 1101 1201 2001 2101 ...  $ locationNames       : chr [1:2] \"A\" \"B\"  $ seed                : num 123  $ id_design           : num 2  2. Layout randomization for each location:  $Loc_A      Block --Treatments--                           [1,] \"1\"   \"T3 T12 T10 T2 T6 T11 T5 T4 T9 T8 T1 T7\" [2,] \"2\"   \"T11 T5 T3 T9 T4 T1 T7 T12 T10 T2 T6 T8\" [3,] \"3\"   \"T9 T3 T4 T1 T11 T7 T5 T10 T8 T2 T12 T6\"  $Loc_B      Block --Treatments--                           [1,] \"1\"   \"T9 T12 T10 T7 T3 T4 T5 T6 T8 T2 T1 T11\" [2,] \"2\"   \"T5 T8 T2 T1 T9 T3 T11 T12 T7 T6 T4 T10\" [3,] \"3\"   \"T12 T4 T6 T8 T10 T9 T1 T2 T7 T5 T3 T11\"   3. Plot numbers layout:  $Loc_A      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [1,] 1001 1002 1003 1004 1005 1006 1007 1008 1009  1010  1011  1012 [2,] 1112 1111 1110 1109 1108 1107 1106 1105 1104  1103  1102  1101 [3,] 1201 1202 1203 1204 1205 1206 1207 1208 1209  1210  1211  1212  $Loc_B      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [1,] 2001 2002 2003 2004 2005 2006 2007 2008 2009  2010  2011  2012 [2,] 2112 2111 2110 2109 2108 2107 2106 2105 2104  2103  2102  2101 [3,] 2201 2202 2203 2204 2205 2206 2207 2208 2209  2210  2211  2212   4. Structure of the data frame with the RCBD field book:   'data.frame':   72 obs. of  5 variables:  $ ID       : int  1 2 3 4 5 6 7 8 9 10 ...  $ LOCATION : Factor w/ 2 levels \"A\",\"B\": 1 1 1 1 1 1 1 1 1 1 ...  $ PLOT     : int  1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 ...  $ REP      : int  1 1 1 1 1 1 1 1 1 1 ...  $ TREATMENT: chr  \"T3\" \"T12\" \"T10\" \"T2\" ..."},{"path":"https://didiermurillof.github.io/FielDHub/articles/methods.html","id":"plot","dir":"Articles","previous_headings":"","what":"plot()","title":"Methods in FielDHub","text":"plot() function plots field input design, displayed FielDHub. can also saved variable. function parameters location layout, applicable.","code":"plot(experiment, l = 2, layout = 2)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/news/fieldhub-0-1-0.html","id":"fieldhub-0-1-0","dir":"Articles > News","previous_headings":"","what":"FielDHub 0.1.0","title":"","text":"Photo Karsten Würth Unsplash","code":""},{"path":[]},{"path":[]},{"path":"https://didiermurillof.github.io/FielDHub/articles/news/fieldhub-0-1-0.html","id":"didier-murillo","dir":"Articles > News","previous_headings":"FielDHub 0.1.0","what":"Didier Murillo","title":"","text":"delighted announce initial release FielDHub CRAN! FielDHub conceived make quick easy generate, randomize, plot complex standard experimental designs. initial release version 0.1.0 recognition FielDHub development one year already used researchers NDSU, CIAT, well teaching. Install FielDHub :","code":"install.packages(\"FielDHub\")"},{"path":"https://didiermurillof.github.io/FielDHub/articles/news/fieldhub-0-1-0.html","id":"usage","dir":"Articles > News","previous_headings":"FielDHub 0.1.0","what":"Usage","title":"","text":"Get started using two simple lines code:","code":"library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/news/fieldhub-0-1-0.html","id":"relevant-features","dir":"Articles > News","previous_headings":"FielDHub 0.1.0","what":"Relevant Features","title":"","text":"Unreplicated partially replicated designs commonly used plant breeding forestry lack free tools available researchers make randomization. FielDHub provides easy way complete designs using app standalone functions diagonal_arrangement(), optimized_arrangement() RCBD_augmented(). Partially replicated design can done using function partially_replicated(). app provides novel features make randomization along field layout map. FielDHub’s features generating synthetic data along randomization, well plotting field layouts make app suitable teach statistic courses experimental design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/news/fieldhub-0-1-0.html","id":"acknowledgements","dir":"Articles > News","previous_headings":"FielDHub 0.1.0","what":"Acknowledgements","title":"","text":"FielDHub long time coming, wouldn’t possible without devoted community users, many gone contribute fixes new ideas. like particularly thank Dr. Richard Horsley (Professor, Department Head & Barley Breeder Department Plant Sciences) sponsored development project. Also, big thanks go Dr. Ana María Heilman Dr. Andrew Green support plant breeding/biological background. project without contributions knowledge Dr. Salvador Gezan. came project critical moment ideas code, went beyond expected. Thank Johan Aparicio Thomas Walk contributions FielDHub. FielDHub submitted published Journal Open Source Software. peer review process done Thiago de Paula Oliveira (Reviewer), David LeBauer (Reviewer), Charlotte Soneson (Editor). Thank work, effort, contributions.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/news/fieldhub-1-2-0.html","id":"fieldhub-1-2-0","dir":"Articles > News","previous_headings":"","what":"FielDHub 1.2.0","title":"","text":"Photo Vackground Unsplash","code":""},{"path":[]},{"path":[]},{"path":"https://didiermurillof.github.io/FielDHub/articles/news/fieldhub-1-2-0.html","id":"didier-murillo","dir":"Articles > News","previous_headings":"FielDHub 1.2.0","what":"Didier Murillo","title":"","text":"happy announce release FielDHub v1.2.0. 12 months hard work commitment. new version comes many changes, new features, better graphical user interface design shiny app.","code":""},{"path":[]},{"path":"https://didiermurillof.github.io/FielDHub/articles/news/fieldhub-1-2-0.html","id":"shiny-app","dir":"Articles > News","previous_headings":"FielDHub 1.2.0","what":"Shiny App","title":"","text":"Added help menu option app connect directly documentation available GitHub repository. Added vignettes help documentation standard functions modules available designs app. Added capability making multiple randomizations across different locations unreplicated, partially replicated, lattice, RCBD, factorial, split-plot, split-split-plot, strip-plot, IBD, RCD designs. Added capability produce heatmap visualizations simulated data experimental designs. Added action buttons copy save field maps field book outputs Excel. Added factorization options aid users creation randomizations mapping layouts unreplicated partially replicated designs. Previous version required users * mathematical calculation priori. Added filters search boxes field book tables. Updated UI/UX design home page. Grouped single diagonal arrangement, multiple diagonal arrangement, optimized arrangement augmented RCB designs one single module. Added action run button experimental designs prevent reactivity issues application. Improved standardized user experience features readability access. Improved error logging messages. Added features inform end-users utilization correct input data file formats associated metadata/columns, checking duplicate values input files, well data type verification. Added additional field layout visualization/map options experimental designs. Previous version mapping options unreplicated p-rep designs. Added drop-menu display multiple layout mapping option shown entry number plot experimental designs. means, now can visualize randomization layout option locations input. Added option repeating whole entries/experiments unreplicated diagonal arrangement design multiple experiments (previously called decision blocks). Added check box feature Augmented RCB design allow creation nurseries option randomizing experimental entries . user decides leave option unchecked, checks randomized, experimental entries shown consecutive order. Added check box option RCB design allow continuous plot numbering independently rep block number. Previous version coded replication plot number (.e., 101 =rep1, 201=rep2, etc.). Fixed restriction RCBD mapping layout allow use 25 entries. PS: better designs number entries higher 25 (info go : FIELD PLOT DESIGN ).","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/news/fieldhub-1-2-0.html","id":"standalone-functions-in-fieldhub-package","dir":"Articles > News","previous_headings":"FielDHub 1.2.0","what":"Standalone Functions in FielDHub Package","title":"","text":"partially_replicated() now generates randomization across multiple locations/sites. diagonal_arrangement() now generates randomization across multiple locations/sites. optimized_arrangement() now generates randomization across multiple locations/sites. partially_replicated() now allows entries/treatments replicates. , required least unreplicated entries. Functions optimized_arrangement(), diagonal_arrangement() partially_replicated() now return feedback input dimensions nrows ncols incorrect. RCBD() now includes argument (continuous) manage way sets plotting number. RCBD_augmented() now allows customization field dimensions inputting number rows columns nrows ncols arguments. RCBD_augmented() now returns feedback input dimensions nrows ncols match data entered. RCBD_augmented() random = FALSE now allows randomizing checks/controls user wants. Fixed bug full_factorial() CRD factorial design prevented option including possible factorial combinations. Added method print() class fieldLayout. See print(). Added method plot() class FieldHub returns object class fieldLayout. See plot(). method plot() can plot field layout designs output. possible pass arguments location, layout order others. detail see plot(), print() summary() methods FielDHub. Fixed bug diagonal_arrangement() kindExpt = DBUDC. problem affected random distribution checks case unbalanced control plot numbers experiment. Fixed bug diagonal_arrangement() kindExpt = DBUDC. problem affected merging data user data randomization data users wanted replicated entries across experiments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/news/fieldhub-1-2-0.html","id":"acknowledgements","dir":"Articles > News","previous_headings":"FielDHub 1.2.0","what":"Acknowledgements","title":"","text":"FielDHub v1.2.0 long time coming, wouldn’t possible without effort contribution Matthew Seefeldt. Thank Johan Aparicio bugs reported. Thank Ana María Heilman support leadership.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Unreplicated Optimized Arrangement Design","text":"One kind unreplicated design can use FielDHub optimized arrangement. Unlike diagonal design, optimized arrangement completely randomizes positions checks instead putting systematic diagonal pattern. Randomization subject restrictions. restrictions seek optimize distribution control plots field ensure spread across rows columns. FielDHub includes function run experimental designs, features include options set number entries number checks experiment. Users can also choose run experiment multiple locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"Unreplicated Optimized Arrangement Design","text":"early generation plant breeding project needs test 401 genotypes winter wheat. planned carry experiment field containing 29 rows 15 columns plots. project, 401 genotypes allocated one experiment tested three locations. addition, three checks randomly included across field fill 34 plots representing 7.8% total number experimental plots.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"running-the-shiny-app","dir":"Articles","previous_headings":"","what":"Running the Shiny App","title":"Unreplicated Optimized Arrangement Design","text":"launch app need run either, ","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Unreplicated Optimized Arrangement Design","text":"app running, go Unreplicated Designs > Optimized Arrangement , follow following steps show generate unreplicated optimized arrangement design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Unreplicated Optimized Arrangement Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must columns ENTRY, NAME, REPS. ENTRY column must unique entry integer number treatment/genotype. column NAME must unique name identifies treatment/genotype. REPS column must integer entry replications checks entries. ENTRY NAME must unique, duplicates allowed. following table, show example entries list format. example entry list three checks nine treatments/genotypes. crucial allocate checks top part file. Enter number checks Input # Checks box, 3 case. Enter number replications checks comma separated list containing number check Input # Check’s Reps box. example experiment, enter 12,11,11. Enter number entries/treatments Input # Entries box, 300 case. Select serpentine cartesian Plot Order Layout. example set serpentine layout. Since want run experiment 3 locations, set Input # Locations 3. ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. instance, set 130. Enter name experiment Input Experiment Name box. example, PYT_WHEAT_22. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. Since 3 locations experiment, enter 1001,2001,3001. Enter name site/location Input Location box. case run experiment three locations, name location must enter separate comma, example: FARGO, CASSELTON, MINOT. entered information experiment left side panel, click Run! button run design. prompted select dimensions field list options drop middle screen box labeled Select dimensions field. case, select 15 x 29. Click Randomize! button randomize experiment set field dimensions see output plots. change dimensions , must re-randomize. change inputs left side panel running experiment initially, click Run Randomize buttons , re-run new inputs.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Unreplicated Optimized Arrangement Design","text":"run unreplicated optimized arrangement design FielDHub set dimensions field, several ways display information contained field book. first tab, Get Random, shows option change dimensions field re-randomize, well reference guide experiment design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"data-input","dir":"Articles","previous_headings":"Outputs","what":"Data Input","title":"Unreplicated Optimized Arrangement Design","text":"second tab, Data Input, can see entries randomization list, well table checks number times appear field. list entries, reps check included well.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"randomized-field","dir":"Articles","previous_headings":"Outputs","what":"Randomized Field","title":"Unreplicated Optimized Arrangement Design","text":"Randomized Field tab displays graphical representation randomization entries field specified dimensions. checks colored uniquely, showing number times distributed throughout field. display includes numbered labels rows columns. can copy field table save directly Excel file Copy Excel buttons top.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"plot-number-field","dir":"Articles","previous_headings":"Outputs","what":"Plot Number Field","title":"Unreplicated Optimized Arrangement Design","text":"Plot Number Field tab, table display field plots numbered according Plot Order Layout specified, either serpentine cartesian. can see corresponding entries plot number field book. Like Randomized Field tab, can copy table save Excel file Copy Excel buttons.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Unreplicated Optimized Arrangement Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"using-the-fieldhub-function-optimized_arrangement-","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: optimized_arrangement().","title":"Unreplicated Optimized Arrangement Design","text":"can run design function optimized_arrangement() FielDHub package. First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) optim_expt <- optimized_arrangement(   nrows = 29,   ncols = 15,   lines = 401,    amountChecks = c(12,11,11),   checks = 3,    l = 3,   plotNumber = c(1001,2001,3001),   exptName = \"WINTER_WHEAT_22\",    locationNames = c(\"FARGO\", \"CASSELTON\", \"MINOT\"),   seed = 130 ) [1] 435"},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"details-on-the-inputs-entered-in-optimized_arrangement-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: optimized_arrangement().","what":"Details on the inputs entered in optimized_arrangement() above","title":"Unreplicated Optimized Arrangement Design","text":"description inputs used generate design, nrows = 29 number rows field. ncols = 15 number columns field. lines = 401 number entries amountChecks = c(12,11,11) values representing respective replicates check, integer total number checks. checks = 3 number checks. l = 3 number locations. plotNumber = c(1001,2001,3001) starting plot number location respectively, single number 1 location. exptName = \"WINTER_WHEAT_22\" optional name experiment. locationNames = c(\"FARGO\", \"CASSELTON\", \"MINOT\") values representing respective name location. seed = 130 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"print-optim_expt-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: optimized_arrangement().","what":"Print optim_expt object","title":"Unreplicated Optimized Arrangement Design","text":"print summary information object optim_expt, can use generic function print().","code":"print(optim_expt) Un-replicated Optimized Arrangement Design   Information on the design parameters:  List of 9  $ rows        : num 29  $ columns     : num 15  $ treatments  : num 401  $ checks      : int 3  $ entry_checks: int [1:3] 1 2 3  $ rep_checks  : num [1:3] 12 11 11  $ locations   : num 3  $ planter     : chr \"serpentine\"  $ seed        : num 130   10 First observations of the data frame with the optimized_arrangement field book:     ID            EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 WINTER_WHEAT_22    FARGO 2022 1001   1      1      0   222      G222 2   2 WINTER_WHEAT_22    FARGO 2022 1002   1      2      0   174      G174 3   3 WINTER_WHEAT_22    FARGO 2022 1003   1      3      0    82       G82 4   4 WINTER_WHEAT_22    FARGO 2022 1004   1      4      0   374      G374 5   5 WINTER_WHEAT_22    FARGO 2022 1005   1      5      1     1       CH1 6   6 WINTER_WHEAT_22    FARGO 2022 1006   1      6      0   218      G218 7   7 WINTER_WHEAT_22    FARGO 2022 1007   1      7      0   382      G382 8   8 WINTER_WHEAT_22    FARGO 2022 1008   1      8      0    18       G18 9   9 WINTER_WHEAT_22    FARGO 2022 1009   1      9      0   384      G384 10 10 WINTER_WHEAT_22    FARGO 2022 1010   1     10      0   398      G398"},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"access-to-optim_expt-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: optimized_arrangement().","what":"Access to optim_expt object","title":"Unreplicated Optimized Arrangement Design","text":"optimized_arrangement() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. Accessible $ operator, .e. optim_expt$layoutRandom optim_expt$fieldBook. optim_expt$fieldBook data frame containing information every plot field, information location plot treatment plot. seen output , field book columns ID, EXPT, LOCATION, YEAR, PLOT, ROW, COLUMN, CHECKS, ENTRY, TREATMENT. Let us see first 10 rows field book experiment.","code":"field_book <- optim_expt$fieldBook head(field_book, 10) ID            EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 WINTER_WHEAT_22    FARGO 2022 1001   1      1      0   222      G222 2   2 WINTER_WHEAT_22    FARGO 2022 1002   1      2      0   174      G174 3   3 WINTER_WHEAT_22    FARGO 2022 1003   1      3      0    82       G82 4   4 WINTER_WHEAT_22    FARGO 2022 1004   1      4      0   374      G374 5   5 WINTER_WHEAT_22    FARGO 2022 1005   1      5      1     1       CH1 6   6 WINTER_WHEAT_22    FARGO 2022 1006   1      6      0   218      G218 7   7 WINTER_WHEAT_22    FARGO 2022 1007   1      7      0   382      G382 8   8 WINTER_WHEAT_22    FARGO 2022 1008   1      8      0    18       G18 9   9 WINTER_WHEAT_22    FARGO 2022 1009   1      9      0   384      G384 10 10 WINTER_WHEAT_22    FARGO 2022 1010   1     10      0   398      G398"},{"path":"https://didiermurillof.github.io/FielDHub/articles/optimized_arrangement.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: optimized_arrangement().","what":"Plot the field layout","title":"Unreplicated Optimized Arrangement Design","text":"plotting layout function coordinates ROW COLUMN field book object can use generic function plot() follow,  figure shows map experiment randomized unreplicated optimized arrangement design. Gray plots represent unreplicated treatments, distinctively colored check plots randomly replicated throughout field. possible pass arguments plot() specific location. example, can plot specifically layout location 2.","code":"plot(optim_expt) plot(optim_expt, l = 2)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Partially Replicated Design","text":"Partially replicated designs commonly employed early generation field trials. type design characterized replication portion entries, remaining entries appearing experiment. Commonly, part treatments reps due arbitrary decision research, also cases, due technical reasons. design, recommended replicate least 1/3 treatments. design can set number entries reps, well number entries appear . can also choose run experiment multiple locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"Partially Replicated Design","text":"Consider plant breeding field trial 300 plots containing 75 entries appearing two times , 130 entries appearing . field trial arranged field 15 rows 20 columns. case, breeder decided replicate genotypes share significant generic information (75), well leave just one copy genotypes siblings (130).","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"running-the-shiny-app","dir":"Articles","previous_headings":"","what":"Running the Shiny App","title":"Partially Replicated Design","text":"launch app need run either ","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Partially Replicated Design","text":"app running, go tab Partially Replicated Design , follow following steps show generate partially replicated design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Partially Replicated Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must columns ENTRY, NAME, REPS. ENTRY column must unique entry integer number treatment/genotype. column NAME must unique name identifies treatment/genotype. REPS column must integer number replications groups. ENTRY NAME must unique, duplicates allowed. following table, show example entries list format. example entry list four treatments/genotypes appear twice 8 appear just . Enter number entries per replicate group # Entries per Rep Group box comma separated list. example 2 groups 85 130 entries. , enter 75, 130 box sample experiment. Enter number replications per group # Rep per Group box. example 2 1 replications 2 groups, enter 2, 1 box. Enter number locations Input # Locations. run experiment single location, set Input # Locations 1. Select serpentine cartesian Plot Order Layout. example use default serpentine layout. ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1245. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. entered information experiment left side panel, click Run! button run design. prompted select dimensions field list options drop middle screen box labeled Select dimensions field. case, select 15 x 20. Click Randomize! button randomize experiment set field dimensions see output plots. change dimensions , must re-randomize. change inputs left side panel running experiment initially, click Run Randomize buttons , re-run new inputs.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Partially Replicated Design","text":"run single diagonal arrangement FielDHub set dimensions field, several ways display information contained field book. first tab, Get Random, shows option change dimensions field re-randomize, well reference guide experiment design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"data-input","dir":"Articles","previous_headings":"Outputs","what":"Data Input","title":"Partially Replicated Design","text":"second tab, Data Input, can see entries randomization list, well table checks number times appear field. list entries, reps check included well.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"randomized-field","dir":"Articles","previous_headings":"Outputs","what":"Randomized Field","title":"Partially Replicated Design","text":"Randomized Field tab displays graphical representation randomization entries field specified dimensions. checks green colored cells, display includes numbered labels rows columns. can copy field table save directly Excel file Copy Excel buttons top.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"plot-number-field","dir":"Articles","previous_headings":"Outputs","what":"Plot Number Field","title":"Partially Replicated Design","text":"Plot Number Field tab, table display field plots numbered according Plot Order Layout specified, either serpentine cartesian. can see corresponding entries plot number field book. Like Randomized Field tab, can copy table save Excel file Copy Excel buttons.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Partially Replicated Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"using-the-fieldhub-function-partially_replicated-","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: partially_replicated().","title":"Partially Replicated Design","text":"can run design function partially_replicated() FielDHub package. First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) prep <- partially_replicated(   nrows = 15,   ncols = 20,    repGens = c(75,150),   repUnits = c(2,1),    planter = \"serpentine\",    plotNumber = 101,   l = 1,    exptName = \"Expt1\",   locationNames = \"PALMIRA\",   seed = 1245,  )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"details-on-the-inputs-entered-in-optimized_arrangement-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: partially_replicated().","what":"Details on the inputs entered in optimized_arrangement() above","title":"Partially Replicated Design","text":"description inputs used generate design, nrows = 15 number rows field. ncols = 20 number columns field. repGens = c(75,150) values groups replicate repUnits = c(2,1) values representing respective replicates group. planter = \"serpentine\" layout order. plotNumber = 101 starting plot number experiment. l = 1 number locations. exptName = \"Expt1\" optional name experiment. locationNames = \"PALMIRA\" optional name locations. seed = 1245 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"print-prep-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: partially_replicated().","what":"Print prep object","title":"Partially Replicated Design","text":"print summary information object prep, can use generic function print().","code":"print(prep) Partially Replicated Design   Information on the design parameters:  List of 7  $ rows                   : num 15  $ columns                : num 20  $ treatments_with_reps   : int 75  $ treatments_with_no_reps: int 150  $ locations              : num 1  $ planter                : chr \"serpentine\"  $ seed                   : num 1245   10 First observations of the data frame with the partially_replicated field book:     ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 Expt1  PALMIRA 2022  101   1      1     49    49       G49 2   2 Expt1  PALMIRA 2022  102   1      2     47    47       G47 3   3 Expt1  PALMIRA 2022  103   1      3     15    15       G15 4   4 Expt1  PALMIRA 2022  104   1      4      0   146      G146 5   5 Expt1  PALMIRA 2022  105   1      5     59    59       G59 6   6 Expt1  PALMIRA 2022  106   1      6      5     5        G5 7   7 Expt1  PALMIRA 2022  107   1      7      0   136      G136 8   8 Expt1  PALMIRA 2022  108   1      8     29    29       G29 9   9 Expt1  PALMIRA 2022  109   1      9      0   102      G102 10 10 Expt1  PALMIRA 2022  110   1     10      0   177      G177"},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"access-to-prep-output","dir":"Articles","previous_headings":"2. Using the FielDHub function: partially_replicated().","what":"Access to prep output","title":"Partially Replicated Design","text":"partially_replicated() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. Accessible $ operator, .e. prep$layoutRandom prep$fieldBook. prep$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, EXPT, LOCATION, YEAR, PLOT, ROW, COLUMN, CHECKS, ENTRY, TREATMENT. Let us see first 10 rows field book experiment.","code":"field_book <- prep$fieldBook head(field_book, 10) ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 Expt1  PALMIRA 2022  101   1      1     49    49       G49 2   2 Expt1  PALMIRA 2022  102   1      2     47    47       G47 3   3 Expt1  PALMIRA 2022  103   1      3     15    15       G15 4   4 Expt1  PALMIRA 2022  104   1      4      0   146      G146 5   5 Expt1  PALMIRA 2022  105   1      5     59    59       G59 6   6 Expt1  PALMIRA 2022  106   1      6      5     5        G5 7   7 Expt1  PALMIRA 2022  107   1      7      0   136      G136 8   8 Expt1  PALMIRA 2022  108   1      8     29    29       G29 9   9 Expt1  PALMIRA 2022  109   1      9      0   102      G102 10 10 Expt1  PALMIRA 2022  110   1     10      0   177      G177"},{"path":"https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","id":"plot-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: partially_replicated().","what":"Plot field layout","title":"Partially Replicated Design","text":"plotting layout function coordinates ROW COLUMN field book object can use generic function plot() follow,  figure , green plots contain replicated entries, gray plots contain entries appear .","code":"plot(prep)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/rcbd.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Randomized Complete Block Design","text":"launch app need run either app running, go Designs > Randomized Complete Block Designs (RCBD) , follow following steps show generate kind design example 24 treatments 4 reps. run experiment just one location.","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/rcbd.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Randomized Complete Block Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must single column TREATMENT, containing list unique names identify treatment/genotype. Duplicate values allowed, entries must unique. following, show example entries list format. example entry list 10 treatments. Input number treatments Input # Treatments box. Set 24. Select number replications treatments Input # Full Reps box. number treatments number full reps set dimensions field. Set 4. Enter number locations Input # Locations. run experiment single location, set 1. Select serpentine cartesian Plot Order Layout. example use default serpentine layout. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. case, set 101. Enter name location experiment Input Location box. multiple locations, name must comma separated list. Set \"FARGO\". ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1237. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rcbd.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Randomized Complete Block Design","text":"run randomized complete block design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rcbd.html","id":"field-layout","dir":"Articles","previous_headings":"Outputs","what":"Field Layout","title":"Randomized Complete Block Design","text":"first click run button randomized complete block design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field change location displayed. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rcbd.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Randomized Complete Block Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rcbd.html","id":"using-the-fieldhub-function-rcbd","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: RCBD()","title":"Randomized Complete Block Design","text":"can run design function FielDHub package, RCBD(). First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) rcbd <- RCBD(   t = 24,    reps = 4,   l = 1,   plotNumber = 101,   locationNames = \"FARGO\",   seed = 1237 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/rcbd.html","id":"details-on-the-inputs-entered-in-rcbd-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: RCBD()","what":"Details on the inputs entered in RCBD() above","title":"Randomized Complete Block Design","text":"description inputs used generate design, t = 24 number treatments. reps = 4 number replications treatment. l = 1 number locations. plotNumber = 101 starting plot number. locationNames = \"FARGO\" optional name location. seed = 1234 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rcbd.html","id":"print-rcbd-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: RCBD()","what":"Print rcbd object","title":"Randomized Complete Block Design","text":"","code":"print(rcbd) Randomized Complete Block Design (RCBD):   Information on the design parameters:  List of 7  $ blocks              : num 4  $ number.of.treatments: num 24  $ treatments          : chr [1:24] \"T1\" \"T2\" \"T3\" \"T4\" ...  $ locations           : num 1  $ plotNumber          : num [1:4] 101 201 301 401  $ locationNames       : chr \"FARGO\"  $ seed                : num 1237   10 First observations of the data frame with the RCBD field book:     ID LOCATION PLOT REP TREATMENT 1   1    FARGO  101   1        T6 2   2    FARGO  102   1        T1 3   3    FARGO  103   1       T21 4   4    FARGO  104   1        T7 5   5    FARGO  105   1       T14 6   6    FARGO  106   1       T17 7   7    FARGO  107   1       T12 8   8    FARGO  108   1       T11 9   9    FARGO  109   1        T3 10 10    FARGO  110   1        T5"},{"path":"https://didiermurillof.github.io/FielDHub/articles/rcbd.html","id":"access-to-rcbd-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: RCBD()","what":"Access to RCBD object","title":"Randomized Complete Block Design","text":"function RCBD returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. rcbd$layoutRandom rcbd$fieldBook. rcbd$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, IBLOCK, UNIT, ENTRY, TREATMENT.","code":"field_book <- rcbd$fieldBook head(rcbd$fieldBook, 10) ID LOCATION PLOT REP TREATMENT 1   1    FARGO  101   1        T6 2   2    FARGO  102   1        T1 3   3    FARGO  103   1       T21 4   4    FARGO  104   1        T7 5   5    FARGO  105   1       T14 6   6    FARGO  106   1       T17 7   7    FARGO  107   1       T12 8   8    FARGO  108   1       T11 9   9    FARGO  109   1        T3 10 10    FARGO  110   1        T5"},{"path":"https://didiermurillof.github.io/FielDHub/articles/rcbd.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: RCBD()","what":"Plot the field layout","title":"Randomized Complete Block Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follows,","code":"plot(rcbd)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/rectangular_lattice.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Rectangular Lattice Design","text":"generate rectangular lattice design using FielDHub app: First, go Lattice Designs > Rectangular Lattice , follow following steps show generate rectangular lattice design 56 treatments 3 reps.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rectangular_lattice.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Rectangular Lattice Design","text":"selection , means app going generate synthetic data entries names treatment based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must columns ENTRY NAME. ENTRY column must unique entry integer number treatment. column NAME must unique name identifies treatment. ENTRY NAME must unique, duplicates allowed. following table, show example entries list format. example entry list 12 treatments. Input number treatments Input # Treatments box. rectangular lattice design, number treatments must rectangular number, product two consecutive integers. example, 7 x 8 = 56 valid entry, use example. Select number replications treatments Input # Full Reps box, 3. Set number plots incomplete block Input # Plots per IBlock box, 7. Enter number locations Input # Locations. run experiment single location, set 1. Select serpentine cartesian Plot Order Layout. example use default cartesian layout. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. Set 101. Enter name location experiment Input Location box. multiple locations, name must comma separated list. Set \"FARGO\". ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1235. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rectangular_lattice.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Rectangular Lattice Design","text":"run rectangular lattice design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rectangular_lattice.html","id":"field-layout","dir":"Articles","previous_headings":"Outputs","what":"Field Layout","title":"Rectangular Lattice Design","text":"first click run button rectangular lattice design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field change location displayed. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rectangular_lattice.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Rectangular Lattice Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rectangular_lattice.html","id":"using-the-fieldhub-function-rectangular_lattice","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: rectangular_lattice()","title":"Rectangular Lattice Design","text":"can run design function FielDHub package, rectangular_lattice(). First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) rect <- rectangular_lattice(   t = 56,   r = 3,    k = 7,    l = 1,    plotNumber = 101,   locationNames = \"FARGO\",    seed = 1235 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/rectangular_lattice.html","id":"details-on-the-inputs-entered-in-rectangular_lattice-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: rectangular_lattice()","what":"Details on the inputs entered in rectangular_lattice() above","title":"Rectangular Lattice Design","text":"t = 56 number treatments. r=3 number replicates. k = 7 number plots per incomplete block. l = 1 number locations. plotNumber = 101 starting plot number. locationNames = \"FARGO\" optional name location seed = 1235 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/rectangular_lattice.html","id":"print-rect-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: rectangular_lattice()","what":"Print rect object","title":"Rectangular Lattice Design","text":"","code":"print(rect) Rectangular Lattice Design   Information on the design parameters:  List of 7  $ Reps            : num 3  $ iBlocks         : num 8  $ NumberTreatments: num 56  $ NumberLocations : num 1  $ Locations       : chr \"FARGO\"  $ seed            : num 1235  $ lambda          : num 0.327   10 First observations of the data frame with the rectangular_lattice field book:     ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT 1   1    FARGO  101   1      1    1    54      G-54 2   2    FARGO  102   1      1    2     9       G-9 3   3    FARGO  103   1      1    3    32      G-32 4   4    FARGO  104   1      1    4    21      G-21 5   5    FARGO  105   1      1    5     2       G-2 6   6    FARGO  106   1      1    6    47      G-47 7   7    FARGO  107   1      1    7    35      G-35 8   8    FARGO  108   1      2    1     3       G-3 9   9    FARGO  109   1      2    2    44      G-44 10 10    FARGO  110   1      2    3    13      G-13"},{"path":"https://didiermurillof.github.io/FielDHub/articles/rectangular_lattice.html","id":"access-to-rect-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: rectangular_lattice()","what":"Access to rect object","title":"Rectangular Lattice Design","text":"function rectangular_lattice() returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. rect$layoutRandom rect$fieldBook. rect$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, IBLOCK, UNIT, ENTRY, TREATMENT.","code":"field_book <- rect$fieldBook head(rect$fieldBook, 10) ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT 1   1    FARGO  101   1      1    1    54      G-54 2   2    FARGO  102   1      1    2     9       G-9 3   3    FARGO  103   1      1    3    32      G-32 4   4    FARGO  104   1      1    4    21      G-21 5   5    FARGO  105   1      1    5     2       G-2 6   6    FARGO  106   1      1    6    47      G-47 7   7    FARGO  107   1      1    7    35      G-35 8   8    FARGO  108   1      2    1     3       G-3 9   9    FARGO  109   1      2    2    44      G-44 10 10    FARGO  110   1      2    3    13      G-13"},{"path":"https://didiermurillof.github.io/FielDHub/articles/rectangular_lattice.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: rectangular_lattice()","what":"Plot the field layout","title":"Rectangular Lattice Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follows,","code":"plot(rect)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/row_column.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Row-Column Design","text":"generate Row-Column Design using FielDHub app: First, go Lattice Designs > Resolvable Row-Column Design (RCD) , follow following steps show generate Row-Column Design 45 treatments, 5 rows 3 reps.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/row_column.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Row-Column Design","text":"selection , means app going generate synthetic data entries names treatment based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must columns ENTRY NAME. ENTRY column must unique entry integer number treatment. column NAME must unique name identifies treatment. ENTRY NAME must unique, duplicates allowed. following table, show example entries list format. example entry list 12 treatments. Input number treatments Input # Treatments box. enter 45 sample experiment. Set number plots incomplete block Input # Plots per IBlock box. examples, set 5. Select number replications treatments Input # Full Reps box. examples, set 3. Enter number locations Input # Locations. run experiment single location, set 1. Select serpentine cartesian Plot Order Layout. example use default serpentine layout. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. Set 101. Enter name location experiment Input Location box. multiple locations, name must comma separated list. example, set \"FARGO\". ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1244. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/row_column.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Row-Column Design","text":"run row-column design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/row_column.html","id":"field-layout","dir":"Articles","previous_headings":"Outputs","what":"Field Layout","title":"Row-Column Design","text":"first click run button row-column design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/row_column.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Row-Column Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/row_column.html","id":"using-the-fieldhub-function-row_column","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: row_column()","title":"Row-Column Design","text":"can run design function FielDHub package, row_column(). First, need load FielDHub package typing , can enter information describing design like :","code":"library(FielDHub) rcd <- row_column(   t = 45,   nrows = 5,   r = 3,   l = 1,    plotNumber = 101,    locationNames = \"FARGO\",   seed = 1244 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/row_column.html","id":"details-on-the-inputs-entered-in-row_column-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: row_column()","what":"Details on the inputs entered in row_column() above","title":"Row-Column Design","text":"description inputs used generate design, t = 45 number treatments. nrows = 5 number rows. r=3 number reps l = 1 number locations. plotNumber = 101 starting plot number. locationNames = \"FARGO\" optional name location. seed = 1244 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/row_column.html","id":"print-rcd-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: row_column()","what":"Print rcd object","title":"Row-Column Design","text":"print summary information object rcd, can use generic function print().","code":"print(rcd) Row Column Design   Information on the design parameters:  List of 7  $ rows          : num 5  $ columns       : num 9  $ reps          : num 3  $ treatments    : num 45  $ locations     : num 1  $ location_names: chr \"FARGO\"  $ seed          : num 1244   10 First observations of the data frame with the row_column field book:     ID LOCATION PLOT REP ROW COLUMN ENTRY TREATMENT 1   1    FARGO  101   1   1      1    39      G-39 2   2    FARGO  102   1   1      2     5       G-5 3   3    FARGO  103   1   1      3    19      G-19 4   4    FARGO  104   1   1      4    12      G-12 5   5    FARGO  105   1   1      5    33      G-33 6   6    FARGO  106   1   1      6    45      G-45 7   7    FARGO  107   1   1      7    41      G-41 8   8    FARGO  108   1   1      8    25      G-25 9   9    FARGO  109   1   1      9    23      G-23 10 10    FARGO  110   1   2      1    43      G-43"},{"path":"https://didiermurillof.github.io/FielDHub/articles/row_column.html","id":"access-to-rcd-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: row_column()","what":"Access to rcd object","title":"Row-Column Design","text":"row_column() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. rcd$layoutRandom rcd$fieldBook. rcd$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, ROW, COLUMN, ENTRY, TREATMENT.","code":"field_book <- rcd$fieldBook head(rcd$fieldBook, 10) ID LOCATION PLOT REP ROW COLUMN ENTRY TREATMENT 1   1    FARGO  101   1   1      1    39      G-39 2   2    FARGO  102   1   1      2     5       G-5 3   3    FARGO  103   1   1      3    19      G-19 4   4    FARGO  104   1   1      4    12      G-12 5   5    FARGO  105   1   1      5    33      G-33 6   6    FARGO  106   1   1      6    45      G-45 7   7    FARGO  107   1   1      7    41      G-41 8   8    FARGO  108   1   1      8    25      G-25 9   9    FARGO  109   1   1      9    23      G-23 10 10    FARGO  110   1   2      1    43      G-43"},{"path":"https://didiermurillof.github.io/FielDHub/articles/row_column.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: row_column()","what":"Plot the field layout","title":"Row-Column Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follows,","code":"plot(rcd)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_plot.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Split-Plot Design","text":"launch app need run either app running, go Designs > Split-Plot Design , follow following steps show generate kind design example 3 whole plots, 2 sub-plots 3 reps. run experiment just one location.","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_plot.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Split-Plot Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must single column TREATMENT, containing list unique names identify treatment/genotype. Duplicate values allowed, entries must unique. following, show example entries list format. example entry list 5 whole-plots 3 sub-plots. Choose whether use split-plot design RCBD CRD Select SPD Type box. Set number whole-plots design Whole-plots box. Set 5. Set number sub-plots contained Sub-plots Within Whole-plots box. Set 3. Select number replications treatments Input # Full Reps box. Set 4. Enter number locations Input # Locations. run experiment single location, set 1. Select serpentine cartesian Plot Order Layout. example use default serpentine layout. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. case, set 101. Enter name location experiment Input Location box. multiple locations, name must comma separated list. Set \"FARGO\". ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1237. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_plot.html","id":"outputs","dir":"Articles","previous_headings":"Inputs","what":"Outputs","title":"Split-Plot Design","text":"run split-plot design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_plot.html","id":"field-layout","dir":"Articles","previous_headings":"Inputs > Outputs","what":"Field Layout","title":"Split-Plot Design","text":"first click run button split-plot design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_plot.html","id":"field-book","dir":"Articles","previous_headings":"Inputs > Outputs","what":"Field Book","title":"Split-Plot Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_plot.html","id":"using-the-fieldhub-function-split_plot","dir":"Articles","previous_headings":"Inputs","what":"2. Using the FielDHub function: split_plot()","title":"Split-Plot Design","text":"can run design function FielDHub package, split_plot(). First, need load FielDHub package typing , can enter information describing design like :","code":"library(FielDHub) spd <- split_plot(   wp = 5,   sp = 3,   reps = 4,    type = 2,    plotNumber = 101,    locationNames = \"FARGO\",   l = 1,   seed = 1240 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_plot.html","id":"details-on-the-inputs-entered-in-split_plot-above","dir":"Articles","previous_headings":"Inputs > 2. Using the FielDHub function: split_plot()","what":"Details on the inputs entered in split_plot() above","title":"Split-Plot Design","text":"description inputs used generate design, wp = 5 number whole-plots. sp = 3 number sub-plots. reps = 4 number reps type = 2 CRD RCBD, 1 2 respectively l = 1 number locations. plotNumber = 101 starting plot number. locationNames = \"FARGO\" optional name location. seed = 1240 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_plot.html","id":"print-spd-object","dir":"Articles","previous_headings":"Inputs > 2. Using the FielDHub function: split_plot()","what":"Print spd object","title":"Split-Plot Design","text":"","code":"print(spd) Split Plot Design   Information on the design parameters:  List of 7  $ WholePlots    : int [1:5] 1 2 3 4 5  $ SubPlots      : int [1:3] 1 2 3  $ locationNumber: num 1  $ locationNames : chr \"FARGO\"  $ plotNumbers   : num 101  $ typeDesign    : chr \"RCBD\"  $ seed          : num 1240   10 First observations of the data frame with the split_plot field book:     ID LOCATION PLOT REP WHOLE_PLOT SUB_PLOT TRT_COMB 1   1    FARGO  101   1          2        2      2|2 2   2    FARGO  101   1          2        1      2|1 3   3    FARGO  101   1          2        3      2|3 4   4    FARGO  102   1          4        3      4|3 5   5    FARGO  102   1          4        2      4|2 6   6    FARGO  102   1          4        1      4|1 7   7    FARGO  103   1          1        1      1|1 8   8    FARGO  103   1          1        3      1|3 9   9    FARGO  103   1          1        2      1|2 10 10    FARGO  104   1          3        3      3|3"},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_plot.html","id":"access-to-spd-object","dir":"Articles","previous_headings":"Inputs > 2. Using the FielDHub function: split_plot()","what":"Access to spd object","title":"Split-Plot Design","text":"split_plot() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. spd$layoutRandom spd$fieldBook. spd$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, WHOLE_PLOT, SUB_PLOT, TRT_COMB.","code":"field_book <- spd$fieldBook head(spd$fieldBook, 10) ID LOCATION PLOT REP WHOLE_PLOT SUB_PLOT TRT_COMB 1   1    FARGO  101   1          2        2      2|2 2   2    FARGO  101   1          2        1      2|1 3   3    FARGO  101   1          2        3      2|3 4   4    FARGO  102   1          4        3      4|3 5   5    FARGO  102   1          4        2      4|2 6   6    FARGO  102   1          4        1      4|1 7   7    FARGO  103   1          1        1      1|1 8   8    FARGO  103   1          1        3      1|3 9   9    FARGO  103   1          1        2      1|2 10 10    FARGO  104   1          3        3      3|3"},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_plot.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"Inputs > 2. Using the FielDHub function: split_plot()","what":"Plot the field layout","title":"Split-Plot Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follows,","code":"plot(spd)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_split_plot.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Split-Split Plot Design","text":"launch app need run either app running, go Designs > Split-Split Plot Design , follow following steps show generate kind design example 3 whole plots, 2 sub-plots, 4 sub-sub plots 3 reps. run experiment just one location.","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_split_plot.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Split-Split Plot Design","text":"selection , means app going generate synthetic data entries names treatment based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must single column TREATMENT, containing list unique names identify treatment. Duplicate values allowed, entries must unique. following, show example entries list format. example entry list 10 treatments. Choose whether use split-plot design RCBD CRD Select SPD Type box. Set number whole-plots design Whole-plots box. Set 3. Set number sub-plots contained Sub-plots Within Whole-plots box. Set 2. Set number sub-sub plots contained Sub-Sub-plots within Sub-plots box. Set 4. Select number replications treatments Input # Full Reps box. Set 3. Enter number locations Input # Locations. run experiment single location, set 1. Select serpentine cartesian Plot Order Layout. example use default serpentine layout. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. case, set 101. Enter name location experiment Input Location box. multiple locations, name must comma separated list. Set \"FARGO\". ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1238. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_split_plot.html","id":"outputs","dir":"Articles","previous_headings":"Inputs","what":"Outputs","title":"Split-Split Plot Design","text":"run split-split-plot design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_split_plot.html","id":"field-layout","dir":"Articles","previous_headings":"Inputs > Outputs","what":"Field Layout","title":"Split-Split Plot Design","text":"first click run button split-split-plot design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_split_plot.html","id":"field-book","dir":"Articles","previous_headings":"Inputs > Outputs","what":"Field Book","title":"Split-Split Plot Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_split_plot.html","id":"using-the-fieldhub-function-split_split_plot","dir":"Articles","previous_headings":"Inputs","what":"2. Using the FielDHub function: split_split_plot()","title":"Split-Split Plot Design","text":"can run design function FielDHub package, split_split_plot(). First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) sspd <- split_split_plot(   wp = 3,    sp = 2,     ssp = 4,     reps = 3,     type = 2,      l = 1,    plotNumber = 101,   locationNames = \"FARGO\",   seed = 123 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_split_plot.html","id":"details-on-the-inputs-entered-in-split_split_plot-above","dir":"Articles","previous_headings":"Inputs > 2. Using the FielDHub function: split_split_plot()","what":"Details on the inputs entered in split_split_plot() above","title":"Split-Split Plot Design","text":"description inputs used generate design, wp = 3 number whole-plots. sp = 2 number sub-plots. ssp = 4 number sub-sub-plots. reps = 3 number reps type = 2 CRD RCBD, 1 2 respectively l = 1 number locations. plotNumber = 101 starting plot number. locationNames = \"FARGO\" optional name location. seed = 1240 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_split_plot.html","id":"print-sspd-object","dir":"Articles","previous_headings":"Inputs > 2. Using the FielDHub function: split_split_plot()","what":"Print sspd object","title":"Split-Split Plot Design","text":"","code":"print(sspd) Split-Split Plot Design   Information on the design parameters:  List of 6  $ Whole.Plots  : int [1:3] 1 2 3  $ Sub.Plots    : int [1:2] 1 2  $ Sub.Sub.Plots: int [1:4] 1 2 3 4  $ Locations    : num 1  $ typeDesign   : chr \"RCBD\"  $ seed         : num 123   10 First observations of the data frame with the split_split_plot field book:     ID LOCATION PLOT REP WHOLE_PLOT SUB_PLOT SUB_SUB_PLOT TRT_COMB 1   1    FARGO  101   1          3        1            2    3|1|2 2   2    FARGO  101   1          3        1            3    3|1|3 3   3    FARGO  101   1          3        1            4    3|1|4 4   4    FARGO  101   1          3        1            1    3|1|1 5   5    FARGO  101   1          3        2            2    3|2|2 6   6    FARGO  101   1          3        2            3    3|2|3 7   7    FARGO  101   1          3        2            4    3|2|4 8   8    FARGO  101   1          3        2            1    3|2|1 9   9    FARGO  102   1          1        2            1    1|2|1 10 10    FARGO  102   1          1        2            3    1|2|3"},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_split_plot.html","id":"access-to-sspd-object","dir":"Articles","previous_headings":"Inputs > 2. Using the FielDHub function: split_split_plot()","what":"Access to sspd object","title":"Split-Split Plot Design","text":"split_split_plot() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. sspd$layoutRandom sspd$fieldBook. sspd$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, WHOLE_PLOT, SUB_PLOT, SUB_SUB_PLOT, TRT_COMB.","code":"field_book <- sspd$fieldBook head(field_book,10) ID LOCATION PLOT REP WHOLE_PLOT SUB_PLOT SUB_SUB_PLOT TRT_COMB 1   1    FARGO  101   1          3        1            2    3|1|2 2   2    FARGO  101   1          3        1            3    3|1|3 3   3    FARGO  101   1          3        1            4    3|1|4 4   4    FARGO  101   1          3        1            1    3|1|1 5   5    FARGO  101   1          3        2            2    3|2|2 6   6    FARGO  101   1          3        2            3    3|2|3 7   7    FARGO  101   1          3        2            4    3|2|4 8   8    FARGO  101   1          3        2            1    3|2|1 9   9    FARGO  102   1          1        2            1    1|2|1 10 10    FARGO  102   1          1        2            3    1|2|3"},{"path":"https://didiermurillof.github.io/FielDHub/articles/split_split_plot.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"Inputs > 2. Using the FielDHub function: split_split_plot()","what":"Plot the field layout","title":"Split-Split Plot Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follows,","code":"plot(sspd)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/square_lattice.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Square Lattice Design","text":"generate square lattice design using FielDHub app: First, go Lattice Designs > Square Lattice , follow following steps show generate square lattice design 64 treatments 3 reps.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/square_lattice.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Square Lattice Design","text":"selection , means app going generate synthetic data entries names treatment/genotypes based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must columns ENTRY NAME. ENTRY column must unique entry integer number treatment. column NAME must unique name identifies treatment. ENTRY NAME must unique, duplicates allowed. following table, show example entries list format. example entry list 12 treatments. Input number treatments Input # Treatments box. number treatments must square number square lattice design. enter 64 sample experiment. Select number replications treatments Input # Full Reps box. examples, set 3. Set number plots incomplete block Input # Plots per IBlock box. examples, set 8. Enter number locations Input # Locations. run experiment single location, set 1. Select serpentine cartesian Plot Order Layout. example use default serpentine layout. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. Set 101. Enter name location experiment Input Location box. multiple locations, name must comma separated list. example, set \"FARGO\". ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1233. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/square_lattice.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Square Lattice Design","text":"run square lattice design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/square_lattice.html","id":"field-layout","dir":"Articles","previous_headings":"Outputs","what":"Field Layout","title":"Square Lattice Design","text":"first click run button square lattice design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field change location displayed. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/square_lattice.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Square Lattice Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/square_lattice.html","id":"using-the-fieldhub-function-square_lattice","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: square_lattice()","title":"Square Lattice Design","text":"can run design function FielDHub package, square_lattice(). First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) square <- square_lattice(   t = 64,   r = 3,    k = 8,         l = 1,        plotNumber = 101,    locationNames = \"FARGO\",    seed = 1233 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/square_lattice.html","id":"details-on-the-inputs-entered-in-square_lattice-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: square_lattice()","what":"Details on the inputs entered in square_lattice() above","title":"Square Lattice Design","text":"description inputs used generate design, t = 64 number treatments, must square number. r=3 number replicates. k = 8 number plots per incomplete block. l = 1 number locations. plotNumber = 101 starting plot number. locationNames = \"FARGO\" optional name location. seed = 1233 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/square_lattice.html","id":"print-square-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: square_lattice()","what":"Print square object","title":"Square Lattice Design","text":"print summary information object square, can use generic function print().","code":"print(square) Square Lattice Design   Information on the design parameters:  List of 7  $ Reps            : num 3  $ IBlocks         : num 8  $ NumberTreatments: num 64  $ NumberLocations : num 1  $ Locations       : chr \"FARGO\"  $ seed            : num 1233  $ lambda          : num 0.333   10 First observations of the data frame with the square_lattice field book:     ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT 1   1    FARGO  101   1      1    1    12      G-12 2   2    FARGO  102   1      1    2     4       G-4 3   3    FARGO  103   1      1    3    28      G-28 4   4    FARGO  104   1      1    4    52      G-52 5   5    FARGO  105   1      1    5    44      G-44 6   6    FARGO  106   1      1    6    36      G-36 7   7    FARGO  107   1      1    7    20      G-20 8   8    FARGO  108   1      1    8    60      G-60 9   9    FARGO  109   1      2    1    50      G-50 10 10    FARGO  110   1      2    2    26      G-26"},{"path":"https://didiermurillof.github.io/FielDHub/articles/square_lattice.html","id":"access-to-square-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: square_lattice()","what":"Access to square object","title":"Square Lattice Design","text":"square_lattice() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. square$layoutRandom square$fieldBook. square$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, IBLOCK, UNIT, ENTRY, TREATMENT.","code":"field_book <- square$fieldBook head(square$fieldBook, 10) ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT 1   1    FARGO  101   1      1    1    12      G-12 2   2    FARGO  102   1      1    2     4       G-4 3   3    FARGO  103   1      1    3    28      G-28 4   4    FARGO  104   1      1    4    52      G-52 5   5    FARGO  105   1      1    5    44      G-44 6   6    FARGO  106   1      1    6    36      G-36 7   7    FARGO  107   1      1    7    20      G-20 8   8    FARGO  108   1      1    8    60      G-60 9   9    FARGO  109   1      2    1    50      G-50 10 10    FARGO  110   1      2    2    26      G-26"},{"path":"https://didiermurillof.github.io/FielDHub/articles/square_lattice.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: square_lattice()","what":"Plot the field layout","title":"Square Lattice Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follows,","code":"plot(square)"},{"path":"https://didiermurillof.github.io/FielDHub/articles/strip_plot.html","id":"using-the-fieldhub-shiny-app","dir":"Articles","previous_headings":"","what":"1. Using the FielDHub Shiny App","title":"Strip-Plot Design","text":"launch app need run either app running, go Designs > Strip-Plot Design , follow following steps show generate kind design example 6 factors horizontal strips, 4 factors vertical strips 3 reps. run experiment just one location.","code":"FielDHub::run_app() library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/articles/strip_plot.html","id":"inputs","dir":"Articles","previous_headings":"","what":"Inputs","title":"Strip-Plot Design","text":"selection , means app going generate synthetic data entries names treatment based user inputs. selection Yes, entries list must fulfill specific format must .csv file. file must single column TREATMENT, containing list unique names identify treatment. Duplicate values allowed, entries must unique. following, show example entries list format. example entry list 10 treatments. Input number factors horizontal strips Input # Horizontal Strips box. Set 6. Input number factors vertical strips Input # Vertical Strips box. Set 4. Select number replications experiment Input # Full Reps box. Set 3. Enter number locations Input # Locations. run experiment single location, set 1. Select serpentine cartesian Plot Order Layout. example use default serpentine layout. Enter starting plot number Starting Plot Number box. experiment multiple locations, must enter comma separated list numbers length number locations input valid. case, set 101. Enter name location experiment Input Location box. multiple locations, name must comma separated list. Set \"FARGO\". ensure randomizations consistent across sessions, can set seed number box labeled Seed Number. example, set 1237. entered information experiment left side panel, click Run! button run design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/strip_plot.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Strip-Plot Design","text":"run strip-plot design FielDHub, several ways display information contained field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/strip_plot.html","id":"field-layout","dir":"Articles","previous_headings":"Outputs","what":"Field Layout","title":"Strip-Plot Design","text":"first click run button strip-plot design, FielDHub displays Field Layout tab, shows entries arrangement field. box display, can change layout field. can also display heatmap field changing Type Plot Heatmap. view heatmap, must first simulate experiment described field Simulate! button. pop-window appear can enter variable want simulate along minimum maximum values.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/strip_plot.html","id":"field-book","dir":"Articles","previous_headings":"Outputs","what":"Field Book","title":"Strip-Plot Design","text":"Field Book displays information experimental design table format. contains specific plot number row column address entry, well corresponding treatment plot. table searchable, can filter data relevant columns. simulated data heatmap, additional column variable appears Field Book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/strip_plot.html","id":"using-the-fieldhub-function-strip_plot","dir":"Articles","previous_headings":"","what":"2. Using the FielDHub function: strip_plot()","title":"Strip-Plot Design","text":"can run design function FielDHub package, strip_plot(). can enter information describing design like : can run design function FielDHub package, strip_plot(). First, need load FielDHub package typing, , can enter information describing design like :","code":"library(FielDHub) strip <- strip_plot(   Hplots = 6,   Vplots = 4,    b = 3,   l = 1,     plotNumber = 101,    planter = \"serpentine\",   locationNames = \"FARGO\",   seed = 1240 )"},{"path":"https://didiermurillof.github.io/FielDHub/articles/strip_plot.html","id":"details-on-the-inputs-entered-in-strip_plot-above","dir":"Articles","previous_headings":"2. Using the FielDHub function: strip_plot()","what":"Details on the inputs entered in strip_plot() above","title":"Strip-Plot Design","text":"description inputs used generate design, Hplots = 6 number horizontal strips Vplots = 4 number vertical strips b = 3 number reps l = 1 number locations. plotNumber = 101 starting plot number. planter = \"cartesian\" order layout. locationNames = \"FARGO\" optional name location. seed = 1240 seed number replicate identical randomizations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/articles/strip_plot.html","id":"print-strip-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: strip_plot()","what":"Print strip object","title":"Strip-Plot Design","text":"","code":"print(strip) Strip Plot Design   Information on the design parameters:  List of 6  $ Hplots         : int 6  $ Vplots         : int 4  $ blocks         : num 3  $ numberLocations: num 1  $ nameLocations  : chr \"FARGO\"  $ seed           : num 1240   10 First observations of the data frame with the strip_plot field book:     ID LOCATION PLOT REP HSTRIP VSTRIP TRT_COMB 1   1    FARGO  101   1     b1     a0    b1|a0 2   2    FARGO  102   1     b1     a1    b1|a1 3   3    FARGO  103   1     b1     a3    b1|a3 4   4    FARGO  104   1     b1     a2    b1|a2 5   5    FARGO  108   1     b3     a0    b3|a0 6   6    FARGO  107   1     b3     a1    b3|a1 7   7    FARGO  106   1     b3     a3    b3|a3 8   8    FARGO  105   1     b3     a2    b3|a2 9   9    FARGO  109   1     b4     a0    b4|a0 10 10    FARGO  110   1     b4     a1    b4|a1"},{"path":"https://didiermurillof.github.io/FielDHub/articles/strip_plot.html","id":"access-to-strip-object","dir":"Articles","previous_headings":"2. Using the FielDHub function: strip_plot()","what":"Access to strip object","title":"Strip-Plot Design","text":"strip_plot() function returns list consisting information displayed output tabs FielDHub app: design information, plot layout, plot numbering, entries list, field book. accessible $ operator, .e. strip$layoutRandom strip$fieldBook. strip$fieldBook list containing information every plot field, information location plot treatment plot. seen output , field book columns ID, LOCATION, PLOT, REP, HSTRIP, VSTRIP, TRT_COMB.","code":"field_book <- strip$fieldBook head(strip$fieldBook, 10) ID LOCATION PLOT REP HSTRIP VSTRIP TRT_COMB 1   1    FARGO  101   1     b1     a0    b1|a0 2   2    FARGO  102   1     b1     a1    b1|a1 3   3    FARGO  103   1     b1     a3    b1|a3 4   4    FARGO  104   1     b1     a2    b1|a2 5   5    FARGO  108   1     b3     a0    b3|a0 6   6    FARGO  107   1     b3     a1    b3|a1 7   7    FARGO  106   1     b3     a3    b3|a3 8   8    FARGO  105   1     b3     a2    b3|a2 9   9    FARGO  109   1     b4     a0    b4|a0 10 10    FARGO  110   1     b4     a1    b4|a1"},{"path":"https://didiermurillof.github.io/FielDHub/articles/strip_plot.html","id":"plot-the-field-layout","dir":"Articles","previous_headings":"2. Using the FielDHub function: strip_plot()","what":"Plot the field layout","title":"Strip-Plot Design","text":"plotting layout function coordinates ROW COLUMN, can use generic function plot() follow,","code":"plot(strip)"},{"path":"https://didiermurillof.github.io/FielDHub/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Didier Murillo. Maintainer, author. Salvador Gezan. Author. Ana Heilman. Contributor. Thomas Walk. Contributor. Johan Aparicio. Contributor. Matthew Seefeldt. Contributor. Richard Horsley. Contributor. North Dakota State University. Copyright holder.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Murillo D, Gezan S (2022). FielDHub: Shiny App Design Experiments Life Sciences. https://github.com/DidierMurilloF/FielDHub, https://didiermurillof.github.io/FielDHub/.","code":"@Manual{,   title = {FielDHub: A Shiny App for Design of Experiments in Life Sciences},   author = {Didier Murillo and Salvador Gezan},   year = {2022},   note = {https://github.com/DidierMurilloF/FielDHub, https://didiermurillof.github.io/FielDHub/}, }"},{"path":[]},{"path":"https://didiermurillof.github.io/FielDHub/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A Shiny App for Design of Experiments in Life Sciences","text":"FielDHub R package/shiny design experiments (DOE) app aids creation traditional, un-replicated, augmented partially-replicated designs applied agriculture, plant breeding, forestry, animal biological sciences. details examples functions present FielDHub package. Please, go https://didiermurillof.github.io/FielDHub/reference/index.html.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Shiny App for Design of Experiments in Life Sciences","text":"basic example shows launch app:","code":"library(FielDHub) run_app()"},{"path":"https://didiermurillof.github.io/FielDHub/index.html","id":"diagonal-arrangement-example","dir":"","previous_headings":"Usage","what":"Diagonal Arrangement Example","title":"A Shiny App for Design of Experiments in Life Sciences","text":"project needs test 280 genotypes field containing 16 rows 20 columns plots. example, 280 genotypes divided among three different experiments. addition, four checks included systematic diagonal arrangement across experiments fill 40 plots representing 12.5% total number experimental plots. option include filler plots also available fields number experimental plots equal number available field plots.  figure shows map experiment randomized along multiple experiments (three) checks diagonals. Distinctively colored check plots replicated throughout field systematic diagonal arrangement.  figure shows layout three experiments field.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/index.html","id":"using-the-fieldhub-function-diagonal_arrangement","dir":"","previous_headings":"Usage","what":"Using the FielDHub function diagonal_arrangement()","title":"A Shiny App for Design of Experiments in Life Sciences","text":"illustrate using FielDHub build experimental designs R code, design produced R Shiny interface described can also created using function diagonal_arrangement() R script . Note, obtain identical results, users must include seed number script used Shiny app. case, seed number 1249. Users can print returned values diagonal_arrangement() follow, First 12 rows fieldbook, Users can plot layout design diagonal_arrangement() using function plot() follows,  figure, gray, pink, salmon shade blocks unreplicated experiments, distinctively colored check plots replicated throughout field systematic diagonal arrangement. main difference using FielDHub Shiny app using standalone function diagonal_arrangement() standalone function allocate filler necessary, Shiny App, users can customize number fillers needed. cases users include fillers, either experiments, Shiny app preferable filling visualizing field plots. see examples, go https://didiermurillof.github.io/FielDHub/articles/diagonal_arrangement.html","code":"diagonal <- diagonal_arrangement(   nrows = 16,    ncols = 20,    lines = 280,    checks = 4,    plotNumber = 101,    splitBy = \"row\",    seed = 1249,    kindExpt = \"DBUDC\",    blocks = c(100, 100, 80),    exptName = c(\"Expt1\", \"Expt2\", \"Expt3\") ) print(diagonal) Un-replicated Diagonal Arrangement Design   Information on the design parameters:  List of 11  $ rows          : num 16  $ columns       : num 20  $ treatments    : num [1:3] 100 100 80  $ checks        : int 4  $ entry_checks  : int [1:4] 1 2 3 4  $ rep_checks    : num [1:4] 11 9 9 11  $ locations     : num 1  $ planter       : chr \"serpentine\"  $ percent_checks: chr \"12.5%\"  $ fillers       : num 0  $ seed          : num 1249   10 First observations of the data frame with the diagonal_arrangement field book:     ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 Expt1        1 2022  101   1      1      0    51    Gen-51 2   2 Expt1        1 2022  102   1      2      0    67    Gen-67 3   3 Expt1        1 2022  103   1      3      0    50    Gen-50 4   4 Expt1        1 2022  104   1      4      0    29    Gen-29 5   5 Expt1        1 2022  105   1      5      0    39    Gen-39 6   6 Expt1        1 2022  106   1      6      0    92    Gen-92 7   7 Expt1        1 2022  107   1      7      1     1   Check-1 8   8 Expt1        1 2022  108   1      8      0    58    Gen-58 9   9 Expt1        1 2022  109   1      9      0    23    Gen-23 10 10 Expt1        1 2022  110   1     10      0    54    Gen-54 head(diagonal$fieldBook, 12)    ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 Expt1        1 2022  101   1      1      0    51    Gen-51 2   2 Expt1        1 2022  102   1      2      0    67    Gen-67 3   3 Expt1        1 2022  103   1      3      0    50    Gen-50 4   4 Expt1        1 2022  104   1      4      0    29    Gen-29 5   5 Expt1        1 2022  105   1      5      0    39    Gen-39 6   6 Expt1        1 2022  106   1      6      0    92    Gen-92 7   7 Expt1        1 2022  107   1      7      1     1   Check-1 8   8 Expt1        1 2022  108   1      8      0    58    Gen-58 9   9 Expt1        1 2022  109   1      9      0    23    Gen-23 10 10 Expt1        1 2022  110   1     10      0    54    Gen-54 11 11 Expt1        1 2022  111   1     11      0    55    Gen-55 12 12 Expt1        1 2022  112   1     12      0     9     Gen-9 plot(diagonal)"},{"path":"https://didiermurillof.github.io/FielDHub/index.html","id":"partially-replicated-design-example","dir":"","previous_headings":"Usage","what":"Partially Replicated Design Example","title":"A Shiny App for Design of Experiments in Life Sciences","text":"Partially replicated designs commonly employed early generation field trials. type design characterized replication portion entries, remaining entries appearing experiment. example, considered field trial 288 plots containing 75 entries appearing two times , 138 entries appearing . field trials arranged field 16 rows 18 columns.  figure , green plots contain replicated entries, plots contain entries appear .","code":""},{"path":"https://didiermurillof.github.io/FielDHub/index.html","id":"using-the-fieldhub-function-partially_replicated","dir":"","previous_headings":"Usage","what":"Using the FielDHub function partially_replicated()","title":"A Shiny App for Design of Experiments in Life Sciences","text":"Instead using Shiny FielDHub app, users can use standalone FielDHub function partially_replicated(). partially replicated layout described can produced scripting follows. noted previous example, obtain identical results script Shiny app, users need use seed number, , case, 77. Users can print returned values partially_replicated() follows, First 12 rows fieldbook, Users can plot layout design partially_replicated() using function plot() follows,  see examples, please go https://didiermurillof.github.io/FielDHub/articles/partially_replicated.html","code":"pREP <- partially_replicated(   nrows = 16,    ncols = 18,     repGens = c(138,75),   repUnits = c(1,2),   planter = \"serpentine\",    plotNumber = 1,   exptName = \"ExptA\",   locationNames = \"FARGO\",   seed = 77 ) print(pREP) Partially Replicated Design   Information on the design parameters:  List of 7  $ rows                   : num 16  $ columns                : num 18  $ treatments_with_reps   : int 75  $ treatments_with_no_reps: int 138  $ locations              : num 1  $ planter                : chr \"serpentine\"  $ seed                   : num 77   10 First observations of the data frame with the partially_replicated field book:     ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 ExptA    FARGO 2022    1   1      1      0    80       G80 2   2 ExptA    FARGO 2022    2   1      2     49    49       G49 3   3 ExptA    FARGO 2022    3   1      3     15    15       G15 4   4 ExptA    FARGO 2022    4   1      4     44    44       G44 5   5 ExptA    FARGO 2022    5   1      5      0   185      G185 6   6 ExptA    FARGO 2022    6   1      6      9     9        G9 7   7 ExptA    FARGO 2022    7   1      7      0   133      G133 8   8 ExptA    FARGO 2022    8   1      8     58    58       G58 9   9 ExptA    FARGO 2022    9   1      9      4     4        G4 10 10 ExptA    FARGO 2022   10   1     10      0   113      G113 head(pREP$fieldBook, 12)    ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT 1   1 ExptA    FARGO 2022    1   1      1      0    80       G80 2   2 ExptA    FARGO 2022    2   1      2     49    49       G49 3   3 ExptA    FARGO 2022    3   1      3     15    15       G15 4   4 ExptA    FARGO 2022    4   1      4     44    44       G44 5   5 ExptA    FARGO 2022    5   1      5      0   185      G185 6   6 ExptA    FARGO 2022    6   1      6      9     9        G9 7   7 ExptA    FARGO 2022    7   1      7      0   133      G133 8   8 ExptA    FARGO 2022    8   1      8     58    58       G58 9   9 ExptA    FARGO 2022    9   1      9      4     4        G4 10 10 ExptA    FARGO 2022   10   1     10      0   113      G113 11 11 ExptA    FARGO 2022   11   1     11      0   190      G190 12 12 ExptA    FARGO 2022   12   1     12      0   148      G148 plot(pREP)"},{"path":"https://didiermurillof.github.io/FielDHub/reference/CRD.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Completely Randomized Design (CRD) — CRD","title":"Generates a Completely Randomized Design (CRD) — CRD","text":"randomly generates completely randomized design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/CRD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Completely Randomized Design (CRD) — CRD","text":"","code":"CRD(   t = NULL,   reps = NULL,   plotNumber = 101,   locationName = NULL,   seed = NULL,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/CRD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Completely Randomized Design (CRD) — CRD","text":"t integer number total number treatments vector dimension t labels. reps Number replicates treatment. plotNumber Starting plot number. default plotNumber = 101. locationName (optional) Name location. seed (optional) Real number specifies starting seed obtain reproducible designs. data (optional) Data frame 2 columns labels treatments number replicates.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/CRD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Completely Randomized Design (CRD) — CRD","text":"list two elements. infoDesign list information design parameters. fieldBook data frame CRD field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/CRD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Completely Randomized Design (CRD) — CRD","text":"Federer, W. T. (1955). Experimental Design. Theory Application. New York, USA. Macmillan Company.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/CRD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Completely Randomized Design (CRD) — CRD","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/CRD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Completely Randomized Design (CRD) — CRD","text":"","code":"# Example 1: Generates a CRD design with 10 treatments and 5 reps each. crd1 <- CRD(t = 10,             reps = 5,             plotNumber = 101,             seed = 1987,             locationName = \"Fargo\") crd1$infoDesign #> $numberofTreatments #> [1] 10 #>  #> $treatments #>  [1] \"T1\"  \"T2\"  \"T3\"  \"T4\"  \"T5\"  \"T6\"  \"T7\"  \"T8\"  \"T9\"  \"T10\" #>  #> $Reps #> [1] 5 #>  #> $locationName #> [1] \"Fargo\" #>  #> $seed #> [1] 1987 #>  #> $id_design #> [1] 1 #>  head(crd1$fieldBook,10) #>    ID LOCATION PLOT REP TREATMENT #> 1   1    Fargo  101   1       T10 #> 2   2    Fargo  102   4        T1 #> 3   3    Fargo  103   3        T3 #> 4   4    Fargo  104   3        T9 #> 5   5    Fargo  105   4        T3 #> 6   6    Fargo  106   5        T3 #> 7   7    Fargo  107   1        T2 #> 8   8    Fargo  108   3        T4 #> 9   9    Fargo  109   1        T1 #> 10 10    Fargo  110   3        T1  # Example 2: Generates a CRD design with 15 treatments and 6 reps each. Gens <- paste(\"Wheat\", 1:15, sep = \"\") crd2 <- CRD(t = Gens,             reps = 6,             plotNumber = 1001,             seed = 1654,             locationName = \"Fargo\") crd2$infoDesign #> $numberofTreatments #> [1] 15 #>  #> $treatments #>  [1] \"Wheat1\"  \"Wheat2\"  \"Wheat3\"  \"Wheat4\"  \"Wheat5\"  \"Wheat6\"  \"Wheat7\"  #>  [8] \"Wheat8\"  \"Wheat9\"  \"Wheat10\" \"Wheat11\" \"Wheat12\" \"Wheat13\" \"Wheat14\" #> [15] \"Wheat15\" #>  #> $Reps #> [1] 6 #>  #> $locationName #> [1] \"Fargo\" #>  #> $seed #> [1] 1654 #>  #> $id_design #> [1] 1 #>  head(crd2$fieldBook,10) #>    ID LOCATION PLOT REP TREATMENT #> 1   1    Fargo 1001   6    Wheat3 #> 2   2    Fargo 1002   2    Wheat8 #> 3   3    Fargo 1003   2    Wheat2 #> 4   4    Fargo 1004   4    Wheat4 #> 5   5    Fargo 1005   1    Wheat1 #> 6   6    Fargo 1006   1    Wheat4 #> 7   7    Fargo 1007   1   Wheat13 #> 8   8    Fargo 1008   1    Wheat1 #> 9   9    Fargo 1009   6   Wheat15 #> 10 10    Fargo 1010   4    Wheat7  # Example 3: Generates a CRD design with 12 treatments and 4 reps each. # In this case, we show how to use the option data. treatments <- paste(\"ND-\", 1:12, sep = \"\") treatment_list <- data.frame(list(TREATMENT = treatments, REP = 4)) head(treatment_list) #>   TREATMENT REP #> 1      ND-1   4 #> 2      ND-2   4 #> 3      ND-3   4 #> 4      ND-4   4 #> 5      ND-5   4 #> 6      ND-6   4 crd3 <- CRD(t = NULL,             reps = NULL,             plotNumber = 2001,             seed = 1655,             locationName = \"Cali\",             data = treatment_list) crd3$infoDesign #> $numberofTreatments #> [1] 12 #>  #> $treatments #>  [1] \"ND-1\"  \"ND-2\"  \"ND-3\"  \"ND-4\"  \"ND-5\"  \"ND-6\"  \"ND-7\"  \"ND-8\"  \"ND-9\"  #> [10] \"ND-10\" \"ND-11\" \"ND-12\" #>  #> $Reps #>  [1] 4 4 4 4 4 4 4 4 4 4 4 4 #>  #> $locationName #> [1] \"Cali\" #>  #> $seed #> [1] 1655 #>  #> $id_design #> [1] 1 #>  head(crd3$fieldBook,10) #>    ID LOCATION PLOT REP TREATMENT #> 1   1     Cali 2001   4      ND-3 #> 2   2     Cali 2002   1      ND-7 #> 3   3     Cali 2003   2      ND-2 #> 4   4     Cali 2004   3      ND-8 #> 5   5     Cali 2005   3      ND-2 #> 6   6     Cali 2006   1     ND-10 #> 7   7     Cali 2007   3      ND-7 #> 8   8     Cali 2008   4      ND-9 #> 9   9     Cali 2009   3      ND-4 #> 10 10     Cali 2010   1      ND-3"},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Randomized Complete Block Design (RCBD) — RCBD","title":"Generates a Randomized Complete Block Design (RCBD) — RCBD","text":"randomly generates randomized complete block design (RCBD) across locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Randomized Complete Block Design (RCBD) — RCBD","text":"","code":"RCBD(   t = NULL,   reps = NULL,   l = 1,   plotNumber = 101,   continuous = FALSE,   planter = \"serpentine\",   seed = NULL,   locationNames = NULL,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Randomized Complete Block Design (RCBD) — RCBD","text":"t integer number total number treatments vector dimension t labels. reps Number replicates (full blocks) treatment. l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. continuous Logical value plot number continuous . default continuous = FALSE. planter Option serpentine cartesian arrangement. default planter = 'serpentine'. seed (optional) Real number specifies starting seed obtain reproducible designs. locationNames (optional) Names location. data (optional) Data frame labels treatments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Randomized Complete Block Design (RCBD) — RCBD","text":"list five elements. infoDesign list information design parameters. layoutRandom RCBD layout randomization location. plotNumber plot number layout location. fieldBook data frame RCBD field book design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Randomized Complete Block Design (RCBD) — RCBD","text":"Federer, W. T. (1955). Experimental Design. Theory Application. New York, USA. Macmillan Company.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Randomized Complete Block Design (RCBD) — RCBD","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Randomized Complete Block Design (RCBD) — RCBD","text":"","code":"# Example 1: Generates a RCBD design with 3 blocks and 20 treatments across 3 locations. rcbd1 <- RCBD(t = LETTERS[1:20], reps = 5, l = 3,                plotNumber = c(101,1001, 2001),                continuous = TRUE,               planter = \"serpentine\",                seed = 1020,                locationNames = c(\"FARGO\", \"MINOT\", \"CASSELTON\")) rcbd1$infoDesign                   #> $blocks #> [1] 5 #>  #> $number.of.treatments #> [1] 20 #>  #> $treatments #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" #> [20] \"T\" #>  #> $locations #> [1] 3 #>  #> $plotNumber #>  [1]  101  201  301  401  501 1001 1101 1201 1301 1401 2001 2101 2201 2301 2401 #>  #> $locationNames #> [1] \"FARGO\"     \"MINOT\"     \"CASSELTON\" #>  #> $seed #> [1] 1020 #>  #> $id_design #> [1] 2 #>  rcbd1$layoutRandom #> $Loc_FARGO #>      Block --Treatments--                            #> [1,] \"1\"   \"P R L T E A J O M C K F I Q G D S H N B\" #> [2,] \"2\"   \"Q H G M F D L P E B J N A I K C T R O S\" #> [3,] \"3\"   \"R B G K H E S C F D I T P N Q M A O J L\" #> [4,] \"4\"   \"M I T B N G O J Q C A L P E S R D K H F\" #> [5,] \"5\"   \"M C Q O E H I A P S R L J G F B T D K N\" #>  #> $Loc_MINOT #>      Block --Treatments--                            #> [1,] \"1\"   \"F O C A G D L B I S P T H K M E N R Q J\" #> [2,] \"2\"   \"Q H K A G D E M N O C S J I T L P F B R\" #> [3,] \"3\"   \"B K D L O E A R F S I P G T C Q J N M H\" #> [4,] \"4\"   \"C P L O B K E H Q G N A T R J F S M D I\" #> [5,] \"5\"   \"G S D B H L Q K A P E J T R I C O F M N\" #>  #> $Loc_CASSELTON #>      Block --Treatments--                            #> [1,] \"1\"   \"P G T E L O K H D N S C M I A J Q R B F\" #> [2,] \"2\"   \"C D L F A T I G S O B J M E R P H N Q K\" #> [3,] \"3\"   \"C G K N B A L Q I F D H J M O P S T E R\" #> [4,] \"4\"   \"E L H D F J A T S N B G Q M I O P C K R\" #> [5,] \"5\"   \"T I M A H K E C Q L D J R B G S N O F P\" #>  rcbd1$plotNumber #> $Loc_FARGO #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]  101  102  103  104  105  106  107  108  109   110   111   112   113   114 #> [2,]  140  139  138  137  136  135  134  133  132   131   130   129   128   127 #> [3,]  141  142  143  144  145  146  147  148  149   150   151   152   153   154 #> [4,]  180  179  178  177  176  175  174  173  172   171   170   169   168   167 #> [5,]  181  182  183  184  185  186  187  188  189   190   191   192   193   194 #>      [,15] [,16] [,17] [,18] [,19] [,20] #> [1,]   115   116   117   118   119   120 #> [2,]   126   125   124   123   122   121 #> [3,]   155   156   157   158   159   160 #> [4,]   166   165   164   163   162   161 #> [5,]   195   196   197   198   199   200 #>  #> $Loc_MINOT #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,] 1001 1002 1003 1004 1005 1006 1007 1008 1009  1010  1011  1012  1013  1014 #> [2,] 1040 1039 1038 1037 1036 1035 1034 1033 1032  1031  1030  1029  1028  1027 #> [3,] 1041 1042 1043 1044 1045 1046 1047 1048 1049  1050  1051  1052  1053  1054 #> [4,] 1080 1079 1078 1077 1076 1075 1074 1073 1072  1071  1070  1069  1068  1067 #> [5,] 1081 1082 1083 1084 1085 1086 1087 1088 1089  1090  1091  1092  1093  1094 #>      [,15] [,16] [,17] [,18] [,19] [,20] #> [1,]  1015  1016  1017  1018  1019  1020 #> [2,]  1026  1025  1024  1023  1022  1021 #> [3,]  1055  1056  1057  1058  1059  1060 #> [4,]  1066  1065  1064  1063  1062  1061 #> [5,]  1095  1096  1097  1098  1099  1100 #>  #> $Loc_CASSELTON #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,] 2001 2002 2003 2004 2005 2006 2007 2008 2009  2010  2011  2012  2013  2014 #> [2,] 2040 2039 2038 2037 2036 2035 2034 2033 2032  2031  2030  2029  2028  2027 #> [3,] 2041 2042 2043 2044 2045 2046 2047 2048 2049  2050  2051  2052  2053  2054 #> [4,] 2080 2079 2078 2077 2076 2075 2074 2073 2072  2071  2070  2069  2068  2067 #> [5,] 2081 2082 2083 2084 2085 2086 2087 2088 2089  2090  2091  2092  2093  2094 #>      [,15] [,16] [,17] [,18] [,19] [,20] #> [1,]  2015  2016  2017  2018  2019  2020 #> [2,]  2026  2025  2024  2023  2022  2021 #> [3,]  2055  2056  2057  2058  2059  2060 #> [4,]  2066  2065  2064  2063  2062  2061 #> [5,]  2095  2096  2097  2098  2099  2100 #>  head(rcbd1$fieldBook) #>   ID LOCATION PLOT REP TREATMENT #> 1  1    FARGO  101   1         P #> 2  2    FARGO  102   1         R #> 3  3    FARGO  103   1         L #> 4  4    FARGO  104   1         T #> 5  5    FARGO  105   1         E #> 6  6    FARGO  106   1         A  # Example 2: Generates a RCBD design with 6 blocks and 18 treatments in one location. # In this case, we show how to use the option data. treatments <- paste(\"ND-\", 1:18, sep = \"\") treatment_list <- data.frame(list(TREATMENT = treatments)) head(treatment_list) #>   TREATMENT #> 1      ND-1 #> 2      ND-2 #> 3      ND-3 #> 4      ND-4 #> 5      ND-5 #> 6      ND-6 rcbd2 <- RCBD(reps = 6, l = 1,                plotNumber = 101,                continuous = FALSE,                planter = \"serpentine\",                seed = 13,                locationNames = \"IBAGUE\",               data = treatment_list) rcbd2$infoDesign                   #> $blocks #> [1] 6 #>  #> $number.of.treatments #> [1] 18 #>  #> $treatments #>  [1] \"ND-1\"  \"ND-2\"  \"ND-3\"  \"ND-4\"  \"ND-5\"  \"ND-6\"  \"ND-7\"  \"ND-8\"  \"ND-9\"  #> [10] \"ND-10\" \"ND-11\" \"ND-12\" \"ND-13\" \"ND-14\" \"ND-15\" \"ND-16\" \"ND-17\" \"ND-18\" #>  #> $locations #> [1] 1 #>  #> $plotNumber #> [1] 101 201 301 401 501 601 #>  #> $locationNames #> [1] \"IBAGUE\" #>  #> $seed #> [1] 13 #>  #> $id_design #> [1] 2 #>  rcbd2$layoutRandom #> $Loc_IBAGUE #>      Block #> [1,] \"1\"   #> [2,] \"2\"   #> [3,] \"3\"   #> [4,] \"4\"   #> [5,] \"5\"   #> [6,] \"6\"   #>      --Treatments--                                                                                       #> [1,] \"ND-3 ND-5 ND-10 ND-13 ND-6 ND-14 ND-4 ND-8 ND-18 ND-1 ND-11 ND-2 ND-17 ND-12 ND-9 ND-7 ND-16 ND-15\" #> [2,] \"ND-15 ND-17 ND-12 ND-1 ND-11 ND-4 ND-8 ND-7 ND-5 ND-3 ND-14 ND-9 ND-10 ND-13 ND-2 ND-6 ND-18 ND-16\" #> [3,] \"ND-17 ND-12 ND-8 ND-14 ND-10 ND-6 ND-7 ND-18 ND-2 ND-1 ND-13 ND-9 ND-11 ND-15 ND-16 ND-3 ND-4 ND-5\" #> [4,] \"ND-14 ND-13 ND-16 ND-1 ND-8 ND-9 ND-15 ND-6 ND-7 ND-12 ND-10 ND-18 ND-11 ND-4 ND-3 ND-5 ND-2 ND-17\" #> [5,] \"ND-14 ND-11 ND-9 ND-4 ND-1 ND-16 ND-3 ND-8 ND-5 ND-7 ND-10 ND-18 ND-12 ND-6 ND-2 ND-15 ND-13 ND-17\" #> [6,] \"ND-3 ND-5 ND-17 ND-9 ND-6 ND-18 ND-1 ND-14 ND-12 ND-8 ND-4 ND-11 ND-15 ND-2 ND-10 ND-16 ND-13 ND-7\" #>  rcbd2$plotNumber #> $Loc_IBAGUE #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]  101  102  103  104  105  106  107  108  109   110   111   112   113   114 #> [2,]  218  217  216  215  214  213  212  211  210   209   208   207   206   205 #> [3,]  301  302  303  304  305  306  307  308  309   310   311   312   313   314 #> [4,]  418  417  416  415  414  413  412  411  410   409   408   407   406   405 #> [5,]  501  502  503  504  505  506  507  508  509   510   511   512   513   514 #> [6,]  618  617  616  615  614  613  612  611  610   609   608   607   606   605 #>      [,15] [,16] [,17] [,18] #> [1,]   115   116   117   118 #> [2,]   204   203   202   201 #> [3,]   315   316   317   318 #> [4,]   404   403   402   401 #> [5,]   515   516   517   518 #> [6,]   604   603   602   601 #>  head(rcbd2$fieldBook) #>   ID LOCATION PLOT REP TREATMENT #> 1  1   IBAGUE  101   1      ND-3 #> 2  2   IBAGUE  102   1      ND-5 #> 3  3   IBAGUE  103   1     ND-10 #> 4  4   IBAGUE  104   1     ND-13 #> 5  5   IBAGUE  105   1      ND-6 #> 6  6   IBAGUE  106   1     ND-14"},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD_augmented.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates an Augmented Randomized Complete Block Design (ARCBD) — RCBD_augmented","title":"Generates an Augmented Randomized Complete Block Design (ARCBD) — RCBD_augmented","text":"randomly generates augmented randomized complete block design across locations (ARCBD).","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD_augmented.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates an Augmented Randomized Complete Block Design (ARCBD) — RCBD_augmented","text":"","code":"RCBD_augmented(   lines = NULL,   checks = NULL,   b = NULL,   l = 1,   planter = \"serpentine\",   plotNumber = 101,   exptName = NULL,   seed = NULL,   locationNames = NULL,   repsExpt = 1,   random = TRUE,   data = NULL,   nrows = NULL,   ncols = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD_augmented.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates an Augmented Randomized Complete Block Design (ARCBD) — RCBD_augmented","text":"lines Treatments, number lines test. checks Number checks per augmented block. b Number augmented blocks. l Number locations. default l = 1. planter Option serpentine cartesian arrangement. default planter = 'serpentine'. plotNumber Numeric vector starting plot number location. default plotNumber = 101. exptName (optional) Name experiment. seed (optional) Real number specifies starting seed obtain reproducible designs. locationNames (optional) Name location. repsExpt (optional) Number reps experiment. default repsExpt = 1. random Logical value randomize treatments . default random = TRUE. data (optional) Data frame labels treatments. nrows (optional) Number rows field. ncols (optional) Number columns field.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD_augmented.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates an Augmented Randomized Complete Block Design (ARCBD) — RCBD_augmented","text":"list five elements. infoDesign list information design parameters. layoutRandom ARCBD layout randomization first location. plotNumber plot number layout first location. exptNames experiment names layout. data_entry data frame data input. fieldBook data frame ARCBD field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD_augmented.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates an Augmented Randomized Complete Block Design (ARCBD) — RCBD_augmented","text":"Federer, W. T. (1955). Experimental Design. Theory Application. New York, USA. Macmillan Company.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD_augmented.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates an Augmented Randomized Complete Block Design (ARCBD) — RCBD_augmented","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/RCBD_augmented.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates an Augmented Randomized Complete Block Design (ARCBD) — RCBD_augmented","text":"","code":"# Example 1: Generates an ARCBD with 6 blocks, 3 checks for each, and 50 treatments  # in two locations. ARCBD1 <- RCBD_augmented(lines = 50, checks = 3, b = 6, l = 2,                           planter = \"cartesian\",                           plotNumber = c(1,1001),                          seed = 23,                           locationNames = c(\"FARGO\", \"MINOT\")) ARCBD1$infoDesign #> $rows #> [1] 6 #>  #> $columns #> [1] 12 #>  #> $rows_within_blocks #> [1] 1 #>  #> $columns_within_blocks #> [1] 12 #>  #> $treatments #> [1] 50 #>  #> $checks #> [1] 3 #>  #> $blocks #> [1] 6 #>  #> $plots_per_block #> [1] 12 12 12 12 12  8 #>  #> $locations #> [1] 2 #>  #> $fillers #> [1] 4 #>  #> $seed #> [1] 23 #>  #> $id_design #> [1] 14 #>  ARCBD1$layoutRandom #>      Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 #> Row6    2   15   38    3   21   36   26    1    0     0     0     0 #> Row5    3    1   24   46   11    2   48   37   32    31    20    42 #> Row4   34   25   16   41    9   50    2   43   39     1    13     3 #> Row3   18   28    5    2   40    8   30   17   53    10     3     1 #> Row2    7   29   12    2    3   33   22   23    4    47    19     1 #> Row1   49   14   27    3    2   45    6   35   52    44    51     1 ARCBD1$exptNames #>      V1    V2    V3    V4    V5    V6    V7    V8    V9   V10   V11   V12 #> 1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 2 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 3 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 4 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 5 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 6 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 ARCBD1$plotNumber #>      V1 V2 V3 V4 V5 V6 V7 V8 V9 V10 V11 V12 #> [1,] 61 62 63 64 65 66 67 68  0   0   0   0 #> [2,] 49 50 51 52 53 54 55 56 57  58  59  60 #> [3,] 37 38 39 40 41 42 43 44 45  46  47  48 #> [4,] 25 26 27 28 29 30 31 32 33  34  35  36 #> [5,] 13 14 15 16 17 18 19 20 21  22  23  24 #> [6,]  1  2  3  4  5  6  7  8  9  10  11  12 head(ARCBD1$fieldBook, 12) #>    ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS BLOCK ENTRY TREATMENT #> 1   1 Expt1    FARGO 2022    1   1      1      0     1    49       G49 #> 2   2 Expt1    FARGO 2022    2   1      2      0     1    14       G14 #> 3   3 Expt1    FARGO 2022    3   1      3      0     1    27       G27 #> 4   4 Expt1    FARGO 2022    4   1      4      1     1     3       CH3 #> 5   5 Expt1    FARGO 2022    5   1      5      1     1     2       CH2 #> 6   6 Expt1    FARGO 2022    6   1      6      0     1    45       G45 #> 7   7 Expt1    FARGO 2022    7   1      7      0     1     6        G6 #> 8   8 Expt1    FARGO 2022    8   1      8      0     1    35       G35 #> 9   9 Expt1    FARGO 2022    9   1      9      0     1    52       G52 #> 10 10 Expt1    FARGO 2022   10   1     10      0     1    44       G44 #> 11 11 Expt1    FARGO 2022   11   1     11      0     1    51       G51 #> 12 12 Expt1    FARGO 2022   12   1     12      1     1     1       CH1                     # Example 2: Generates an ARCBD with 17 blocks, 4 checks for each, and 350 treatments  # in 3 locations. # In this case, we show how to use the option data. checks <- 4; list_checks <- paste(\"CH\", 1:checks, sep = \"\") treatments <- paste(\"G\", 5:354, sep = \"\") treatment_list <- data.frame(list(ENTRY = 1:354, NAME = c(list_checks, treatments))) head(treatment_list, 12) #>    ENTRY NAME #> 1      1  CH1 #> 2      2  CH2 #> 3      3  CH3 #> 4      4  CH4 #> 5      5   G5 #> 6      6   G6 #> 7      7   G7 #> 8      8   G8 #> 9      9   G9 #> 10    10  G10 #> 11    11  G11 #> 12    12  G12 ARCBD2 <- RCBD_augmented(lines = 350, checks = 4, b = 17, l = 3,                           planter = \"serpentine\",                           plotNumber = c(101,1001,2001),                           seed = 24,                           locationNames = LETTERS[1:3],                          data = treatment_list) ARCBD2$infoDesign #> $rows #> [1] 17 #>  #> $columns #> [1] 25 #>  #> $rows_within_blocks #> [1] 1 #>  #> $columns_within_blocks #> [1] 25 #>  #> $treatments #> [1] 350 #>  #> $checks #> [1] 4 #>  #> $blocks #> [1] 17 #>  #> $plots_per_block #>  [1] 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 18 #>  #> $locations #> [1] 3 #>  #> $fillers #> [1] 7 #>  #> $seed #> [1] 24 #>  #> $id_design #> [1] 14 #>  ARCBD2$layoutRandom #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 Col13 #> Row17  257  259    1  198  331   66    3  238  170   176   126   207   225 #> Row16   17   12    1  314   22  235   77  340  188    76   101     2    16 #> Row15  229  231   54    3  305    4  128   50   30    55     1   337    24 #> Row14   63   45   62   40  140  322   82  228  283   142    53   211     7 #> Row13  253    2   68  113   13  279   47   57    4   132     3   167   159 #> Row12  282  205  192  324  315    2  247  124  179    58   105   273    31 #> Row11  110  125   85  332  250  248  265  255    2   251    52    42   236 #> Row10  173  154  338  327   78    3   96  177  193     4   244   191   348 #> Row9     4    2   25  103   36  155  260  246  189    49   197   284   242 #> Row8   107  321  186    4  163   33   71  109  100   174   309    18   135 #> Row7     2  239  252  213  261  150    3  266  277   307     4    95   311 #> Row6   133   75  153  102  274    2    4    1  270   285     3   240   276 #> Row5   234   56  349  288  202  300   79   87  157    64   168     1     4 #> Row4   160  195    2  289  161   83  143  271  141   144    94   320     3 #> Row3   268  209    4  185  308  115   81  342  249   258   120     1     2 #> Row2   172  347  346  215  298   86    1  116  328   224   139     3     4 #> Row1   345  130    4  162    1  123    2   39    9   302   210   352   138 #>       Col14 Col15 Col16 Col17 Col18 Col19 Col20 Col21 Col22 Col23 Col24 Col25 #> Row17   122     4   208   187     2     0     0     0     0     0     0     0 #> Row16     3   219   111   291   316     4   341   169   222   237    65   281 #> Row15   329   263     2    74   108   318   350   147   306   325    37    43 #> Row14   136   310     5     2   199     1     4   164    46     3   158   223 #> Row13    23     1   148   117   201    28    11   119   190    73    72    99 #> Row12    32     1    27   243   241    21     3   303     4   106   127   254 #> Row11    35     1   216    61     3     4   230    69   245   339    98    14 #> Row10     1   227   323     2   203   118   181    88   104    10   272   175 #> Row9    335   217   319   200     3   152    97   267    44   275    92     1 #> Row8    221   333   121     2     1     3   214   226   183    15   194   351 #> Row7    313    60   293    38    59    67   232   134     1   178    93   114 #> Row6    156    41   165   146    51   317   292   280   343   171   334    84 #> Row5    220    34   131   262     3   180   129   145     2   212    91   278 #> Row4     19   353   301     6     4   206   304     1   233   354   166    20 #> Row3    294    89   269    29    26   286   290   336    80     3   149   312 #> Row2     48   295   151   287     2   326    70   264   204   137   296     8 #> Row1    297   330     3   256    90   184   196   218   344   299   182   112 ARCBD2$exptNames #>       V1    V2    V3    V4    V5    V6    V7    V8    V9   V10   V11   V12 #> 1  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 2  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 3  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 4  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 5  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 6  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 7  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 8  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 9  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 10 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 11 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 12 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 13 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 14 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 15 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 16 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 17 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #>      V13   V14   V15   V16   V17   V18   V19   V20   V21   V22   V23   V24 #> 1  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 2  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 3  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 4  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 5  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 6  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 7  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 8  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 9  Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 10 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 11 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 12 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 13 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 14 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 15 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 16 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #> 17 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 Expt1 #>      V25 #> 1  Expt1 #> 2  Expt1 #> 3  Expt1 #> 4  Expt1 #> 5  Expt1 #> 6  Expt1 #> 7  Expt1 #> 8  Expt1 #> 9  Expt1 #> 10 Expt1 #> 11 Expt1 #> 12 Expt1 #> 13 Expt1 #> 14 Expt1 #> 15 Expt1 #> 16 Expt1 #> 17 Expt1 ARCBD2$plotNumber #>        V1  V2  V3  V4  V5  V6  V7  V8  V9 V10 V11 V12 V13 V14 V15 V16 V17 V18 #>  [1,] 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 #>  [2,] 500 499 498 497 496 495 494 493 492 491 490 489 488 487 486 485 484 483 #>  [3,] 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 #>  [4,] 450 449 448 447 446 445 444 443 442 441 440 439 438 437 436 435 434 433 #>  [5,] 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 #>  [6,] 400 399 398 397 396 395 394 393 392 391 390 389 388 387 386 385 384 383 #>  [7,] 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 #>  [8,] 350 349 348 347 346 345 344 343 342 341 340 339 338 337 336 335 334 333 #>  [9,] 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 #> [10,] 300 299 298 297 296 295 294 293 292 291 290 289 288 287 286 285 284 283 #> [11,] 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 #> [12,] 250 249 248 247 246 245 244 243 242 241 240 239 238 237 236 235 234 233 #> [13,] 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 #> [14,] 200 199 198 197 196 195 194 193 192 191 190 189 188 187 186 185 184 183 #> [15,] 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 #> [16,] 150 149 148 147 146 145 144 143 142 141 140 139 138 137 136 135 134 133 #> [17,] 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 #>       V19 V20 V21 V22 V23 V24 V25 #>  [1,]   0   0   0   0   0   0   0 #>  [2,] 482 481 480 479 478 477 476 #>  [3,] 469 470 471 472 473 474 475 #>  [4,] 432 431 430 429 428 427 426 #>  [5,] 419 420 421 422 423 424 425 #>  [6,] 382 381 380 379 378 377 376 #>  [7,] 369 370 371 372 373 374 375 #>  [8,] 332 331 330 329 328 327 326 #>  [9,] 319 320 321 322 323 324 325 #> [10,] 282 281 280 279 278 277 276 #> [11,] 269 270 271 272 273 274 275 #> [12,] 232 231 230 229 228 227 226 #> [13,] 219 220 221 222 223 224 225 #> [14,] 182 181 180 179 178 177 176 #> [15,] 169 170 171 172 173 174 175 #> [16,] 132 131 130 129 128 127 126 #> [17,] 119 120 121 122 123 124 125 head(ARCBD2$fieldBook, 12) #>    ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS BLOCK ENTRY TREATMENT #> 1   1 Expt1        A 2022  101   1      1      0     1   345      G345 #> 2   2 Expt1        A 2022  102   1      2      0     1   130      G130 #> 3   3 Expt1        A 2022  103   1      3      1     1     4       CH4 #> 4   4 Expt1        A 2022  104   1      4      0     1   162      G162 #> 5   5 Expt1        A 2022  105   1      5      1     1     1       CH1 #> 6   6 Expt1        A 2022  106   1      6      0     1   123      G123 #> 7   7 Expt1        A 2022  107   1      7      1     1     2       CH2 #> 8   8 Expt1        A 2022  108   1      8      0     1    39       G39 #> 9   9 Expt1        A 2022  109   1      9      0     1     9        G9 #> 10 10 Expt1        A 2022  110   1     10      0     1   302      G302 #> 11 11 Expt1        A 2022  111   1     11      0     1   210      G210 #> 12 12 Expt1        A 2022  112   1     12      0     1   352      G352"},{"path":"https://didiermurillof.github.io/FielDHub/reference/alpha_lattice.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates an Alpha Design — alpha_lattice","title":"Generates an Alpha Design — alpha_lattice","text":"Randomly generates alpha design like alpha(0,1) across multiple locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/alpha_lattice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates an Alpha Design — alpha_lattice","text":"","code":"alpha_lattice(   t = NULL,   k = NULL,   r = NULL,   l = 1,   plotNumber = 101,   locationNames = NULL,   seed = NULL,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/alpha_lattice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates an Alpha Design — alpha_lattice","text":"t Number  treatments. k Size incomplete blocks (number units per incomplete block). r Number full blocks (resolvable replicates) (also number replicates per treatment). l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. locationNames (optional) String names l locations. seed (optional) Real number specifies starting seed obtain reproducible designs. data (optional) Data frame label list treatments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/alpha_lattice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates an Alpha Design — alpha_lattice","text":"list two elements. infoDesign list information design parameters. fieldBook data frame alpha design field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/alpha_lattice.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates an Alpha Design — alpha_lattice","text":"Edmondson., R. N. (2021). blocksdesign: Nested crossed block designs factorial unstructured treatment sets. https://CRAN.R-project.org/package=blocksdesign","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/alpha_lattice.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates an Alpha Design — alpha_lattice","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/alpha_lattice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates an Alpha Design — alpha_lattice","text":"","code":"# Example 1: Generates an alpha design with 4 full blocks and 15 treatments. # Size of IBlocks k = 3. alphalattice1 <- alpha_lattice(t = 15,                                 k = 3,                                 r = 4,                                 l = 1,                                 plotNumber = 101,                                 locationNames = \"GreenHouse\",                                 seed = 1247) alphalattice1$infoDesign #> $Reps #> [1] 4 #>  #> $iBlocks #> [1] 5 #>  #> $NumberTreatments #> [1] 15 #>  #> $NumberLocations #> [1] 1 #>  #> $Locations #> [1] \"GREENHOUSE\" #>  #> $seed #> [1] 1247 #>  #> $lambda #> [1] 0.5714286 #>  #> $id_design #> [1] 12 #>  head(alphalattice1$fieldBook, 10) #>    ID   LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT #> 1   1 GREENHOUSE  101   1      1    1     1       G-1 #> 2   2 GREENHOUSE  102   1      1    2     8       G-8 #> 3   3 GREENHOUSE  103   1      1    3     2       G-2 #> 4   4 GREENHOUSE  104   1      2    1    10      G-10 #> 5   5 GREENHOUSE  105   1      2    2     4       G-4 #> 6   6 GREENHOUSE  106   1      2    3     9       G-9 #> 7   7 GREENHOUSE  107   1      3    1    11      G-11 #> 8   8 GREENHOUSE  108   1      3    2     6       G-6 #> 9   9 GREENHOUSE  109   1      3    3     7       G-7 #> 10 10 GREENHOUSE  110   1      4    1    13      G-13  # Example 2: Generates an alpha design with 3 full blocks and 25 treatment. # Size of IBlocks k = 5.  # In this case, we show how to use the option data. treatments <- paste(\"G-\", 1:25, sep = \"\") ENTRY <- 1:25 treatment_list <- data.frame(list(ENTRY = ENTRY, TREATMENT = treatments)) head(treatment_list)  #>   ENTRY TREATMENT #> 1     1       G-1 #> 2     2       G-2 #> 3     3       G-3 #> 4     4       G-4 #> 5     5       G-5 #> 6     6       G-6 alphalattice2 <- alpha_lattice(t = 25,                                k = 5,                                r = 3,                                 l = 1,                                 plotNumber = 1001,                                 locationNames = \"A\",                                 seed = 1945,                                data = treatment_list) alphalattice2$infoDesign #> $Reps #> [1] 3 #>  #> $iBlocks #> [1] 5 #>  #> $NumberTreatments #> [1] 25 #>  #> $NumberLocations #> [1] 1 #>  #> $Locations #> [1] \"A\" #>  #> $seed #> [1] 1945 #>  #> $lambda #> [1] 0.5 #>  #> $id_design #> [1] 12 #>  head(alphalattice2$fieldBook, 10) #>    ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT #> 1   1        A 1001   1      1    1    13      G-13 #> 2   2        A 1002   1      1    2    15      G-15 #> 3   3        A 1003   1      1    3    12      G-12 #> 4   4        A 1004   1      1    4    11      G-11 #> 5   5        A 1005   1      1    5    14      G-14 #> 6   6        A 1006   1      2    1    25      G-25 #> 7   7        A 1007   1      2    2    24      G-24 #> 8   8        A 1008   1      2    3    23      G-23 #> 9   9        A 1009   1      2    4    22      G-22 #> 10 10        A 1010   1      2    5    21      G-21"},{"path":"https://didiermurillof.github.io/FielDHub/reference/diagonal_arrangement.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Un-replicated Diagonal Arrangement Design — diagonal_arrangement","title":"Spatial Un-replicated Diagonal Arrangement Design — diagonal_arrangement","text":"Randomly generates spatial un-replicated diagonal arrangement design.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/diagonal_arrangement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial Un-replicated Diagonal Arrangement Design — diagonal_arrangement","text":"","code":"diagonal_arrangement(   nrows = NULL,   ncols = NULL,   lines = NULL,   checks = NULL,   planter = \"serpentine\",   l = 1,   plotNumber = 101,   kindExpt = \"SUDC\",   splitBy = \"row\",   seed = NULL,   blocks = NULL,   exptName = NULL,   locationNames = NULL,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/diagonal_arrangement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial Un-replicated Diagonal Arrangement Design — diagonal_arrangement","text":"nrows Number rows field. ncols Number columns field. lines Number genotypes, experimental lines treatments. checks Number genotypes checks. planter Option serpentine cartesian plot arrangement.  default  planter = 'serpentine'. l Number locations sites. default  l = 1. plotNumber Numeric vector starting plot number location.  default plotNumber = 101. kindExpt Type diagonal design, single options: Single Un-replicated Diagonal Checks 'SUDC' Decision Blocks Un-replicated Design Diagonal Checks 'DBUDC'  multiple experiments. default kindExpt = 'SUDC'. splitBy Option split field kindExpt = 'DBUDC' selected.  default splitBy = 'row'. seed (optional) Real number specifies starting seed obtain reproducible designs. blocks Number experiments blocks generate DBUDC design.  kindExpt = 'DBUDC' data null, blocks mandatory. exptName (optional) Name experiment. locationNames (optional) Names location. data (optional) Data frame 2 columns: ENTRY | NAME .","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/diagonal_arrangement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial Un-replicated Diagonal Arrangement Design — diagonal_arrangement","text":"list five elements. infoDesign list information design parameters. layoutRandom matrix randomization layout. plotsNumber matrix layout plot number. data_entry data frame data input. fieldBook data frame field book design. includes index (Row, Column).","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/diagonal_arrangement.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spatial Un-replicated Diagonal Arrangement Design — diagonal_arrangement","text":"Clarke, G. P. Y., & Stefanova, K. T. (2011). Optimal design early-generation plant breeding trials unreplicated partially replicated test lines. Australian & New Zealand Journal Statistics, 53(4), 461–480.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/diagonal_arrangement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spatial Un-replicated Diagonal Arrangement Design — diagonal_arrangement","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/diagonal_arrangement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial Un-replicated Diagonal Arrangement Design — diagonal_arrangement","text":"","code":"# Example 1: Generates a spatial single diagonal arrangement design in one location # with 270 treatments and 30 check plots for a field with dimensions 15 rows x 20 cols # in a serpentine arrangement. spatd <- diagonal_arrangement(   nrows = 15,    ncols = 20,    lines = 270,    checks = 4,    plotNumber = 101,    kindExpt = \"SUDC\",    planter = \"serpentine\",    seed = 1987,   exptName = \"20WRY1\",    locationNames = \"MINOT\" ) spatd$infoDesign #> $rows #> [1] 15 #>  #> $columns #> [1] 20 #>  #> $treatments #> [1] 270 #>  #> $checks #> [1] 4 #>  #> $entry_checks #> [1] 1 2 3 4 #>  #> $rep_checks #> [1] 8 7 7 8 #>  #> $locations #> [1] 1 #>  #> $planter #> [1] \"serpentine\" #>  #> $percent_checks #> [1] \"10%\" #>  #> $fillers #> [1] 0 #>  #> $seed #> [1] 1987 #>  #> $id_design #> [1] 15 #>  spatd$layoutRandom #> [[1]] #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 Col13 #> Row15   98    4  217  213  139   59  247  208  272    24   232     1   222 #> Row14  221   34  243   69    2  145   37  177  233    67    84    78   239 #> Row13  111  237  254  249   33  142  137    4   39   156   101   159    93 #> Row12    4   27  135   23  191  167   71  244  263   176     4   148   227 #> Row11   89  203  269    2   94  205   43  199  228    95   206   224    10 #> Row10  113  151   64  179   79  184    3  165  220     5    49   183    26 #> Row9   115  138  274   51  264  103  105   82  152     2   158   129   119 #> Row8   147  157    3   40  120  190   66   96   13   163   207   127     4 #> Row7   259  255   92   16    9    1   45  180  154    76   189   144    42 #> Row6   245  114  195   15  173  223  117   60    2   171    87   262    62 #> Row5   108    3  230  186   81  141  219  268  132    30   197     1    97 #> Row4   172  118   61   58    3   80    8  218   14    47   194    54   240 #> Row3    12  116  212   75  209   90  193    3  126   131   169   168   133 #> Row2     3  198   28  210  236   25   53  178  130    17     4   238   146 #> Row1   122  231   77    2  175   19   86  136   57   192   258   106   229 #>       Col14 Col15 Col16 Col17 Col18 Col19 Col20 #> Row15   246   261   100   266   160   162    52 #> Row14    56     1     7   270   250    22   235 #> Row13   174   204    20   134     4   155   112 #> Row12   150    36   164    63    70   153   256 #> Row11     1    29   234    65   248    99     6 #> Row10   196    55   102     1   170    83   187 #> Row9     68   265    72   200    21   201     4 #> Row8    109    73   128   241   253   202    11 #> Row7    140   226     2   225   271   166   161 #> Row6    215   273    35   242   124     3    74 #> Row5    188    18   121   260    41   216    91 #> Row4    143     2    48   252    85    44   211 #> Row3    182   185    88    50     1    32   104 #> Row2    257    31   149   125   110   181    46 #> Row1      1   123    38   107   214   251   267 #>  spatd$plotsNumber #> [[1]] #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 Col13 #> Row15  381  382  383  384  385  386  387  388  389   390   391   392   393 #> Row14  380  379  378  377  376  375  374  373  372   371   370   369   368 #> Row13  341  342  343  344  345  346  347  348  349   350   351   352   353 #> Row12  340  339  338  337  336  335  334  333  332   331   330   329   328 #> Row11  301  302  303  304  305  306  307  308  309   310   311   312   313 #> Row10  300  299  298  297  296  295  294  293  292   291   290   289   288 #> Row9   261  262  263  264  265  266  267  268  269   270   271   272   273 #> Row8   260  259  258  257  256  255  254  253  252   251   250   249   248 #> Row7   221  222  223  224  225  226  227  228  229   230   231   232   233 #> Row6   220  219  218  217  216  215  214  213  212   211   210   209   208 #> Row5   181  182  183  184  185  186  187  188  189   190   191   192   193 #> Row4   180  179  178  177  176  175  174  173  172   171   170   169   168 #> Row3   141  142  143  144  145  146  147  148  149   150   151   152   153 #> Row2   140  139  138  137  136  135  134  133  132   131   130   129   128 #> Row1   101  102  103  104  105  106  107  108  109   110   111   112   113 #>       Col14 Col15 Col16 Col17 Col18 Col19 Col20 #> Row15   394   395   396   397   398   399   400 #> Row14   367   366   365   364   363   362   361 #> Row13   354   355   356   357   358   359   360 #> Row12   327   326   325   324   323   322   321 #> Row11   314   315   316   317   318   319   320 #> Row10   287   286   285   284   283   282   281 #> Row9    274   275   276   277   278   279   280 #> Row8    247   246   245   244   243   242   241 #> Row7    234   235   236   237   238   239   240 #> Row6    207   206   205   204   203   202   201 #> Row5    194   195   196   197   198   199   200 #> Row4    167   166   165   164   163   162   161 #> Row3    154   155   156   157   158   159   160 #> Row2    127   126   125   124   123   122   121 #> Row1    114   115   116   117   118   119   120 #>  head(spatd$fieldBook, 12) #>    ID   EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT #> 1   1 20WRY1    MINOT 2022  101   1      1      0   122   Gen-122 #> 2   2 20WRY1    MINOT 2022  102   1      2      0   231   Gen-231 #> 3   3 20WRY1    MINOT 2022  103   1      3      0    77    Gen-77 #> 4   4 20WRY1    MINOT 2022  104   1      4      2     2   Check-2 #> 5   5 20WRY1    MINOT 2022  105   1      5      0   175   Gen-175 #> 6   6 20WRY1    MINOT 2022  106   1      6      0    19    Gen-19 #> 7   7 20WRY1    MINOT 2022  107   1      7      0    86    Gen-86 #> 8   8 20WRY1    MINOT 2022  108   1      8      0   136   Gen-136 #> 9   9 20WRY1    MINOT 2022  109   1      9      0    57    Gen-57 #> 10 10 20WRY1    MINOT 2022  110   1     10      0   192   Gen-192 #> 11 11 20WRY1    MINOT 2022  111   1     11      0   258   Gen-258 #> 12 12 20WRY1    MINOT 2022  112   1     12      0   106   Gen-106  # Example 2: Generates a spatial decision block diagonal arrangement design in one location # with 720 treatments allocated in 5 experiments or blocks for a field with dimensions # 30 rows x 26 cols in a serpentine arrangement. In this case, we show how to set up the data  # option with the entries list. checks <- 5;expts <- 5 list_checks <- paste(\"CH\", 1:checks, sep = \"\") treatments <- paste(\"G\", 6:725, sep = \"\") treatment_list <- data.frame(list(ENTRY = 1:725, NAME = c(list_checks, treatments))) head(treatment_list, 12)  #>    ENTRY NAME #> 1      1  CH1 #> 2      2  CH2 #> 3      3  CH3 #> 4      4  CH4 #> 5      5  CH5 #> 6      6   G6 #> 7      7   G7 #> 8      8   G8 #> 9      9   G9 #> 10    10  G10 #> 11    11  G11 #> 12    12  G12 tail(treatment_list, 12) #>     ENTRY NAME #> 714   714 G714 #> 715   715 G715 #> 716   716 G716 #> 717   717 G717 #> 718   718 G718 #> 719   719 G719 #> 720   720 G720 #> 721   721 G721 #> 722   722 G722 #> 723   723 G723 #> 724   724 G724 #> 725   725 G725 spatDB <- diagonal_arrangement(   nrows = 30,    ncols = 26,   checks = 5,    plotNumber = 1,    kindExpt = \"DBUDC\",    planter = \"serpentine\",    splitBy = \"row\",    blocks = c(150,155,95,200,120),   data = treatment_list  ) spatDB$infoDesign #> $rows #> [1] 30 #>  #> $columns #> [1] 26 #>  #> $treatments #> [1] 150 155  95 200 120 #>  #> $checks #> [1] 5 #>  #> $entry_checks #> [1] 1 2 3 4 5 #>  #> $rep_checks #> [1] 14 11 12 11 12 #>  #> $locations #> [1] 1 #>  #> $planter #> [1] \"serpentine\" #>  #> $percent_checks #> [1] \"7.7%\" #>  #> $fillers #> [1] 0 #>  #> $seed #> [1] 1375.622 #>  #> $id_design #> [1] 15 #>  spatDB$layoutRandom #> [[1]] #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 Col13 #> Row30  715    3  618  631  640  725  648  686  630   646   669   684   721 #> Row29  716  639  689  614  701    4  718  678  708   679   680   683   719 #> Row28  685  653  703  647  667  641  616  705  610     2   696   671   663 #> Row27    4  724  710  664  628  633  660  698  608   711   692   677   668 #> Row26  697  612  700  687    3  613  617  606  638   607   643   722   673 #> Row25  515  498  457  465  464  538  448  517    5   441   599   590   588 #> Row24  535  431  502  524  439  410  437  576  434   503   422   522     5 #> Row23  573  543  500    4  436  501  548  580  564   528   596   435   430 #> Row22  514  521  512  427  489  442  417    2  584   569   583   604   553 #> Row21  533  445  541  456  484  505  504  449  571   472   486     3   586 #> Row20  493  510    1  443  561  453  480  438  475   494   440   550   469 #> Row19  559  481  462  560  572  508    3  591  542   466   529   419   574 #> Row18  495  429  525  414  578  552  602  479  530   406     5   450   433 #> Row17  385    5  384  374  355  340  313  332  390   319   360   331   403 #> Row16  377  386  339  404  326    3  363  368  337   346   336   392   394 #> Row15  400  317  372  361  356  343  314  328  345     1   405   347   350 #> Row14    3  344  367  358  379  348  402  401  371   342   362   396   365 #> Row13  158  298  257  303    3  203  181  285  256   287   267   163   274 #> Row12  280  224  173  270  249  178  193  198    5   217   169   238   231 #> Row11  195  248  261  259  186  188  187  293  273   202   172   250     4 #> Row10  222  184  204    2  234  242  251  239  206   197   208   302   183 #> Row9   262  214  246  171  215  290  295    2  218   212   241   232   294 #> Row8   291  266  269  189  156  166  296  306  297   268   196     3   223 #> Row7    13   96    3  113   10  128  134  164  161   191   307   276   174 #> Row6    24   62  114  121   87  133    3   91  146    89   125   106    97 #> Row5    29   55   42  154   54  122  131  142   72    59     1    84    39 #> Row4   155    2   82   56  153   80   83   53    7    86   139   150    48 #> Row3    15   16  149  115   58    4   23   41   28    75    68    32   130 #> Row2   105  109   38    8   64  132   78   93  138     5    25    17   151 #> Row1     2  120   66   14  147   11   76  129  100    63   110    37    19 #>       Col14 Col15 Col16 Col17 Col18 Col19 Col20 Col21 Col22 Col23 Col24 Col25 #> Row30   720     5   609   652   714   707   636   688   626   713   699   651 #> Row29   681   645   706   637   672     1   627   690   665   658   676   629 #> Row28   656   634   622   632   654   611   674   661   623     2   659   620 #> Row27     5   666   702   682   642   655   625   704   657   624   670   709 #> Row26   675   615   662   723     1   619   644   649   694   621   650   712 #> Row25   492   432   474   409   597   519   491   507     4   458   416   562 #> Row24   483   463   444   411   558   567   408   447   555   568   565   461 #> Row23   603   490   532     1   605   534   575   424   451   460   518   536 #> Row22   531   546   545   421   423   585   470     4   446   600   488   420 #> Row21   549   598   454   513   413   476   592   551   577   595   540     2 #> Row20   557   473     2   547   554   482   415   563   594   467   485   587 #> Row19   477   506   509   516   579   581     1   487   471   426   527   566 #> Row18   523   511   593   478   496   412   582   601   407   428     1   499 #> Row17   327     2   388   338   393   468   455   526   418   539   589   537 #> Row16   325   312   364   391   375     1   359   311   357   369   329   320 #> Row15   315   354   324   351   397   395   322   335   366     4   318   398 #> Row14     5   349   381   323   382   378   383   353   333   387   389   376 #> Row13   192   160   240   289     4   225   330   316   399   380   373   321 #> Row12   243   236   253   205   170   165   282   185     1   168   176   283 #> Row11   235   167   210   284   233   229   281   247   157   300   258   310 #> Row10   230   279   221     2   304   159   309   301   305   255   175   200 #> Row9    278   308   237   244   199   194   245     1   292   190   265   286 #> Row8    207   260   211   299   252   162   228   288   219   275   182     5 #> Row7    213   263     4   227   220   254   209   226   271   272   179   177 #> Row6     74    81    70   140     6    45     4    65    22   143    94    98 #> Row5    104    21    49    50    90    51    67    34   112   148     1    12 #> Row4     61     5    99   141    85    79    44   118   127    33    31    73 #> Row3     92   119   144    26   102     5   123   126     9    88    30   111 #> Row2     71   135   101    69   124    52   103   136    47     3   107    40 #> Row1      1   137    43    77    27   116   152    95   145    46    18    36 #>       Col26 #> Row30   693 #> Row29   635 #> Row28   691 #> Row27   695 #> Row26   717 #> Row25   556 #> Row24     3 #> Row23   570 #> Row22   520 #> Row21   544 #> Row20   452 #> Row19   459 #> Row18   425 #> Row17   497 #> Row16   334 #> Row15   370 #> Row14   352 #> Row13   341 #> Row12   264 #> Row11     1 #> Row10   180 #> Row9    277 #> Row8    201 #> Row7    216 #> Row6     57 #> Row5     20 #> Row4    117 #> Row3     35 #> Row2     60 #> Row1    108 #>  spatDB$plotsNumber #> [[1]] #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 Col13 #> Row30  780  779  778  777  776  775  774  773  772   771   770   769   768 #> Row29  729  730  731  732  733  734  735  736  737   738   739   740   741 #> Row28  728  727  726  725  724  723  722  721  720   719   718   717   716 #> Row27  677  678  679  680  681  682  683  684  685   686   687   688   689 #> Row26  676  675  674  673  672  671  670  669  668   667   666   665   664 #> Row25  625  626  627  628  629  630  631  632  633   634   635   636   637 #> Row24  624  623  622  621  620  619  618  617  616   615   614   613   612 #> Row23  573  574  575  576  577  578  579  580  581   582   583   584   585 #> Row22  572  571  570  569  568  567  566  565  564   563   562   561   560 #> Row21  521  522  523  524  525  526  527  528  529   530   531   532   533 #> Row20  520  519  518  517  516  515  514  513  512   511   510   509   508 #> Row19  469  470  471  472  473  474  475  476  477   478   479   480   481 #> Row18  468  467  466  465  464  463  462  461  460   459   458   457   456 #> Row17  417  418  419  420  421  422  423  424  425   426   427   428   429 #> Row16  416  415  414  413  412  411  410  409  408   407   406   405   404 #> Row15  365  366  367  368  369  370  371  372  373   374   375   376   377 #> Row14  364  363  362  361  360  359  358  357  356   355   354   353   352 #> Row13  313  314  315  316  317  318  319  320  321   322   323   324   325 #> Row12  312  311  310  309  308  307  306  305  304   303   302   301   300 #> Row11  261  262  263  264  265  266  267  268  269   270   271   272   273 #> Row10  260  259  258  257  256  255  254  253  252   251   250   249   248 #> Row9   209  210  211  212  213  214  215  216  217   218   219   220   221 #> Row8   208  207  206  205  204  203  202  201  200   199   198   197   196 #> Row7   157  158  159  160  161  162  163  164  165   166   167   168   169 #> Row6   156  155  154  153  152  151  150  149  148   147   146   145   144 #> Row5   105  106  107  108  109  110  111  112  113   114   115   116   117 #> Row4   104  103  102  101  100   99   98   97   96    95    94    93    92 #> Row3    53   54   55   56   57   58   59   60   61    62    63    64    65 #> Row2    52   51   50   49   48   47   46   45   44    43    42    41    40 #> Row1     1    2    3    4    5    6    7    8    9    10    11    12    13 #>       Col14 Col15 Col16 Col17 Col18 Col19 Col20 Col21 Col22 Col23 Col24 Col25 #> Row30   767   766   765   764   763   762   761   760   759   758   757   756 #> Row29   742   743   744   745   746   747   748   749   750   751   752   753 #> Row28   715   714   713   712   711   710   709   708   707   706   705   704 #> Row27   690   691   692   693   694   695   696   697   698   699   700   701 #> Row26   663   662   661   660   659   658   657   656   655   654   653   652 #> Row25   638   639   640   641   642   643   644   645   646   647   648   649 #> Row24   611   610   609   608   607   606   605   604   603   602   601   600 #> Row23   586   587   588   589   590   591   592   593   594   595   596   597 #> Row22   559   558   557   556   555   554   553   552   551   550   549   548 #> Row21   534   535   536   537   538   539   540   541   542   543   544   545 #> Row20   507   506   505   504   503   502   501   500   499   498   497   496 #> Row19   482   483   484   485   486   487   488   489   490   491   492   493 #> Row18   455   454   453   452   451   450   449   448   447   446   445   444 #> Row17   430   431   432   433   434   435   436   437   438   439   440   441 #> Row16   403   402   401   400   399   398   397   396   395   394   393   392 #> Row15   378   379   380   381   382   383   384   385   386   387   388   389 #> Row14   351   350   349   348   347   346   345   344   343   342   341   340 #> Row13   326   327   328   329   330   331   332   333   334   335   336   337 #> Row12   299   298   297   296   295   294   293   292   291   290   289   288 #> Row11   274   275   276   277   278   279   280   281   282   283   284   285 #> Row10   247   246   245   244   243   242   241   240   239   238   237   236 #> Row9    222   223   224   225   226   227   228   229   230   231   232   233 #> Row8    195   194   193   192   191   190   189   188   187   186   185   184 #> Row7    170   171   172   173   174   175   176   177   178   179   180   181 #> Row6    143   142   141   140   139   138   137   136   135   134   133   132 #> Row5    118   119   120   121   122   123   124   125   126   127   128   129 #> Row4     91    90    89    88    87    86    85    84    83    82    81    80 #> Row3     66    67    68    69    70    71    72    73    74    75    76    77 #> Row2     39    38    37    36    35    34    33    32    31    30    29    28 #> Row1     14    15    16    17    18    19    20    21    22    23    24    25 #>       Col26 #> Row30   755 #> Row29   754 #> Row28   703 #> Row27   702 #> Row26   651 #> Row25   650 #> Row24   599 #> Row23   598 #> Row22   547 #> Row21   546 #> Row20   495 #> Row19   494 #> Row18   443 #> Row17   442 #> Row16   391 #> Row15   390 #> Row14   339 #> Row13   338 #> Row12   287 #> Row11   286 #> Row10   235 #> Row9    234 #> Row8    183 #> Row7    182 #> Row6    131 #> Row5    130 #> Row4     79 #> Row3     78 #> Row2     27 #> Row1     26 #>  head(spatDB$fieldBook,12) #>    ID   EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT #> 1   1 Block1        1 2022    1   1      1      2     2       CH2 #> 2   2 Block1        1 2022    2   1      2      0   120      G120 #> 3   3 Block1        1 2022    3   1      3      0    66       G66 #> 4   4 Block1        1 2022    4   1      4      0    14       G14 #> 5   5 Block1        1 2022    5   1      5      0   147      G147 #> 6   6 Block1        1 2022    6   1      6      0    11       G11 #> 7   7 Block1        1 2022    7   1      7      0    76       G76 #> 8   8 Block1        1 2022    8   1      8      0   129      G129 #> 9   9 Block1        1 2022    9   1      9      0   100      G100 #> 10 10 Block1        1 2022   10   1     10      0    63       G63 #> 11 11 Block1        1 2022   11   1     11      0   110      G110 #> 12 12 Block1        1 2022   12   1     12      0    37       G37  # Example 3: Generates a spatial decision block diagonal arrangement design in one location # with 270 treatments allocated in 3 experiments or blocks for a field with dimensions # 20 rows x 15 cols in a serpentine arrangement. Which in turn is an augmented block (3 blocks). spatAB <- diagonal_arrangement(nrows = 20, ncols = 15, lines = 270,                                 checks = 4,                                 plotNumber = c(1,1001,2001),                                 kindExpt = \"DBUDC\",                                 planter = \"serpentine\",                                exptName = c(\"20WRA\", \"20WRB\", \"20WRC\"),                                 blocks = c(90, 90, 90),                                splitBy = \"column\") spatAB$infoDesign #> $rows #> [1] 20 #>  #> $columns #> [1] 15 #>  #> $treatments #> [1] 90 90 90 #>  #> $checks #> [1] 4 #>  #> $entry_checks #> [1] 1 2 3 4 #>  #> $rep_checks #> [1] 6 7 9 8 #>  #> $locations #> [1] 1 #>  #> $planter #> [1] \"serpentine\" #>  #> $percent_checks #> [1] \"10%\" #>  #> $fillers #> [1] 0 #>  #> $seed #> [1] -6568.56 #>  #> $id_design #> [1] 15 #>  spatAB$layoutRandom #> [[1]] #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 Col13 #> Row20   18    3   17   69   48  100  142  120  162   180   218     3   258 #> Row19   65   70   93   83    4  104  112  116  137   171   196   215   248 #> Row18   35   25    5   42   39  109  172    3  183   140   189   247   222 #> Row17    1   15   51   19   53   96  145  133  122   170     1   224   257 #> Row16   24   16    8    3   49  178  152  176   99   166   243   214   191 #> Row15   57   84   38   71   27  174    4  129  157   169   197   241   261 #> Row14   59   31   23   36   30  134  139  123  107     1   188   236   192 #> Row13   76   10    3   14   75  153  147   98  175   136   190   193     4 #> Row12   86   64    6   41   54    3  182  177  161   126   185   201   212 #> Row11   21   33   92   26   46  151  167  164    2   146   200   204   273 #> Row10   72    4   81   63    7  117  106   95  159   132   206     4   259 #> Row9    47   62   50   44    1  149  127  173  103   156   262   253   220 #> Row8    74   78   77   66   56  163  105    1  154   135   195   274   265 #> Row7     2   40   28    9   12  130  114  101  155   124     3   202   211 #> Row6    90   79   82    4   94  110  184  115  118   119   223   255   233 #> Row5    52   85   29   89   34  131    4  113  179   168   221   226   213 #> Row4    61   37   45   88   73  165  158  143  121     2   271   227   205 #> Row3    20   55    2   22   91  108  160  128  141   144   210   242     2 #> Row2    68   80   58   60   87    3  138  148  181   111   207   217   239 #> Row1    43   32   67   13   11  125  150   97    2   102   235   268   267 #>       Col14 Col15 #> Row20   229   216 #> Row19   272     1 #> Row18   270   264 #> Row17   219   228 #> Row16     2   238 #> Row15   232   187 #> Row14   269   252 #> Row13   194   249 #> Row12   225   231 #> Row11   199   237 #> Row10   260   208 #> Row9    240     3 #> Row8    246   244 #> Row7    198   251 #> Row6      4   263 #> Row5    254   250 #> Row4    230   245 #> Row3    256   234 #> Row2    209   203 #> Row1    186   266 #>  spatAB$plotsNumber #> [[1]] #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 Col13 #> Row20  100   99   98   97   96 1100 1099 1098 1097  1096  2100  2099  2098 #> Row19   91   92   93   94   95 1091 1092 1093 1094  1095  2091  2092  2093 #> Row18   90   89   88   87   86 1090 1089 1088 1087  1086  2090  2089  2088 #> Row17   81   82   83   84   85 1081 1082 1083 1084  1085  2081  2082  2083 #> Row16   80   79   78   77   76 1080 1079 1078 1077  1076  2080  2079  2078 #> Row15   71   72   73   74   75 1071 1072 1073 1074  1075  2071  2072  2073 #> Row14   70   69   68   67   66 1070 1069 1068 1067  1066  2070  2069  2068 #> Row13   61   62   63   64   65 1061 1062 1063 1064  1065  2061  2062  2063 #> Row12   60   59   58   57   56 1060 1059 1058 1057  1056  2060  2059  2058 #> Row11   51   52   53   54   55 1051 1052 1053 1054  1055  2051  2052  2053 #> Row10   50   49   48   47   46 1050 1049 1048 1047  1046  2050  2049  2048 #> Row9    41   42   43   44   45 1041 1042 1043 1044  1045  2041  2042  2043 #> Row8    40   39   38   37   36 1040 1039 1038 1037  1036  2040  2039  2038 #> Row7    31   32   33   34   35 1031 1032 1033 1034  1035  2031  2032  2033 #> Row6    30   29   28   27   26 1030 1029 1028 1027  1026  2030  2029  2028 #> Row5    21   22   23   24   25 1021 1022 1023 1024  1025  2021  2022  2023 #> Row4    20   19   18   17   16 1020 1019 1018 1017  1016  2020  2019  2018 #> Row3    11   12   13   14   15 1011 1012 1013 1014  1015  2011  2012  2013 #> Row2    10    9    8    7    6 1010 1009 1008 1007  1006  2010  2009  2008 #> Row1     1    2    3    4    5 1001 1002 1003 1004  1005  2001  2002  2003 #>       Col14 Col15 #> Row20  2097  2096 #> Row19  2094  2095 #> Row18  2087  2086 #> Row17  2084  2085 #> Row16  2077  2076 #> Row15  2074  2075 #> Row14  2067  2066 #> Row13  2064  2065 #> Row12  2057  2056 #> Row11  2054  2055 #> Row10  2047  2046 #> Row9   2044  2045 #> Row8   2037  2036 #> Row7   2034  2035 #> Row6   2027  2026 #> Row5   2024  2025 #> Row4   2017  2016 #> Row3   2014  2015 #> Row2   2007  2006 #> Row1   2004  2005 #>  head(spatAB$fieldBook,12) #>    ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT #> 1   1 20WRA        1 2022    1   1      1      0    43    Gen-43 #> 2   2 20WRA        1 2022    2   1      2      0    32    Gen-32 #> 3   3 20WRA        1 2022    3   1      3      0    67    Gen-67 #> 4   4 20WRA        1 2022    4   1      4      0    13    Gen-13 #> 5   5 20WRA        1 2022    5   1      5      0    11    Gen-11 #> 6   6 20WRB        1 2022 1001   1      6      0   125   Gen-125 #> 7   7 20WRB        1 2022 1002   1      7      0   150   Gen-150 #> 8   8 20WRB        1 2022 1003   1      8      0    97    Gen-97 #> 9   9 20WRB        1 2022 1004   1      9      2     2   Check-2 #> 10 10 20WRB        1 2022 1005   1     10      0   102   Gen-102 #> 11 11 20WRC        1 2022 2001   1     11      0   235   Gen-235 #> 12 12 20WRC        1 2022 2002   1     12      0   268   Gen-268"},{"path":"https://didiermurillof.github.io/FielDHub/reference/full_factorial.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Full Factorial Design — full_factorial","title":"Generates a Full Factorial Design — full_factorial","text":"randomly generates full factorial design across locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/full_factorial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Full Factorial Design — full_factorial","text":"","code":"full_factorial(   setfactors = NULL,   reps = NULL,   l = 1,   type = 2,   plotNumber = 101,   continuous = FALSE,   planter = \"serpentine\",   seed = NULL,   locationNames = NULL,   factorLabels = TRUE,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/full_factorial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Full Factorial Design — full_factorial","text":"setfactors Numeric vector levels factor. reps Number replicates (full blocks). l Number locations. default l = 1. type Option CRD RCBD designs. Values type = 1 (CRD) type = 2 (RCBD). default type = 2. plotNumber Numeric vector starting plot number location. default plotNumber = 101. continuous Logical plot number continuous . default continuous = FALSE. planter Option serpentine cartesian plot arrangement. default planter = 'serpentine'. seed (optional) Real number specifies starting seed obtain reproducible designs. locationNames (optional) Names location. factorLabels (optional) TRUE retain levels labels original data set otherwise, numeric labels assigned. Default factorLabels =TRUE. data (optional) Data frame labels factors.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/full_factorial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Full Factorial Design — full_factorial","text":"list two elements. infoDesign list information design parameters. fieldBook data frame full factorial field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/full_factorial.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Full Factorial Design — full_factorial","text":"Federer, W. T. (1955). Experimental Design. Theory Application. New York, USA. Macmillan Company.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/full_factorial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Full Factorial Design — full_factorial","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/full_factorial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Full Factorial Design — full_factorial","text":"","code":"# Example 1: Generates a full factorial with 3 factors each with 2 levels. # This in an RCBD arrangement with 3 reps. fullFact1 <- full_factorial(setfactors = c(2,2,2), reps = 3, l = 1, type = 2,                             plotNumber = 101,                             continuous = TRUE,                             planter = \"serpentine\",                             seed = 325,                             locationNames = \"FARGO\") fullFact1$infoDesign #> $factors #> [1] \"A\" \"B\" \"C\" #>  #> $levels #> [1] 0 1 0 1 0 1 #>  #> $runs #> [1] 8 #>  #> $all_treatments #>   A B C #> 1 0 0 0 #> 2 1 0 0 #> 3 0 1 0 #> 4 1 1 0 #> 5 0 0 1 #> 6 1 0 1 #> 7 0 1 1 #> 8 1 1 1 #>  #> $reps #> [1] 3 #>  #> $locations #> [1] 1 #>  #> $location_names #> [1] \"FARGO\" #>  #> $kind #> [1] \"RCBD\" #>  #> $levels_each_factor #> [1] 2 2 2 #>  #> $id_design #> [1] 4 #>  head(fullFact1$fieldBook,10) #>    ID LOCATION PLOT REP FACTOR_A FACTOR_B FACTOR_C TRT_COMB #> 1   1    FARGO  101   1        0        1        1    0*1*1 #> 2   2    FARGO  102   1        1        1        1    1*1*1 #> 3   3    FARGO  103   1        1        0        0    1*0*0 #> 4   4    FARGO  104   1        0        1        0    0*1*0 #> 5   5    FARGO  105   1        1        1        0    1*1*0 #> 6   6    FARGO  106   1        1        0        1    1*0*1 #> 7   7    FARGO  107   1        0        0        0    0*0*0 #> 8   8    FARGO  108   1        0        0        1    0*0*1 #> 16  9    FARGO  109   2        1        1        0    1*1*0 #> 15 10    FARGO  110   2        0        0        0    0*0*0  # Example 2: Generates a full factorial with 3 factors and each with levels: 2,3, # and 2, respectively. In this case, we show how to use the option data FACTORS <- rep(c(\"A\", \"B\", \"C\"), c(2,3,2)) LEVELS <- c(\"a0\", \"a1\", \"b0\", \"b1\", \"b2\", \"c0\", \"c1\") data_factorial <- data.frame(list(FACTOR = FACTORS, LEVEL = LEVELS)) print(data_factorial) #>   FACTOR LEVEL #> 1      A    a0 #> 2      A    a1 #> 3      B    b0 #> 4      B    b1 #> 5      B    b2 #> 6      C    c0 #> 7      C    c1 # This in an RCBD arrangement with 5 reps in 3 locations. fullFact2 <- full_factorial(setfactors = NULL, reps = 5, l = 3, type = 2,                             plotNumber = c(101,1001,2001),                             continuous = FALSE,                             planter = \"serpentine\",                             seed = 326,                             locationNames = c(\"Loc1\",\"Loc2\",\"Loc3\"),                             data = data_factorial) fullFact2$infoDesign #> $factors #> [1] \"A\" \"B\" \"C\" #>  #> $levels #> $levels[[1]] #> [1] \"a0\" \"a1\" #>  #> $levels[[2]] #> [1] \"b0\" \"b1\" \"b2\" #>  #> $levels[[3]] #> [1] \"c0\" \"c1\" #>  #>  #> $runs #> [1] 12 #>  #> $all_treatments #>     A  B  C #> 1  a0 b0 c0 #> 2  a1 b0 c0 #> 3  a0 b1 c0 #> 4  a1 b1 c0 #> 5  a0 b2 c0 #> 6  a1 b2 c0 #> 7  a0 b0 c1 #> 8  a1 b0 c1 #> 9  a0 b1 c1 #> 10 a1 b1 c1 #> 11 a0 b2 c1 #> 12 a1 b2 c1 #>  #> $reps #> [1] 5 #>  #> $locations #> [1] 3 #>  #> $location_names #> [1] \"Loc1\" \"Loc2\" \"Loc3\" #>  #> $kind #> [1] \"RCBD\" #>  #> $levels_each_factor #> [1] 2 3 2 #>  #> $id_design #> [1] 4 #>  head(fullFact2$fieldBook,10) #>    ID LOCATION PLOT REP FACTOR_A FACTOR_B FACTOR_C TRT_COMB #> 1   1     Loc1  101   1       a0       b1       c0 a0*b1*c0 #> 2   2     Loc1  102   1       a1       b0       c1 a1*b0*c1 #> 3   3     Loc1  103   1       a1       b2       c1 a1*b2*c1 #> 4   4     Loc1  104   1       a0       b1       c1 a0*b1*c1 #> 5   5     Loc1  105   1       a1       b0       c0 a1*b0*c0 #> 6   6     Loc1  106   1       a0       b0       c1 a0*b0*c1 #> 7   7     Loc1  107   1       a1       b1       c0 a1*b1*c0 #> 8   8     Loc1  108   1       a0       b2       c1 a0*b2*c1 #> 9   9     Loc1  109   1       a1       b1       c1 a1*b1*c1 #> 10 10     Loc1  110   1       a0       b0       c0 a0*b0*c0"},{"path":"https://didiermurillof.github.io/FielDHub/reference/incomplete_blocks.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Resolvable Incomplete Block Design — incomplete_blocks","title":"Generates a Resolvable Incomplete Block Design — incomplete_blocks","text":"Randomly generates resolvable incomplete block design (IBD) characteristics (t, k, r). randomization can done across locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/incomplete_blocks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Resolvable Incomplete Block Design — incomplete_blocks","text":"","code":"incomplete_blocks(   t = NULL,   k = NULL,   r = NULL,   l = 1,   plotNumber = 101,   locationNames = NULL,   seed = NULL,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/incomplete_blocks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Resolvable Incomplete Block Design — incomplete_blocks","text":"t Number  treatments. k Size incomplete blocks (number units per incomplete block). r Number full blocks (resolvable replicates) (also number replicates per treatment). l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. locationNames (optional) Names location. seed (optional) Real number specifies starting seed obtain reproducible designs. data (optional) Data frame label list treatments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/incomplete_blocks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Resolvable Incomplete Block Design — incomplete_blocks","text":"list two elements. infoDesign list information design parameters. fieldBook data frame incomplete block design field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/incomplete_blocks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Resolvable Incomplete Block Design — incomplete_blocks","text":"Edmondson., R. N. (2021). blocksdesign: Nested crossed block designs factorial unstructured treatment sets. https://CRAN.R-project.org/package=blocksdesign","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/incomplete_blocks.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Resolvable Incomplete Block Design — incomplete_blocks","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/incomplete_blocks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Resolvable Incomplete Block Design — incomplete_blocks","text":"","code":"# Example 1: Generates a resolvable IBD of characteristics (t,k,r) = (12,4,2). # 1-resolvable IBDs ibd1 <- incomplete_blocks(t = 12,                           k = 4,                           r = 2,                           seed = 1984) ibd1$infoDesign #> $Reps #> [1] 2 #>  #> $iBlocks #> [1] 3 #>  #> $NumberTreatments #> [1] 12 #>  #> $NumberLocations #> [1] 1 #>  #> $Locations #> [1] 1 #>  #> $seed #> [1] 1984 #>  #> $lambda #> [1] 0.5454545 #>  #> $id_design #> [1] 8 #>  head(ibd1$fieldBook) #>   ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT #> 1  1        1  101   1      1    1     8       G-8 #> 2  2        1  102   1      1    2     9       G-9 #> 3  3        1  103   1      1    3    12      G-12 #> 4  4        1  104   1      1    4     1       G-1 #> 5  5        1  105   1      2    1     5       G-5 #> 6  6        1  106   1      2    2    11      G-11  # Example 2: Generates a balanced resolvable IBD of characteristics (t,k,r) = (15,3,7). # In this case, we show how to use the option data. treatments <- paste(\"TX-\", 1:15, sep = \"\") ENTRY <- 1:15 treatment_list <- data.frame(list(ENTRY = ENTRY, TREATMENT = treatments)) head(treatment_list) #>   ENTRY TREATMENT #> 1     1      TX-1 #> 2     2      TX-2 #> 3     3      TX-3 #> 4     4      TX-4 #> 5     5      TX-5 #> 6     6      TX-6 ibd2 <- incomplete_blocks(t = 15,                           k = 3,                           r = 7,                           seed = 1985,                           data = treatment_list) ibd2$infoDesign #> $Reps #> [1] 7 #>  #> $iBlocks #> [1] 5 #>  #> $NumberTreatments #> [1] 15 #>  #> $NumberLocations #> [1] 1 #>  #> $Locations #> [1] 1 #>  #> $seed #> [1] 1985 #>  #> $lambda #> [1] 1 #>  #> $id_design #> [1] 8 #>  head(ibd2$fieldBook) #>   ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT #> 1  1        1  101   1      1    1     8      TX-8 #> 2  2        1  102   1      1    2    11     TX-11 #> 3  3        1  103   1      1    3     2      TX-2 #> 4  4        1  104   1      2    1     4      TX-4 #> 5  5        1  105   1      2    2    14     TX-14 #> 6  6        1  106   1      2    3    13     TX-13"},{"path":"https://didiermurillof.github.io/FielDHub/reference/latin_square.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Latin Square Design — latin_square","title":"Generates a Latin Square Design — latin_square","text":"Randomly generates latin square design 10 treatments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/latin_square.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Latin Square Design — latin_square","text":"","code":"latin_square(   t = NULL,   reps = 1,   plotNumber = 101,   planter = \"serpentine\",   seed = NULL,   locationNames = NULL,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/latin_square.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Latin Square Design — latin_square","text":"t Number treatments. reps Number full resolvable squares. default reps = 1. plotNumber Starting plot number. default plotNumber = 101. planter Option serpentine cartesian arrangement. default planter = 'serpentine'. seed (optional) Real number specifies starting seed obtain reproducible designs. locationNames (optional) Name location. data (optional) Data frame label list treatments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/latin_square.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Latin Square Design — latin_square","text":"list information design parameters. Data frame latin square field book. list two elements. infoDesign list information design parameters. fieldBook data frame latin square field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/latin_square.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Latin Square Design — latin_square","text":"Federer, W. T. (1955). Experimental Design. Theory Application. New York, USA. Macmillan Company.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/latin_square.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Latin Square Design — latin_square","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],         Thiago de Paula Oliveira[ctb]          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/latin_square.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Latin Square Design — latin_square","text":"","code":"# Example 1: Generates a latin square design with 4 treatments and 2 reps. latinSq1 <- latin_square(t = 4,                          reps = 2,                          plotNumber = 101,                          planter = \"cartesian\",                          seed = 1980) print(latinSq1) #> Latin Square Design:  #>  #> Information on the design parameters:  #> List of 4 #>  $ treatments  : int 4 #>  $ squares     : num 2 #>  $ locationName: NULL #>  $ seed        : num 1980 #>  #>  10 First observations of the data frame with the latin_square field book:  #>    ID LOCATION PLOT SQUARE   ROW   COLUMN TREATMENT #> 1   1        1  101      1 Row 1 Column 1        T1 #> 2   2        1  102      1 Row 1 Column 2        T4 #> 3   3        1  103      1 Row 1 Column 3        T2 #> 4   4        1  104      1 Row 1 Column 4        T3 #> 5   5        1  105      1 Row 2 Column 1        T3 #> 6   6        1  106      1 Row 2 Column 2        T1 #> 7   7        1  107      1 Row 2 Column 3        T4 #> 8   8        1  108      1 Row 2 Column 4        T2 #> 9   9        1  109      1 Row 3 Column 1        T4 #> 10 10        1  110      1 Row 3 Column 2        T2 summary(latinSq1) #> Latin Square Design:  #>  #> 1. Information on the design parameters:  #> List of 5 #>  $ treatments  : int 4 #>  $ squares     : num 2 #>  $ locationName: NULL #>  $ seed        : num 1980 #>  $ id_design   : num 3 #>  #> 2. Squares:  #> $rep1 #>       Column 1 Column 2 Column 3 Column 4 #> Row 1 \"T1\"     \"T4\"     \"T2\"     \"T3\"     #> Row 2 \"T3\"     \"T1\"     \"T4\"     \"T2\"     #> Row 3 \"T4\"     \"T2\"     \"T3\"     \"T1\"     #> Row 4 \"T2\"     \"T3\"     \"T1\"     \"T4\"     #>  #> $rep2 #>       Column 1 Column 2 Column 3 Column 4 #> Row 1 \"T1\"     \"T3\"     \"T4\"     \"T2\"     #> Row 2 \"T2\"     \"T4\"     \"T3\"     \"T1\"     #> Row 3 \"T4\"     \"T1\"     \"T2\"     \"T3\"     #> Row 4 \"T3\"     \"T2\"     \"T1\"     \"T4\"     #>  #>  #> 3. Plot squares:  #> $rep1 #>      [,1] [,2] [,3] [,4] #> [1,]  101  102  103  104 #> [2,]  105  106  107  108 #> [3,]  109  110  111  112 #> [4,]  113  114  115  116 #>  #> $rep2 #>      [,1] [,2] [,3] [,4] #> [1,]  201  202  203  204 #> [2,]  205  206  207  208 #> [3,]  209  210  211  212 #> [4,]  213  214  215  216 #>  #>  #> 4. Structure of the data frame with the latin_square field book:  #>  #> 'data.frame':\t32 obs. of  7 variables: #>  $ ID       : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ LOCATION : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ PLOT     : int  101 102 103 104 105 106 107 108 109 110 ... #>  $ SQUARE   : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ ROW      : Factor w/ 4 levels \"Row 1\",\"Row 2\",..: 1 1 1 1 2 2 2 2 3 3 ... #>  $ COLUMN   : Factor w/ 4 levels \"Column 1\",\"Column 2\",..: 1 2 3 4 1 2 3 4 1 2 ... #>  $ TREATMENT: chr  \"T1\" \"T4\" \"T2\" \"T3\" ... head(latinSq1$fieldBook) #>   ID LOCATION PLOT SQUARE   ROW   COLUMN TREATMENT #> 1  1        1  101      1 Row 1 Column 1        T1 #> 2  2        1  102      1 Row 1 Column 2        T4 #> 3  3        1  103      1 Row 1 Column 3        T2 #> 4  4        1  104      1 Row 1 Column 4        T3 #> 5  5        1  105      1 Row 2 Column 1        T3 #> 6  6        1  106      1 Row 2 Column 2        T1  # Example 2: Generates a latin square design with 5 treatments and 3 reps. latin_data <- data.frame(list(ROW = paste(\"Period\", 1:5, sep = \"\"),                               COLUMN = paste(\"Cow\", 1:5, sep = \"\"),                               TREATMENT = paste(\"Diet\", 1:5, sep = \"\"))) print(latin_data) #>       ROW COLUMN TREATMENT #> 1 Period1   Cow1     Diet1 #> 2 Period2   Cow2     Diet2 #> 3 Period3   Cow3     Diet3 #> 4 Period4   Cow4     Diet4 #> 5 Period5   Cow5     Diet5 latinSq2 <- latin_square(t = NULL,                          reps = 3,                          plotNumber = 101,                          planter = \"cartesian\",                          seed = 1981,                          data = latin_data) latinSq2$squares #> $rep1 #>         Cow1    Cow2    Cow3    Cow4    Cow5    #> Period1 \"Diet4\" \"Diet3\" \"Diet2\" \"Diet1\" \"Diet5\" #> Period2 \"Diet1\" \"Diet2\" \"Diet4\" \"Diet5\" \"Diet3\" #> Period3 \"Diet3\" \"Diet5\" \"Diet1\" \"Diet2\" \"Diet4\" #> Period4 \"Diet2\" \"Diet4\" \"Diet5\" \"Diet3\" \"Diet1\" #> Period5 \"Diet5\" \"Diet1\" \"Diet3\" \"Diet4\" \"Diet2\" #>  #> $rep2 #>         Cow1    Cow2    Cow3    Cow4    Cow5    #> Period1 \"Diet2\" \"Diet4\" \"Diet5\" \"Diet3\" \"Diet1\" #> Period2 \"Diet1\" \"Diet2\" \"Diet3\" \"Diet4\" \"Diet5\" #> Period3 \"Diet3\" \"Diet5\" \"Diet1\" \"Diet2\" \"Diet4\" #> Period4 \"Diet4\" \"Diet1\" \"Diet2\" \"Diet5\" \"Diet3\" #> Period5 \"Diet5\" \"Diet3\" \"Diet4\" \"Diet1\" \"Diet2\" #>  #> $rep3 #>         Cow1    Cow2    Cow3    Cow4    Cow5    #> Period1 \"Diet4\" \"Diet2\" \"Diet1\" \"Diet3\" \"Diet5\" #> Period2 \"Diet1\" \"Diet3\" \"Diet2\" \"Diet5\" \"Diet4\" #> Period3 \"Diet3\" \"Diet5\" \"Diet4\" \"Diet2\" \"Diet1\" #> Period4 \"Diet5\" \"Diet1\" \"Diet3\" \"Diet4\" \"Diet2\" #> Period5 \"Diet2\" \"Diet4\" \"Diet5\" \"Diet1\" \"Diet3\" #>  latinSq2$plotSquares #> $rep1 #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  101  102  103  104  105 #> [2,]  106  107  108  109  110 #> [3,]  111  112  113  114  115 #> [4,]  116  117  118  119  120 #> [5,]  121  122  123  124  125 #>  #> $rep2 #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  201  202  203  204  205 #> [2,]  206  207  208  209  210 #> [3,]  211  212  213  214  215 #> [4,]  216  217  218  219  220 #> [5,]  221  222  223  224  225 #>  #> $rep3 #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  301  302  303  304  305 #> [2,]  306  307  308  309  310 #> [3,]  311  312  313  314  315 #> [4,]  316  317  318  319  320 #> [5,]  321  322  323  324  325 #>  head(latinSq2$fieldBook) #>   ID LOCATION PLOT SQUARE     ROW COLUMN TREATMENT #> 1  1        1  101      1 Period1   Cow1     Diet4 #> 2  2        1  102      1 Period1   Cow2     Diet3 #> 3  3        1  103      1 Period1   Cow3     Diet2 #> 4  4        1  104      1 Period1   Cow4     Diet1 #> 5  5        1  105      1 Period1   Cow5     Diet5 #> 6  6        1  106      1 Period2   Cow1     Diet1"},{"path":"https://didiermurillof.github.io/FielDHub/reference/optimized_arrangement.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates an Spatial Un-replicated Optimized Arrangement Design — optimized_arrangement","title":"Generates an Spatial Un-replicated Optimized Arrangement Design — optimized_arrangement","text":"Randomly generates spatial un-replicated optimized arrangement design, distance checks maximized way row column control plots. Note design generation needs dimension field (number rows columns).","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/optimized_arrangement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates an Spatial Un-replicated Optimized Arrangement Design — optimized_arrangement","text":"","code":"optimized_arrangement(   nrows = NULL,   ncols = NULL,   lines = NULL,   amountChecks = NULL,   checks = NULL,   planter = \"serpentine\",   l = 1,   plotNumber = 101,   seed = NULL,   exptName = NULL,   locationNames = NULL,   optim = TRUE,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/optimized_arrangement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates an Spatial Un-replicated Optimized Arrangement Design — optimized_arrangement","text":"nrows Number rows field. ncols Number columns field. lines Number genotypes, experimental lines treatments. amountChecks Integer amount total checks numeric vector replicates check label. checks Number genotypes checks. planter Option serpentine cartesian arrangement. default  planter = 'serpentine'. l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. seed (optional) Real number specifies starting seed obtain reproducible designs. exptName (optional) Name experiment. locationNames (optional) Name location. optim default optim = TRUE. data (optional) Data frame 3 columns: ENTRY | NAME | REPS.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/optimized_arrangement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates an Spatial Un-replicated Optimized Arrangement Design — optimized_arrangement","text":"list five elements. infoDesign list information design parameters. layoutRandom matrix randomization layout. plotNumber matrix layout plot number. dataEntry data frame data input. genEntries list entries replicated replicated part. fieldBook data frame field book design. includes index (Row, Column).","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/optimized_arrangement.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates an Spatial Un-replicated Optimized Arrangement Design — optimized_arrangement","text":"Clarke, G. P. Y., & Stefanova, K. T. (2011). Optimal design early-generation plant breeding trials unreplicated partially replicated test lines. Australian & New Zealand Journal Statistics, 53(4), 461–480.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/optimized_arrangement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates an Spatial Un-replicated Optimized Arrangement Design — optimized_arrangement","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/optimized_arrangement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates an Spatial Un-replicated Optimized Arrangement Design — optimized_arrangement","text":"","code":"# Example 1: Generates a spatial unreplicated optimized arrangement design in one location # with 108 genotypes + 12 check plots (4 checks) for a field with dimension 10 rows x 12 cols. OptimAd1 <- optimized_arrangement(   nrows = 10,    ncols = 12,    lines = 108,    amountChecks = 12,    checks = 1:4,   planter = \"cartesian\",    plotNumber = 101,   seed = 14,   exptName = \"20RW1\",   locationNames = \"CASSELTON\"  ) #> [1] 120 OptimAd1$infoDesign #> $rows #> [1] 10 #>  #> $columns #> [1] 12 #>  #> $treatments #> [1] 108 #>  #> $checks #> [1] 4 #>  #> $entry_checks #> [1] 1 2 3 4 #>  #> $rep_checks #> [1] 3 3 3 3 #>  #> $locations #> [1] 1 #>  #> $planter #> [1] \"cartesian\" #>  #> $seed #> [1] 14 #>  #> $id_design #> [1] 16 #>  OptimAd1$layoutRandom #> [[1]] #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 #> Row10   69  106   64    4   28  109    6   41    8    25    34   104 #> Row9    80   47   55  112   22    2   89   68   15    95    98    61 #> Row8   110    4   48   26   20   66   35   46   81     1    18    76 #> Row7     5  111   65   36   92   54   38   87  100    84     3    75 #> Row6    14   59   40   19    1   63   91    7   10   105    29    30 #> Row5    17   67    3   58   11   94   13   57   99    12   102    16 #> Row4    73   56   50  108   74  101   27   43    2    79    83    90 #> Row3     4   71   37   51  107   21   93    3   70    86    42    39 #> Row2    85   44   24   82   96   53  103   23   77    33     9     1 #> Row1    31   32   60   52   78   72    2   62   45    49    97    88 #>  OptimAd1$plotNumber #> [[1]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] #>  [1,]  209  210  211  212  213  214  215  216  217   218   219   220 #>  [2,]  197  198  199  200  201  202  203  204  205   206   207   208 #>  [3,]  185  186  187  188  189  190  191  192  193   194   195   196 #>  [4,]  173  174  175  176  177  178  179  180  181   182   183   184 #>  [5,]  161  162  163  164  165  166  167  168  169   170   171   172 #>  [6,]  149  150  151  152  153  154  155  156  157   158   159   160 #>  [7,]  137  138  139  140  141  142  143  144  145   146   147   148 #>  [8,]  125  126  127  128  129  130  131  132  133   134   135   136 #>  [9,]  113  114  115  116  117  118  119  120  121   122   123   124 #> [10,]  101  102  103  104  105  106  107  108  109   110   111   112 #>  head(OptimAd1$fieldBook,12) #>    ID  EXPT  LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT #> 1   1 20RW1 CASSELTON 2022  101   1      1      0    31       G31 #> 2   2 20RW1 CASSELTON 2022  102   1      2      0    32       G32 #> 3   3 20RW1 CASSELTON 2022  103   1      3      0    60       G60 #> 4   4 20RW1 CASSELTON 2022  104   1      4      0    52       G52 #> 5   5 20RW1 CASSELTON 2022  105   1      5      0    78       G78 #> 6   6 20RW1 CASSELTON 2022  106   1      6      0    72       G72 #> 7   7 20RW1 CASSELTON 2022  107   1      7      2     2       CH2 #> 8   8 20RW1 CASSELTON 2022  108   1      8      0    62       G62 #> 9   9 20RW1 CASSELTON 2022  109   1      9      0    45       G45 #> 10 10 20RW1 CASSELTON 2022  110   1     10      0    49       G49 #> 11 11 20RW1 CASSELTON 2022  111   1     11      0    97       G97 #> 12 12 20RW1 CASSELTON 2022  112   1     12      0    88       G88                    # Example 2: Generates a spatial unreplicated optimized arrangement design in one location # with 200 genotypes + 20 check plots (4 checks) for a field with dimension 10 rows x 22 cols. # As example, we set up the data option with the entries list. checks <- 4 list_checks <- paste(\"CH\", 1:checks, sep = \"\") treatments <- paste(\"G\", 5:204, sep = \"\") REPS <- c(5, 5, 5, 5, rep(1, 200)) treatment_list <- data.frame(list(ENTRY = 1:204, NAME = c(list_checks, treatments), REPS = REPS)) head(treatment_list, 12)  #>    ENTRY NAME REPS #> 1      1  CH1    5 #> 2      2  CH2    5 #> 3      3  CH3    5 #> 4      4  CH4    5 #> 5      5   G5    1 #> 6      6   G6    1 #> 7      7   G7    1 #> 8      8   G8    1 #> 9      9   G9    1 #> 10    10  G10    1 #> 11    11  G11    1 #> 12    12  G12    1 tail(treatment_list, 12) #>     ENTRY NAME REPS #> 193   193 G193    1 #> 194   194 G194    1 #> 195   195 G195    1 #> 196   196 G196    1 #> 197   197 G197    1 #> 198   198 G198    1 #> 199   199 G199    1 #> 200   200 G200    1 #> 201   201 G201    1 #> 202   202 G202    1 #> 203   203 G203    1 #> 204   204 G204    1 OptimAd2 <- optimized_arrangement(   nrows = 10,    ncols = 22,    planter = \"serpentine\",    plotNumber = 101,   seed = 120,   exptName = \"20YWA2\",   locationNames = \"MINOT\",   data = treatment_list ) #> [1] 220 OptimAd2$infoDesign #> $rows #> [1] 10 #>  #> $columns #> [1] 22 #>  #> $treatments #> [1] 200 #>  #> $checks #> [1] 4 #>  #> $entry_checks #> [1] 1 2 3 4 #>  #> $rep_checks #> [1] 5 5 5 5 #>  #> $locations #> [1] 1 #>  #> $planter #> [1] \"serpentine\" #>  #> $seed #> [1] 120 #>  #> $id_design #> [1] 16 #>  OptimAd2$layoutRandom #> [[1]] #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 Col13 #> Row10   75  141  179  140   34  197   70   31    3    91   186     1   132 #> Row9   162  154   48   15    1  125   62  109   13    85   121   110    46 #> Row8   142   33  190   36  135  182   63  111   79   108     2    83     9 #> Row7    69  171   88   44   20  148  167  103  122    94   101   164     3 #> Row6    57   22  126   50  106  202    3  159  176    82     8   189    73 #> Row5   193   90    4  130  187  124  178   98   21   170   200   181    89 #> Row4     4  174  147  138   42  151  139  149  185   117   153    71    64 #> Row3   136    5   60   29  112   12   68    2   38   161   177    39   119 #> Row2    99   43  144    3  165   18  168   77  114    84   203   143    59 #> Row1   123    2   27  133  118   54   67   47   96     2    24   120   102 #>       Col14 Col15 Col16 Col17 Col18 Col19 Col20 Col21 Col22 #> Row10    74    26    58    11     6   158   180   194   113 #> Row9    196   166    37   172    95     3    92    80   145 #> Row8    155   107     4    76   129    10   169   104   173 #> Row7     49    51    53   195     7    65    81     4   199 #> Row6    127    40    45    61     4    17    25   184    32 #> Row5    201   175   128     1   198   163   204   152   160 #> Row4    134   146   192   105   157    56     1    35    19 #> Row3    183    78   100    41    28    97   137   188     1 #> Row2    116     2    72    66   156    93    16   191    86 #> Row1     30   131    23    52    55   150    87    14   115 #>  OptimAd2$plotNumber #> [[1]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]  320  319  318  317  316  315  314  313  312   311   310   309   308 #>  [2,]  277  278  279  280  281  282  283  284  285   286   287   288   289 #>  [3,]  276  275  274  273  272  271  270  269  268   267   266   265   264 #>  [4,]  233  234  235  236  237  238  239  240  241   242   243   244   245 #>  [5,]  232  231  230  229  228  227  226  225  224   223   222   221   220 #>  [6,]  189  190  191  192  193  194  195  196  197   198   199   200   201 #>  [7,]  188  187  186  185  184  183  182  181  180   179   178   177   176 #>  [8,]  145  146  147  148  149  150  151  152  153   154   155   156   157 #>  [9,]  144  143  142  141  140  139  138  137  136   135   134   133   132 #> [10,]  101  102  103  104  105  106  107  108  109   110   111   112   113 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] #>  [1,]   307   306   305   304   303   302   301   300   299 #>  [2,]   290   291   292   293   294   295   296   297   298 #>  [3,]   263   262   261   260   259   258   257   256   255 #>  [4,]   246   247   248   249   250   251   252   253   254 #>  [5,]   219   218   217   216   215   214   213   212   211 #>  [6,]   202   203   204   205   206   207   208   209   210 #>  [7,]   175   174   173   172   171   170   169   168   167 #>  [8,]   158   159   160   161   162   163   164   165   166 #>  [9,]   131   130   129   128   127   126   125   124   123 #> [10,]   114   115   116   117   118   119   120   121   122 #>  head(OptimAd2$fieldBook,12) #>    ID   EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT #> 1   1 20YWA2    MINOT 2022  101   1      1      0   123      G123 #> 2   2 20YWA2    MINOT 2022  102   1      2      2     2       CH2 #> 3   3 20YWA2    MINOT 2022  103   1      3      0    27       G27 #> 4   4 20YWA2    MINOT 2022  104   1      4      0   133      G133 #> 5   5 20YWA2    MINOT 2022  105   1      5      0   118      G118 #> 6   6 20YWA2    MINOT 2022  106   1      6      0    54       G54 #> 7   7 20YWA2    MINOT 2022  107   1      7      0    67       G67 #> 8   8 20YWA2    MINOT 2022  108   1      8      0    47       G47 #> 9   9 20YWA2    MINOT 2022  109   1      9      0    96       G96 #> 10 10 20YWA2    MINOT 2022  110   1     10      2     2       CH2 #> 11 11 20YWA2    MINOT 2022  111   1     11      0    24       G24 #> 12 12 20YWA2    MINOT 2022  112   1     12      0   120      G120"},{"path":"https://didiermurillof.github.io/FielDHub/reference/partially_replicated.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Spatial Partially Replicated Arrangement Design — partially_replicated","title":"Generates a Spatial Partially Replicated Arrangement Design — partially_replicated","text":"Randomly generates spatial partially replicated design, distance  checks maximized way row column control plots.  Note design generation needs dimension field (number rows columns).","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/partially_replicated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Spatial Partially Replicated Arrangement Design — partially_replicated","text":"","code":"partially_replicated(   nrows = NULL,   ncols = NULL,   repGens = NULL,   repUnits = NULL,   planter = \"serpentine\",   l = 1,   plotNumber = 101,   seed = NULL,   exptName = NULL,   locationNames = NULL,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/partially_replicated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Spatial Partially Replicated Arrangement Design — partially_replicated","text":"nrows Number rows field. ncols Number columns field. repGens Numeric vector amount genotypes replicate. repUnits Numeric vector number reps genotype. planter Option serpentine cartesian movement. default  planter = 'serpentine'. l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. seed (optional) Real number specifies starting seed obtain reproducible designs. exptName (optional) Name experiment. locationNames (optional) Name location. data (optional) Dataframe 3 columns: ENTRY | NAME | REPS.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/partially_replicated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Spatial Partially Replicated Arrangement Design — partially_replicated","text":"list five elements. infoDesign list information design parameters. layoutRandom matrix randomization layout. plotNumber matrix layout plot number. dataEntry data frame data input. genEntries list entries replicated replicated part. fieldBook data frame field book design. includes index (Row, Column).","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/partially_replicated.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Spatial Partially Replicated Arrangement Design — partially_replicated","text":"Cullis, S., B. R., & Coombes, N. E. (2006). design early generation variety trials correlated data. Journal Agricultural, Biological, Environmental Statistics, 11, 381–393. https://doi.org/10.1198/108571106X154443","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/partially_replicated.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Spatial Partially Replicated Arrangement Design — partially_replicated","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/partially_replicated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Spatial Partially Replicated Arrangement Design — partially_replicated","text":"","code":"# Example 1: Generates a spatial optimized partially replicated arrangement design in one  # location with 312 genotypes for a field with dimensions 15 rows x 28 cols.  # Note that there are 250 genotypes unreplicated (only one time), 50 genotypes replicated  # two times, and 10 genotypes replicated three times, and two checks 20 times each one. SpatpREP1 <- partially_replicated(   nrows = 15,    ncols = 28,     repGens = c(250,50,10,1,1),   repUnits = c(1,2,3,20,20),   planter = \"cartesian\",    plotNumber = 101,   seed = 77  ) SpatpREP1$infoDesign #> $rows #> [1] 15 #>  #> $columns #> [1] 28 #>  #> $treatments_with_reps #> [1] 62 #>  #> $treatments_with_no_reps #> [1] 250 #>  #> $locations #> [1] 1 #>  #> $planter #> [1] \"cartesian\" #>  #> $seed #> [1] 77 #>  #> $id_design #> [1] 13 #>  SpatpREP1$layoutRandom #> [[1]] #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 Col13 #> Row15    2  190  118  200  242  298   45  269  265    33    55    17   248 #> Row14  257  191    1    2    2  123  171  206  137     1     1   172    40 #> Row13   22  167    2  244   42   45   67   89  229   117   294   142    70 #> Row12    8  243   34    2  177  155  267   63   58    75   130    39   146 #> Row11  106  122   14  310   81  141   60  204  129   144    50    65     9 #> Row10  278  179  199   25   27   32   47   18   48   296   276    53    48 #> Row9    26  147  115  223  297   13  186  236   54    80     1   143   193 #> Row8     1    6   79  108  100   73    4   69  224   251   234    35    16 #> Row7   301  252  250   87    1   34  192    2  295   131   198   238     5 #> Row6   258   40  259  312  280  110  116   12    2   203    19    46   293 #> Row5    72    2  151   36  256  196  305  148  126     3   274   205     2 #> Row4   162    2    6  107   41  218   20   15   24    38    59   134   281 #> Row3   272  124  173   43  232   62  170   47  201     9   240    84   208 #> Row2    56   13    3  228    1    2  158  145   46    36   285    33    97 #> Row1   109   14   11   39  275  254    1   58  157   253   159   185   165 #>       Col14 Col15 Col16 Col17 Col18 Col19 Col20 Col21 Col22 Col23 Col24 Col25 #> Row15   270    44     1    26   120    49   299     1    96   189   184    24 #> Row14    20   182    99    44   219     2   178   261     1   209    23   213 #> Row13   246    60   222     2   226   188    31   217   181   211    71    32 #> Row12   140   132   279   160    86   303   197     1    61     2   125    37 #> Row11   153    94    30    74    57    78     1   210    85    27    68    54 #> Row10   154   291     1    10   114   287   119   230    21   150   277   249 #> Row9      2     1     4   290    25    28   156   286     7   247    82   104 #> Row8      8   311    76   121    90   288    11    30     9   220     1   194 #> Row7      2     2    93   233   307    15   283    28   212    52   152    66 #> Row6      7   113   111    41    61   161     8   241   133    55    95   237 #> Row5    264    51   202    52     2   262   273     1   239    51     6   183 #> Row4    164   221    23   255    64   139   282     3   207   302   175   214 #> Row3     10   260     5   102    11    77     1    29   289   300    43     1 #> Row2    266   127   187   105     4    29   271   215   195     5    57    98 #> Row1     88    56   149   227   174    50    12   128    10   180    53    19 #>       Col26 Col27 Col28 #> Row15    35   245   231 #> Row14     1   268    42 #> Row13   306    62    37 #> Row12    16   103    38 #> Row11   138   292   163 #> Row10   176   135   136 #> Row9    304    17   216 #> Row8    284     2   235 #> Row7     18    83   168 #> Row6     49    22     7 #> Row5    101    21   112 #> Row4    308    31     2 #> Row3    309   263    59 #> Row2    225   169    91 #> Row1     12    92   166 #>  SpatpREP1$plotNumber #> [[1]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]  493  494  495  496  497  498  499  500  501   502   503   504   505 #>  [2,]  465  466  467  468  469  470  471  472  473   474   475   476   477 #>  [3,]  437  438  439  440  441  442  443  444  445   446   447   448   449 #>  [4,]  409  410  411  412  413  414  415  416  417   418   419   420   421 #>  [5,]  381  382  383  384  385  386  387  388  389   390   391   392   393 #>  [6,]  353  354  355  356  357  358  359  360  361   362   363   364   365 #>  [7,]  325  326  327  328  329  330  331  332  333   334   335   336   337 #>  [8,]  297  298  299  300  301  302  303  304  305   306   307   308   309 #>  [9,]  269  270  271  272  273  274  275  276  277   278   279   280   281 #> [10,]  241  242  243  244  245  246  247  248  249   250   251   252   253 #> [11,]  213  214  215  216  217  218  219  220  221   222   223   224   225 #> [12,]  185  186  187  188  189  190  191  192  193   194   195   196   197 #> [13,]  157  158  159  160  161  162  163  164  165   166   167   168   169 #> [14,]  129  130  131  132  133  134  135  136  137   138   139   140   141 #> [15,]  101  102  103  104  105  106  107  108  109   110   111   112   113 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] #>  [1,]   506   507   508   509   510   511   512   513   514   515   516   517 #>  [2,]   478   479   480   481   482   483   484   485   486   487   488   489 #>  [3,]   450   451   452   453   454   455   456   457   458   459   460   461 #>  [4,]   422   423   424   425   426   427   428   429   430   431   432   433 #>  [5,]   394   395   396   397   398   399   400   401   402   403   404   405 #>  [6,]   366   367   368   369   370   371   372   373   374   375   376   377 #>  [7,]   338   339   340   341   342   343   344   345   346   347   348   349 #>  [8,]   310   311   312   313   314   315   316   317   318   319   320   321 #>  [9,]   282   283   284   285   286   287   288   289   290   291   292   293 #> [10,]   254   255   256   257   258   259   260   261   262   263   264   265 #> [11,]   226   227   228   229   230   231   232   233   234   235   236   237 #> [12,]   198   199   200   201   202   203   204   205   206   207   208   209 #> [13,]   170   171   172   173   174   175   176   177   178   179   180   181 #> [14,]   142   143   144   145   146   147   148   149   150   151   152   153 #> [15,]   114   115   116   117   118   119   120   121   122   123   124   125 #>       [,26] [,27] [,28] #>  [1,]   518   519   520 #>  [2,]   490   491   492 #>  [3,]   462   463   464 #>  [4,]   434   435   436 #>  [5,]   406   407   408 #>  [6,]   378   379   380 #>  [7,]   350   351   352 #>  [8,]   322   323   324 #>  [9,]   294   295   296 #> [10,]   266   267   268 #> [11,]   238   239   240 #> [12,]   210   211   212 #> [13,]   182   183   184 #> [14,]   154   155   156 #> [15,]   126   127   128 #>  head(SpatpREP1$fieldBook,12) #>    ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT #> 1   1 Expt1        1 2022  101   1      1      0   109      G109 #> 2   2 Expt1        1 2022  102   1      2     14    14       G14 #> 3   3 Expt1        1 2022  103   1      3     11    11       G11 #> 4   4 Expt1        1 2022  104   1      4     39    39       G39 #> 5   5 Expt1        1 2022  105   1      5      0   275      G275 #> 6   6 Expt1        1 2022  106   1      6      0   254      G254 #> 7   7 Expt1        1 2022  107   1      7      1     1        G1 #> 8   8 Expt1        1 2022  108   1      8     58    58       G58 #> 9   9 Expt1        1 2022  109   1      9      0   157      G157 #> 10 10 Expt1        1 2022  110   1     10      0   253      G253 #> 11 11 Expt1        1 2022  111   1     11      0   159      G159 #> 12 12 Expt1        1 2022  112   1     12      0   185      G185  # Example 2: Generates a spatial optimized partially replicated arrangement design with 492  # genotypes in a field with dimensions 30 rows x 20 cols. Note that there 384 genotypes  # unreplicated (only one time), 108 genotypes replicated two times.  # In this case we don't have check plots. # As example, we set up the data option with the entries list. NAME <- paste(\"G\", 1:492, sep = \"\") repGens = c(108, 384);repUnits = c(2,1) REPS <- rep(repUnits, repGens) treatment_list <- data.frame(list(ENTRY = 1:492, NAME = NAME, REPS = REPS)) head(treatment_list, 12)  #>    ENTRY NAME REPS #> 1      1   G1    2 #> 2      2   G2    2 #> 3      3   G3    2 #> 4      4   G4    2 #> 5      5   G5    2 #> 6      6   G6    2 #> 7      7   G7    2 #> 8      8   G8    2 #> 9      9   G9    2 #> 10    10  G10    2 #> 11    11  G11    2 #> 12    12  G12    2 tail(treatment_list, 12) #>     ENTRY NAME REPS #> 481   481 G481    1 #> 482   482 G482    1 #> 483   483 G483    1 #> 484   484 G484    1 #> 485   485 G485    1 #> 486   486 G486    1 #> 487   487 G487    1 #> 488   488 G488    1 #> 489   489 G489    1 #> 490   490 G490    1 #> 491   491 G491    1 #> 492   492 G492    1 SpatpREP2 <- partially_replicated(nrows = 30,                                    ncols = 20,                                    planter = \"serpentine\",                                    plotNumber = 101,                                   seed = 41,                                   data = treatment_list) #> [1] 600 SpatpREP2$infoDesign #> $rows #> [1] 30 #>  #> $columns #> [1] 20 #>  #> $treatments_with_reps #> [1] 108 #>  #> $treatments_with_no_reps #> [1] 384 #>  #> $locations #> [1] 1 #>  #> $planter #> [1] \"serpentine\" #>  #> $seed #> [1] 41 #>  #> $id_design #> [1] 13 #>  SpatpREP2$layoutRandom #> [[1]] #>       Col1 Col2 Col3 Col4 Col5 Col6 Col7 Col8 Col9 Col10 Col11 Col12 Col13 #> Row30  345  178    8  158  211   89   70  236   83   342   292   234    42 #> Row29  286  131   75  104  228   87   77  249  395   308    59   313    52 #> Row28  420  471    6  129  213  402  253   61  260   426    47   392   133 #> Row27  195  146   10  338  433  215  413   16  317    14   394    77    33 #> Row26  287  360  107  454   32  453    5  477  489   149   166    36   369 #> Row25  285  365  169  180  314  290    7   86  460   172    56   153   105 #> Row24   18  456   37  188  305   31  238   40  363   208   459   349   274 #> Row23   62   63   88  490   55  385  210  252  440    92   357   174   488 #> Row22  396   66  318   74  421  108  204   91   32   299    60   128   320 #> Row21   80  254  157   51  321  461  400  344  467   275   309    87   209 #> Row20  428   58   67  106  103  409   76   48   45   377   201   462   110 #> Row19  447   84  173  156   69   62  343  182  388    93   370   330    43 #> Row18   49   20  221   56  256   23   64  304  258    19   416   227   271 #> Row17  387  482   98   48  379   38  176  109  122    50   481   346   220 #> Row16  261  183  291   35   65   89  245  101  198    99   102    17   378 #> Row15  130  478  418  415   88   37   73  410   74   232   427   381   233 #> Row14  443  121  217   68   82  430  123  452  288   114   207    22    85 #> Row13  393  140  386  289  417  257   38  425   44     7   331    65   137 #> Row12  102  163  187  422  355  150   14  262   45    42     3   431   340 #> Row11  438   55  139  356  272  277  127  177    9   480   406    81    22 #> Row10  371    4  293  278  362   96  332  203  325   397    54    52   212 #> Row9    64  105  270  205  190   80  383  106   85   403   148    49   411 #> Row8   251   41  337    2  191  284   82  366  484   239    46    34   136 #> Row7     2   19  359  224  323  374   96   25  269    72   380   441    95 #> Row6   429  222  125  483   28  263  449   97   13    79   265   326   243 #> Row5   101  246  432   35  465  486  218  466    6   175   145   200    92 #> Row4   179  120  165   63  113  341  241  458  126     3   398   404    50 #> Row3    61  391   59  141  470  384  455  298   11   117     9    18    73 #> Row2   124   98   90  138   66  352  242  439  434   333    68   487   267 #> Row1    24  247  336  368   26  339  350  367  297   189    12   348   181 #>       Col14 Col15 Col16 Col17 Col18 Col19 Col20 #> Row30   335    28   193   196   310    24   472 #> Row29   382   435   283   451   444   319    71 #> Row28   401    10    76    29   282    46   328 #> Row27    25   436   408   111    16    51   457 #> Row26   375     1   358    58   108   300   273 #> Row25    53   334    79   206    86   312    13 #> Row24   303   160   414    78   115   155    72 #> Row23    83   450   159   295   281   464   474 #> Row22    21    26   266   135   324   170   255 #> Row21   229    41   307   353    39   216    33 #> Row20   361   202    30   259   399   276   162 #> Row19   448    90    75   103   240   405   264 #> Row18   144   407    36   469   147   100   372 #> Row17    69   327   134    40     4   491   468 #> Row16   389   419   118   112   424   479   437 #> Row15    71   412   364   316    39   104   164 #> Row14   184   219    94   446   154    44   279 #> Row13    60    11    94   423   197   390    47 #> Row12   167   306   315    70   311    67    31 #> Row11    81   442   347   116   376    78    57 #> Row10    27    57    84   248     8   230   142 #> Row9    280   226   294   107    27    95   268 #> Row8    475   492   354    12   192   151   152 #> Row7    171    53   237   301    23   231   225 #> Row6    329   223    91   132   186   250     5 #> Row5    161   463    15    99    20   445   476 #> Row4     54   100   185    17   119    15    30 #> Row3    473   302    43   244   143   199   373 #> Row2    485   296   322   351    34    29    93 #> Row1     21     1   235    97   214   194   168 #>  SpatpREP2$plotNumber #> [[1]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #>  [1,]  700  699  698  697  696  695  694  693  692   691   690   689   688 #>  [2,]  661  662  663  664  665  666  667  668  669   670   671   672   673 #>  [3,]  660  659  658  657  656  655  654  653  652   651   650   649   648 #>  [4,]  621  622  623  624  625  626  627  628  629   630   631   632   633 #>  [5,]  620  619  618  617  616  615  614  613  612   611   610   609   608 #>  [6,]  581  582  583  584  585  586  587  588  589   590   591   592   593 #>  [7,]  580  579  578  577  576  575  574  573  572   571   570   569   568 #>  [8,]  541  542  543  544  545  546  547  548  549   550   551   552   553 #>  [9,]  540  539  538  537  536  535  534  533  532   531   530   529   528 #> [10,]  501  502  503  504  505  506  507  508  509   510   511   512   513 #> [11,]  500  499  498  497  496  495  494  493  492   491   490   489   488 #> [12,]  461  462  463  464  465  466  467  468  469   470   471   472   473 #> [13,]  460  459  458  457  456  455  454  453  452   451   450   449   448 #> [14,]  421  422  423  424  425  426  427  428  429   430   431   432   433 #> [15,]  420  419  418  417  416  415  414  413  412   411   410   409   408 #> [16,]  381  382  383  384  385  386  387  388  389   390   391   392   393 #> [17,]  380  379  378  377  376  375  374  373  372   371   370   369   368 #> [18,]  341  342  343  344  345  346  347  348  349   350   351   352   353 #> [19,]  340  339  338  337  336  335  334  333  332   331   330   329   328 #> [20,]  301  302  303  304  305  306  307  308  309   310   311   312   313 #> [21,]  300  299  298  297  296  295  294  293  292   291   290   289   288 #> [22,]  261  262  263  264  265  266  267  268  269   270   271   272   273 #> [23,]  260  259  258  257  256  255  254  253  252   251   250   249   248 #> [24,]  221  222  223  224  225  226  227  228  229   230   231   232   233 #> [25,]  220  219  218  217  216  215  214  213  212   211   210   209   208 #> [26,]  181  182  183  184  185  186  187  188  189   190   191   192   193 #> [27,]  180  179  178  177  176  175  174  173  172   171   170   169   168 #> [28,]  141  142  143  144  145  146  147  148  149   150   151   152   153 #> [29,]  140  139  138  137  136  135  134  133  132   131   130   129   128 #> [30,]  101  102  103  104  105  106  107  108  109   110   111   112   113 #>       [,14] [,15] [,16] [,17] [,18] [,19] [,20] #>  [1,]   687   686   685   684   683   682   681 #>  [2,]   674   675   676   677   678   679   680 #>  [3,]   647   646   645   644   643   642   641 #>  [4,]   634   635   636   637   638   639   640 #>  [5,]   607   606   605   604   603   602   601 #>  [6,]   594   595   596   597   598   599   600 #>  [7,]   567   566   565   564   563   562   561 #>  [8,]   554   555   556   557   558   559   560 #>  [9,]   527   526   525   524   523   522   521 #> [10,]   514   515   516   517   518   519   520 #> [11,]   487   486   485   484   483   482   481 #> [12,]   474   475   476   477   478   479   480 #> [13,]   447   446   445   444   443   442   441 #> [14,]   434   435   436   437   438   439   440 #> [15,]   407   406   405   404   403   402   401 #> [16,]   394   395   396   397   398   399   400 #> [17,]   367   366   365   364   363   362   361 #> [18,]   354   355   356   357   358   359   360 #> [19,]   327   326   325   324   323   322   321 #> [20,]   314   315   316   317   318   319   320 #> [21,]   287   286   285   284   283   282   281 #> [22,]   274   275   276   277   278   279   280 #> [23,]   247   246   245   244   243   242   241 #> [24,]   234   235   236   237   238   239   240 #> [25,]   207   206   205   204   203   202   201 #> [26,]   194   195   196   197   198   199   200 #> [27,]   167   166   165   164   163   162   161 #> [28,]   154   155   156   157   158   159   160 #> [29,]   127   126   125   124   123   122   121 #> [30,]   114   115   116   117   118   119   120 #>  head(SpatpREP2$fieldBook,10) #>    ID  EXPT LOCATION YEAR PLOT ROW COLUMN CHECKS ENTRY TREATMENT #> 1   1 Expt1        1 2022  101   1      1     24    24       G24 #> 2   2 Expt1        1 2022  102   1      2      0   247      G247 #> 3   3 Expt1        1 2022  103   1      3      0   336      G336 #> 4   4 Expt1        1 2022  104   1      4      0   368      G368 #> 5   5 Expt1        1 2022  105   1      5     26    26       G26 #> 6   6 Expt1        1 2022  106   1      6      0   339      G339 #> 7   7 Expt1        1 2022  107   1      7      0   350      G350 #> 8   8 Expt1        1 2022  108   1      8      0   367      G367 #> 9   9 Expt1        1 2022  109   1      9      0   297      G297 #> 10 10 Expt1        1 2022  110   1     10      0   189      G189"},{"path":"https://didiermurillof.github.io/FielDHub/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://didiermurillof.github.io/FielDHub/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"return value, called side effects.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/plot.FielDHub.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a FielDHub object — plot.FielDHub","title":"Plot a FielDHub object — plot.FielDHub","text":"Draw field layout plot FielDHub object.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/plot.FielDHub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a FielDHub object — plot.FielDHub","text":"","code":"# S3 method for FielDHub plot(x, ...)"},{"path":"https://didiermurillof.github.io/FielDHub/reference/plot.FielDHub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a FielDHub object — plot.FielDHub","text":"x object inheriting class FielDHub ... arguments passed utility function plot_layout(). layout integer. Options available depend    type design characteristics l integer specify location plot. planter can serpentine cartesian. stacked can vertical horizontal stacked layout.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/plot.FielDHub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a FielDHub object — plot.FielDHub","text":"plot object inheriting class fieldLayout field_book data frame fieldbook includes coordinates ROW COLUMN.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/plot.FielDHub.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a FielDHub object — plot.FielDHub","text":"Didier Murillo [aut]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/plot.FielDHub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a FielDHub object — plot.FielDHub","text":"","code":"if (FALSE) { # Example 1: Plot a RCBD design with 24 treatments and 3 reps. s <- RCBD(t = 24, reps = 3, plotNumber = 101, seed = 12) plot(s) }"},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.FielDHub.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a FielDHub object — print.FielDHub","title":"Print a FielDHub object — print.FielDHub","text":"Prints information FielDHub function.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.FielDHub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a FielDHub object — print.FielDHub","text":"","code":"# S3 method for FielDHub print(x, n, ...)"},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.FielDHub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a FielDHub object — print.FielDHub","text":"x object inheriting class n single integer. positive zero, size resulting object: number elements vector (including lists), rows matrix data frame lines function. negative, n last/first number elements x. ... arguments passed head.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.FielDHub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a FielDHub object — print.FielDHub","text":"object inheriting class FielDHub","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.FielDHub.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a FielDHub object — print.FielDHub","text":"Thiago de Paula Oliveira,   thiago.paula.oliveira@alumni.usp.br [aut],   Didier Murillo [aut]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.FielDHub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a FielDHub object — print.FielDHub","text":"","code":"# Example 1: Generates a CRD design with 5 treatments and 5 reps each. crd1 <- CRD(t = 5, reps = 5, plotNumber = 101, seed = 1985, locationName = \"Fargo\") crd1$infoDesign #> $numberofTreatments #> [1] 5 #>  #> $treatments #> [1] \"T1\" \"T2\" \"T3\" \"T4\" \"T5\" #>  #> $Reps #> [1] 5 #>  #> $locationName #> [1] \"Fargo\" #>  #> $seed #> [1] 1985 #>  #> $id_design #> [1] 1 #>  print(crd1) #> Completely Randomized Design (CRD)  #>  #> Information on the design parameters:  #> List of 5 #>  $ numberofTreatments: num 5 #>  $ treatments        : chr [1:5] \"T1\" \"T2\" \"T3\" \"T4\" ... #>  $ Reps              : num 5 #>  $ locationName      : chr \"Fargo\" #>  $ seed              : num 1985 #>  #>  10 First observations of the data frame with the CRD field book:  #>    ID LOCATION PLOT REP TREATMENT #> 1   1    Fargo  101   3        T3 #> 2   2    Fargo  102   4        T2 #> 3   3    Fargo  103   2        T1 #> 4   4    Fargo  104   3        T5 #> 5   5    Fargo  105   2        T5 #> 6   6    Fargo  106   2        T4 #> 7   7    Fargo  107   4        T3 #> 8   8    Fargo  108   5        T4 #> 9   9    Fargo  109   1        T2 #> 10 10    Fargo  110   5        T1"},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.fieldLayout.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a fieldLayout plot object — print.fieldLayout","title":"Print a fieldLayout plot object — print.fieldLayout","text":"Prints plot object class fieldLayout.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.fieldLayout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a fieldLayout plot object — print.fieldLayout","text":"","code":"# S3 method for fieldLayout print(x, ...)"},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.fieldLayout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a fieldLayout plot object — print.fieldLayout","text":"x plot object inheriting class fieldLayout. ... unused, extensibility.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.fieldLayout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a fieldLayout plot object — print.fieldLayout","text":"plot object inheriting class fieldLayout.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.fieldLayout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a fieldLayout plot object — print.fieldLayout","text":"Didier Murillo [aut]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.summary.FielDHub.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the summary of a FielDHub object — print.summary.FielDHub","title":"Print the summary of a FielDHub object — print.summary.FielDHub","text":"Print summary information design parameters,   data frame structure","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.summary.FielDHub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the summary of a FielDHub object — print.summary.FielDHub","text":"","code":"# S3 method for summary.FielDHub print(x, ...)"},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.summary.FielDHub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the summary of a FielDHub object — print.summary.FielDHub","text":"x object inheriting class FielDHub ... Unused, extensibility","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.summary.FielDHub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the summary of a FielDHub object — print.summary.FielDHub","text":"object inheriting class FielDHub","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/print.summary.FielDHub.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print the summary of a FielDHub object — print.summary.FielDHub","text":"Thiago de Paula Oliveira,   thiago.paula.oliveira@alumni.usp.br [aut],   Didier Murillo [aut]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/rectangular_lattice.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Rectangular Lattice Design. — rectangular_lattice","title":"Generates a Rectangular Lattice Design. — rectangular_lattice","text":"randomly generates rectangular lattice design across locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/rectangular_lattice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Rectangular Lattice Design. — rectangular_lattice","text":"","code":"rectangular_lattice(   t = NULL,   k = NULL,   r = NULL,   l = 1,   plotNumber = 101,   locationNames = NULL,   seed = NULL,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/rectangular_lattice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Rectangular Lattice Design. — rectangular_lattice","text":"t Number  treatments. k Size incomplete blocks (number units per incomplete block). r Number blocks (full resolvable replicates). l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. locationNames (optional) Names location. seed (optional) Real number specifies starting seed obtain reproducible designs. data (optional) Data frame label list treatments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/rectangular_lattice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Rectangular Lattice Design. — rectangular_lattice","text":"list two elements. infoDesign list information design parameters. fieldBook data frame rectangular lattice design field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/rectangular_lattice.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Rectangular Lattice Design. — rectangular_lattice","text":"Edmondson., R. N. (2021). blocksdesign: Nested crossed block designs factorial unstructured treatment sets. https://CRAN.R-project.org/package=blocksdesign","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/rectangular_lattice.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Rectangular Lattice Design. — rectangular_lattice","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/rectangular_lattice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Rectangular Lattice Design. — rectangular_lattice","text":"","code":"# Example 1: Generates a rectangular lattice design with 6 full blocks, 4 units per IBlock (k) # and 20 treatments in one location. rectangularLattice1 <- rectangular_lattice(t = 20, k = 4, r = 6, l = 1,                                             plotNumber = 101,                                            locationNames = \"FARGO\",                                             seed = 126) rectangularLattice1$infoDesign #> $Reps #> [1] 6 #>  #> $iBlocks #> [1] 5 #>  #> $NumberTreatments #> [1] 20 #>  #> $NumberLocations #> [1] 1 #>  #> $Locations #> [1] \"FARGO\" #>  #> $seed #> [1] 126 #>  #> $lambda #> [1] 0.9473684 #>  #> $id_design #> [1] 11 #>  head(rectangularLattice1$fieldBook,12) #>    ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT #> 1   1    FARGO  101   1      1    1    15      G-15 #> 2   2    FARGO  102   1      1    2    13      G-13 #> 3   3    FARGO  103   1      1    3    12      G-12 #> 4   4    FARGO  104   1      1    4    16      G-16 #> 5   5    FARGO  105   1      2    1    19      G-19 #> 6   6    FARGO  106   1      2    2    17      G-17 #> 7   7    FARGO  107   1      2    3    10      G-10 #> 8   8    FARGO  108   1      2    4    14      G-14 #> 9   9    FARGO  109   1      3    1    11      G-11 #> 10 10    FARGO  110   1      3    2     8       G-8 #> 11 11    FARGO  111   1      3    3     5       G-5 #> 12 12    FARGO  112   1      3    4    20      G-20  # Example 2: Generates a rectangular lattice design with 5 full blocks, 7 units per IBlock (k) # and 56 treatments across 2 locations. # In this case, we show how to use the option data. treatments <- paste(\"ND-\", 1:56, sep = \"\") ENTRY <- 1:56 treatment_list <- data.frame(list(ENTRY = ENTRY, TREATMENT = treatments)) head(treatment_list)  #>   ENTRY TREATMENT #> 1     1      ND-1 #> 2     2      ND-2 #> 3     3      ND-3 #> 4     4      ND-4 #> 5     5      ND-5 #> 6     6      ND-6 rectangularLattice2 <- rectangular_lattice(t = 56, k = 7, r = 5, l = 2,                                             plotNumber = c(1001,2001),                                            locationNames = c(\"Loc1\", \"Loc2\"),                                             seed = 127,                                            data = treatment_list) rectangularLattice2$infoDesign #> $Reps #> [1] 5 #>  #> $iBlocks #> [1] 8 #>  #> $NumberTreatments #> [1] 56 #>  #> $NumberLocations #> [1] 2 #>  #> $Locations #> [1] \"LOC1\" \"LOC2\" #>  #> $seed #> [1] 127 #>  #> $lambda #> [1] 0.5454545 #>  #> $id_design #> [1] 11 #>  head(rectangularLattice2$fieldBook,12) #>    ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT #> 1   1     LOC1 1001   1      1    1     8      ND-8 #> 2   2     LOC1 1002   1      1    2    35     ND-35 #> 3   3     LOC1 1003   1      1    3    52     ND-52 #> 4   4     LOC1 1004   1      1    4    29     ND-29 #> 5   5     LOC1 1005   1      1    5    41     ND-41 #> 6   6     LOC1 1006   1      1    6    22     ND-22 #> 7   7     LOC1 1007   1      1    7    10     ND-10 #> 8   8     LOC1 1008   1      2    1    45     ND-45 #> 9   9     LOC1 1009   1      2    2    11     ND-11 #> 10 10     LOC1 1010   1      2    3     6      ND-6 #> 11 11     LOC1 1011   1      2    4    25     ND-25 #> 12 12     LOC1 1012   1      2    5    34     ND-34"},{"path":"https://didiermurillof.github.io/FielDHub/reference/row_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Resolvable Row-Column Design (RowColD) — row_column","title":"Generates a Resolvable Row-Column Design (RowColD) — row_column","text":"randomly generates resolvable row-column designs (RowColD).  Note design optimization done level rows columns;  hence, design suboptimal. randomization can done across locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/row_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Resolvable Row-Column Design (RowColD) — row_column","text":"","code":"row_column(   t = NULL,   nrows = NULL,   r = NULL,   l = 1,   plotNumber = 101,   locationNames = NULL,   seed = NULL,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/row_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Resolvable Row-Column Design (RowColD) — row_column","text":"t Number  treatments. nrows Number rows full resolvable replicate. r Number blocks (full resolvable replicates). l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. locationNames (optional) Names location. seed (optional) Real number specifies starting seed obtain reproducible designs. data (optional) Data frame label list treatments","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/row_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Resolvable Row-Column Design (RowColD) — row_column","text":"list four elements. infoDesign list information design parameters. resolvableBlocks list resolvable row columns blocks. concurrence concurrence matrix. fieldBook data frame row-column field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/row_column.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Resolvable Row-Column Design (RowColD) — row_column","text":"Edmondson., R. N. (2021). blocksdesign: Nested crossed block designs factorial unstructured treatment sets. https://CRAN.R-project.org/package=blocksdesign","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/row_column.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Resolvable Row-Column Design (RowColD) — row_column","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/row_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Resolvable Row-Column Design (RowColD) — row_column","text":"","code":"# Example 1: Generates a row-column design with 3 full blocks and 36 treatments # and 6 rows. This for one location. rowcold1 <- row_column(t = 36, nrows = 6, r = 3, l = 1,                         plotNumber= 101,                         locationNames = \"Loc1\",                        seed = 21) rowcold1$infoDesign #> $rows #> [1] 6 #>  #> $columns #> [1] 6 #>  #> $reps #> [1] 3 #>  #> $treatments #> [1] 36 #>  #> $locations #> [1] 1 #>  #> $location_names #> [1] \"Loc1\" #>  #> $seed #> [1] 21 #>  #> $id_design #> [1] 9 #>  rowcold1$resolvableBlocks #> $Loc_Loc1 #> $Loc_Loc1$rep1 #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]   11   16    9   36   14    1 #> [2,]   35    4    3   12    8   19 #> [3,]   17   28   15   24   20   25 #> [4,]    5   10   27   18   26    7 #> [5,]   29   34   21   30   32   31 #> [6,]   23   22   33    6    2   13 #>  #> $Loc_Loc1$rep2 #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]   17   20    1   27   10   34 #> [2,]   13   23    6   30   12   32 #> [3,]   16   24    2   25    7   33 #> [4,]   14   19    5   26    9   31 #> [5,]   15   22    4   28    8   36 #> [6,]   18   21    3   29   11   35 #>  #> $Loc_Loc1$rep3 #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]   33   13    4    6   32   10 #> [2,]    2    3    9   16   22   20 #> [3,]   23   29   14   21   12   36 #> [4,]   28    8   35   11   17    5 #> [5,]    7   34   19   26   27   25 #> [6,]   18   24   30   31    1   15 #>  #>  head(rowcold1$fieldBook,12) #>    ID LOCATION PLOT REP ROW COLUMN ENTRY TREATMENT #> 1   1     Loc1  101   1   1      1    11      G-11 #> 2   2     Loc1  102   1   1      2    16      G-16 #> 3   3     Loc1  103   1   1      3     9       G-9 #> 4   4     Loc1  104   1   1      4    36      G-36 #> 5   5     Loc1  105   1   1      5    14      G-14 #> 6   6     Loc1  106   1   1      6     1       G-1 #> 7   7     Loc1  107   1   2      1    35      G-35 #> 8   8     Loc1  108   1   2      2     4       G-4 #> 9   9     Loc1  109   1   2      3     3       G-3 #> 10 10     Loc1  110   1   2      4    12      G-12 #> 11 11     Loc1  111   1   2      5     8       G-8 #> 12 12     Loc1  112   1   2      6    19      G-19  # Example 2: Generates a row-column design with 3 full blocks and 30 treatments # and 5 rows, for one location. # In this case, we show how to use the option data. treatments <- paste(\"ND-\", 1:30, sep = \"\") ENTRY <- 1:30 treatment_list <- data.frame(list(ENTRY = ENTRY, TREATMENT = treatments)) head(treatment_list) #>   ENTRY TREATMENT #> 1     1      ND-1 #> 2     2      ND-2 #> 3     3      ND-3 #> 4     4      ND-4 #> 5     5      ND-5 #> 6     6      ND-6 rowcold2 <- row_column(t = 30, nrows = 5, r = 3, l = 1,                         plotNumber= c(101,1001),                         locationNames = c(\"A\", \"B\"),                        seed = 15,                        data = treatment_list) #> Warning: Since plotNumber was missing, it was set up to default values. #> Warning: Length of plot numbers is larger than number of locations. rowcold2$infoDesign #> $rows #> [1] 5 #>  #> $columns #> [1] 6 #>  #> $reps #> [1] 3 #>  #> $treatments #> [1] 30 #>  #> $locations #> [1] 1 #>  #> $location_names #> [1] 1 #>  #> $seed #> [1] 15 #>  #> $id_design #> [1] 9 #>  rowcold2$resolvableBlocks #> $Loc_1 #> $Loc_1$rep1 #>      [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    #> [1,] \"ND-28\" \"ND-1\"  \"ND-21\" \"ND-2\"  \"ND-30\" \"ND-18\" #> [2,] \"ND-16\" \"ND-11\" \"ND-24\" \"ND-29\" \"ND-19\" \"ND-22\" #> [3,] \"ND-4\"  \"ND-25\" \"ND-26\" \"ND-17\" \"ND-14\" \"ND-8\"  #> [4,] \"ND-5\"  \"ND-12\" \"ND-23\" \"ND-3\"  \"ND-13\" \"ND-10\" #> [5,] \"ND-27\" \"ND-7\"  \"ND-15\" \"ND-9\"  \"ND-6\"  \"ND-20\" #>  #> $Loc_1$rep2 #>      [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    #> [1,] \"ND-12\" \"ND-22\" \"ND-16\" \"ND-19\" \"ND-25\" \"ND-1\"  #> [2,] \"ND-14\" \"ND-4\"  \"ND-8\"  \"ND-9\"  \"ND-13\" \"ND-24\" #> [3,] \"ND-20\" \"ND-11\" \"ND-30\" \"ND-28\" \"ND-21\" \"ND-10\" #> [4,] \"ND-17\" \"ND-15\" \"ND-7\"  \"ND-18\" \"ND-5\"  \"ND-27\" #> [5,] \"ND-26\" \"ND-6\"  \"ND-29\" \"ND-23\" \"ND-3\"  \"ND-2\"  #>  #> $Loc_1$rep3 #>      [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    #> [1,] \"ND-23\" \"ND-14\" \"ND-16\" \"ND-13\" \"ND-7\"  \"ND-21\" #> [2,] \"ND-1\"  \"ND-28\" \"ND-6\"  \"ND-29\" \"ND-9\"  \"ND-8\"  #> [3,] \"ND-30\" \"ND-25\" \"ND-26\" \"ND-18\" \"ND-15\" \"ND-27\" #> [4,] \"ND-4\"  \"ND-22\" \"ND-10\" \"ND-24\" \"ND-5\"  \"ND-12\" #> [5,] \"ND-17\" \"ND-2\"  \"ND-3\"  \"ND-11\" \"ND-20\" \"ND-19\" #>  #>  head(rowcold2$fieldBook,12) #>    ID LOCATION PLOT REP ROW COLUMN ENTRY TREATMENT #> 1   1        1  101   1   1      1    28     ND-28 #> 2   2        1  102   1   1      2     1      ND-1 #> 3   3        1  103   1   1      3    21     ND-21 #> 4   4        1  104   1   1      4     2      ND-2 #> 5   5        1  105   1   1      5    30     ND-30 #> 6   6        1  106   1   1      6    18     ND-18 #> 7   7        1  107   1   2      1    16     ND-16 #> 8   8        1  108   1   2      2    11     ND-11 #> 9   9        1  109   1   2      3    24     ND-24 #> 10 10        1  110   1   2      4    29     ND-29 #> 11 11        1  111   1   2      5    19     ND-19 #> 12 12        1  112   1   2      6    22     ND-22"},{"path":"https://didiermurillof.github.io/FielDHub/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(...)"},{"path":"https://didiermurillof.github.io/FielDHub/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"... Unused, extensibility","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/run_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run the Shiny Application — run_app","text":"shiny app object","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_families.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a population of genotypes randomly into several locations. — split_families","title":"Split a population of genotypes randomly into several locations. — split_families","text":"Split population genotypes randomly several locations, aim approximatelly number replicates genotype, line treatment per location.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_families.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a population of genotypes randomly into several locations. — split_families","text":"","code":"split_families(l = NULL, data = NULL)"},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_families.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a population of genotypes randomly into several locations. — split_families","text":"l Number locations. data Data frame entry (ENTRY) labels treatment (NAME) number individuals per family group (FAMILY).","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_families.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a population of genotypes randomly into several locations. — split_families","text":"list two elements. rowsEachlist table summary cases. data_locations data frame entries location","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_families.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split a population of genotypes randomly into several locations. — split_families","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_families.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a population of genotypes randomly into several locations. — split_families","text":"","code":"# Example 1: Split a population of 3000 and 200 families into 8 locations.  # Original dataset is been simulated. set.seed(77) N <- 2000; families <- 100 ENTRY <- 1:N NAME <- paste0(\"SB-\", 1:N) FAMILY <- vector(mode = \"numeric\", length = N) x <- 1:N for (i in x) { FAMILY[i] <- sample(1:families, size = 1, replace = TRUE) } gen.list <- data.frame(list(ENTRY = ENTRY, NAME = NAME, FAMILY = FAMILY)) head(gen.list) #>   ENTRY NAME FAMILY #> 1     1 SB-1     18 #> 2     2 SB-2     45 #> 3     3 SB-3     69 #> 4     4 SB-4     57 #> 5     5 SB-5     37 #> 6     6 SB-6     29 # Now we are going to use the split_families() function. split_population <- split_families(l = 8, data = gen.list) #> Error in split_families(l = 8, data = gen.list): object 'gen.list' not found print(split_population) #> Error in print(split_population): object 'split_population' not found summary(split_population) #> Error in summary(split_population): object 'split_population' not found head(split_population$data_locations,12) #> Error in head(split_population$data_locations, 12): object 'split_population' not found"},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Split Plot Design — split_plot","title":"Generates a Split Plot Design — split_plot","text":"randomly generates split plot design (SPD) across locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Split Plot Design — split_plot","text":"","code":"split_plot(   wp = NULL,   sp = NULL,   reps = NULL,   type = 2,   l = 1,   plotNumber = 101,   seed = NULL,   locationNames = NULL,   factorLabels = TRUE,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Split Plot Design — split_plot","text":"wp Number whole plots, integer vector. sp Number sub plots per whole plot, integer vector. reps Number blocks (full replicates). type Option CRD RCBD designs. Values type = 1 (CRD) type = 2 (RCBD). default type = 2. l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. seed (optional) Real number specifies starting seed obtain reproducible designs. locationNames (optional) Names location. factorLabels (optional) TRUE retain levels labels original data set otherwise, numeric labels assigned. Default factorLabels =TRUE. data (optional) Data frame label list treatments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Split Plot Design — split_plot","text":"list two elements. infoDesign list information design parameters. fieldBook data frame split plot field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Split Plot Design — split_plot","text":"Federer, W. T. (1955). Experimental Design. Theory Application. New York, USA. Macmillan Company.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Split Plot Design — split_plot","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Split Plot Design — split_plot","text":"","code":"# Example 1: Generates a split plot design SPD with 4 whole plots, 2 sub plots per whole plot, # and 4 reps in an RCBD arrangement. This in for a single location. SPDExample1 <- split_plot(wp = 4, sp = 2, reps = 5, l = 1,                            plotNumber = 101,                            seed = 14,                           type = 2,                            locationNames = \"FARGO\") SPDExample1$infoDesign #> $WholePlots #> [1] 1 2 3 4 #>  #> $SubPlots #> [1] 1 2 #>  #> $locationNumber #> [1] 1 #>  #> $locationNames #> [1] \"FARGO\" #>  #> $plotNumbers #> [1] 101 #>  #> $typeDesign #> [1] \"RCBD\" #>  #> $seed #> [1] 14 #>  #> $id_design #> [1] 5 #>  SPDExample1$layoutlocations #> [[1]] #>       PLOT  REP Whole-plot Sub-plot #>  [1,] \"101\" \"1\" \"1\"        \"1 2\"    #>  [2,] \"102\" \"1\" \"4\"        \"2 1\"    #>  [3,] \"103\" \"1\" \"3\"        \"2 1\"    #>  [4,] \"104\" \"1\" \"2\"        \"2 1\"    #>  [5,] \"201\" \"2\" \"3\"        \"1 2\"    #>  [6,] \"202\" \"2\" \"2\"        \"2 1\"    #>  [7,] \"203\" \"2\" \"4\"        \"2 1\"    #>  [8,] \"204\" \"2\" \"1\"        \"2 1\"    #>  [9,] \"301\" \"3\" \"4\"        \"2 1\"    #> [10,] \"302\" \"3\" \"2\"        \"1 2\"    #> [11,] \"303\" \"3\" \"1\"        \"2 1\"    #> [12,] \"304\" \"3\" \"3\"        \"2 1\"    #> [13,] \"401\" \"4\" \"1\"        \"2 1\"    #> [14,] \"402\" \"4\" \"3\"        \"2 1\"    #> [15,] \"403\" \"4\" \"2\"        \"2 1\"    #> [16,] \"404\" \"4\" \"4\"        \"1 2\"    #> [17,] \"501\" \"5\" \"3\"        \"1 2\"    #> [18,] \"502\" \"5\" \"1\"        \"2 1\"    #> [19,] \"503\" \"5\" \"2\"        \"2 1\"    #> [20,] \"504\" \"5\" \"4\"        \"2 1\"    #>  head(SPDExample1$fieldBook,12) #>    ID LOCATION PLOT REP WHOLE_PLOT SUB_PLOT TRT_COMB #> 1   1    FARGO  101   1          1        1      1|1 #> 2   2    FARGO  101   1          1        2      1|2 #> 3   3    FARGO  102   1          4        2      4|2 #> 4   4    FARGO  102   1          4        1      4|1 #> 5   5    FARGO  103   1          3        2      3|2 #> 6   6    FARGO  103   1          3        1      3|1 #> 7   7    FARGO  104   1          2        2      2|2 #> 8   8    FARGO  104   1          2        1      2|1 #> 9   9    FARGO  201   2          3        1      3|1 #> 10 10    FARGO  201   2          3        2      3|2 #> 11 11    FARGO  202   2          2        2      2|2 #> 12 12    FARGO  202   2          2        1      2|1  # Example 2: Generates a split plot design SPD with 5 whole plots  # (4 types of fungicide + one control), 10 sub plots per whole plot (10 bean varieties),  # and 6 reps in an RCBD arrangement. This in 3 locations or sites. # In this case, we show how to use the option data. wp <- c(\"NFung\", paste(\"Fung\", 1:4, sep = \"\"))  # Fungicides (5 Whole plots) sp <- paste(\"Beans\", 1:10, sep = \"\")            # Beans varieties (10 sub plots) split_plot_Data <- data.frame(list(WHOLPLOT = c(wp, rep(NA, 5)), SUBPLOT = sp)) head(split_plot_Data, 12) #>    WHOLPLOT SUBPLOT #> 1     NFung  Beans1 #> 2     Fung1  Beans2 #> 3     Fung2  Beans3 #> 4     Fung3  Beans4 #> 5     Fung4  Beans5 #> 6      <NA>  Beans6 #> 7      <NA>  Beans7 #> 8      <NA>  Beans8 #> 9      <NA>  Beans9 #> 10     <NA> Beans10 SPDExample2 <- split_plot(reps = 6, l = 3,                            plotNumber = c(101, 1001, 2001),                           seed = 23,                            type = 2,                            locationNames = c(\"A\", \"B\", \"C\"),                           data = split_plot_Data) SPDExample2$infoDesign #> $WholePlots #> [1] \"NFung\" \"Fung1\" \"Fung2\" \"Fung3\" \"Fung4\" #>  #> $SubPlots #>  [1] \"Beans1\"  \"Beans2\"  \"Beans3\"  \"Beans4\"  \"Beans5\"  \"Beans6\"  \"Beans7\"  #>  [8] \"Beans8\"  \"Beans9\"  \"Beans10\" #>  #> $locationNumber #> [1] 3 #>  #> $locationNames #> [1] \"A\" \"B\" \"C\" #>  #> $plotNumbers #> [1]  101 1001 2001 #>  #> $typeDesign #> [1] \"RCBD\" #>  #> $seed #> [1] 23 #>  #> $id_design #> [1] 5 #>  SPDExample2$layoutlocations #> [[1]] #>       PLOT  REP Whole-plot #>  [1,] \"101\" \"1\" \"Fung4\"    #>  [2,] \"102\" \"1\" \"Fung3\"    #>  [3,] \"103\" \"1\" \"Fung2\"    #>  [4,] \"104\" \"1\" \"Fung1\"    #>  [5,] \"105\" \"1\" \"NFung\"    #>  [6,] \"201\" \"2\" \"Fung2\"    #>  [7,] \"202\" \"2\" \"Fung4\"    #>  [8,] \"203\" \"2\" \"NFung\"    #>  [9,] \"204\" \"2\" \"Fung1\"    #> [10,] \"205\" \"2\" \"Fung3\"    #> [11,] \"301\" \"3\" \"NFung\"    #> [12,] \"302\" \"3\" \"Fung2\"    #> [13,] \"303\" \"3\" \"Fung4\"    #> [14,] \"304\" \"3\" \"Fung3\"    #> [15,] \"305\" \"3\" \"Fung1\"    #> [16,] \"401\" \"4\" \"Fung3\"    #> [17,] \"402\" \"4\" \"Fung2\"    #> [18,] \"403\" \"4\" \"Fung1\"    #> [19,] \"404\" \"4\" \"Fung4\"    #> [20,] \"405\" \"4\" \"NFung\"    #> [21,] \"501\" \"5\" \"Fung4\"    #> [22,] \"502\" \"5\" \"Fung1\"    #> [23,] \"503\" \"5\" \"Fung3\"    #> [24,] \"504\" \"5\" \"NFung\"    #> [25,] \"505\" \"5\" \"Fung2\"    #> [26,] \"601\" \"6\" \"Fung1\"    #> [27,] \"602\" \"6\" \"Fung2\"    #> [28,] \"603\" \"6\" \"Fung3\"    #> [29,] \"604\" \"6\" \"Fung4\"    #> [30,] \"605\" \"6\" \"NFung\"    #>       Sub-plot                                                                 #>  [1,] \"Beans5 Beans1 Beans2 Beans3 Beans10 Beans6 Beans7 Beans9 Beans4 Beans8\" #>  [2,] \"Beans9 Beans10 Beans8 Beans5 Beans7 Beans4 Beans2 Beans6 Beans3 Beans1\" #>  [3,] \"Beans7 Beans10 Beans6 Beans2 Beans8 Beans3 Beans1 Beans4 Beans9 Beans5\" #>  [4,] \"Beans7 Beans9 Beans8 Beans2 Beans3 Beans1 Beans5 Beans4 Beans6 Beans10\" #>  [5,] \"Beans9 Beans10 Beans4 Beans3 Beans6 Beans7 Beans1 Beans2 Beans8 Beans5\" #>  [6,] \"Beans4 Beans3 Beans9 Beans10 Beans1 Beans8 Beans5 Beans7 Beans6 Beans2\" #>  [7,] \"Beans8 Beans7 Beans1 Beans5 Beans2 Beans10 Beans9 Beans6 Beans4 Beans3\" #>  [8,] \"Beans8 Beans4 Beans1 Beans2 Beans9 Beans6 Beans3 Beans5 Beans10 Beans7\" #>  [9,] \"Beans1 Beans7 Beans5 Beans4 Beans6 Beans9 Beans2 Beans8 Beans10 Beans3\" #> [10,] \"Beans6 Beans1 Beans4 Beans2 Beans7 Beans10 Beans3 Beans8 Beans9 Beans5\" #> [11,] \"Beans5 Beans3 Beans6 Beans9 Beans4 Beans1 Beans10 Beans7 Beans2 Beans8\" #> [12,] \"Beans3 Beans7 Beans4 Beans2 Beans8 Beans6 Beans5 Beans9 Beans10 Beans1\" #> [13,] \"Beans1 Beans6 Beans7 Beans9 Beans3 Beans2 Beans4 Beans5 Beans8 Beans10\" #> [14,] \"Beans8 Beans4 Beans2 Beans6 Beans10 Beans3 Beans5 Beans1 Beans9 Beans7\" #> [15,] \"Beans3 Beans8 Beans5 Beans1 Beans7 Beans10 Beans6 Beans2 Beans9 Beans4\" #> [16,] \"Beans4 Beans7 Beans5 Beans8 Beans9 Beans2 Beans10 Beans6 Beans1 Beans3\" #> [17,] \"Beans8 Beans9 Beans2 Beans1 Beans7 Beans6 Beans5 Beans10 Beans4 Beans3\" #> [18,] \"Beans9 Beans8 Beans2 Beans5 Beans1 Beans6 Beans10 Beans7 Beans4 Beans3\" #> [19,] \"Beans10 Beans3 Beans6 Beans1 Beans5 Beans8 Beans7 Beans2 Beans4 Beans9\" #> [20,] \"Beans6 Beans8 Beans10 Beans1 Beans7 Beans3 Beans5 Beans4 Beans2 Beans9\" #> [21,] \"Beans8 Beans7 Beans9 Beans6 Beans1 Beans5 Beans2 Beans3 Beans10 Beans4\" #> [22,] \"Beans3 Beans9 Beans8 Beans4 Beans1 Beans7 Beans10 Beans6 Beans2 Beans5\" #> [23,] \"Beans2 Beans5 Beans10 Beans1 Beans7 Beans6 Beans9 Beans4 Beans8 Beans3\" #> [24,] \"Beans8 Beans5 Beans7 Beans1 Beans9 Beans6 Beans2 Beans4 Beans3 Beans10\" #> [25,] \"Beans7 Beans8 Beans10 Beans4 Beans1 Beans9 Beans3 Beans2 Beans5 Beans6\" #> [26,] \"Beans3 Beans8 Beans4 Beans9 Beans2 Beans6 Beans1 Beans7 Beans10 Beans5\" #> [27,] \"Beans4 Beans10 Beans1 Beans8 Beans3 Beans9 Beans7 Beans5 Beans6 Beans2\" #> [28,] \"Beans5 Beans3 Beans6 Beans4 Beans2 Beans10 Beans8 Beans1 Beans9 Beans7\" #> [29,] \"Beans3 Beans7 Beans2 Beans5 Beans1 Beans9 Beans4 Beans10 Beans8 Beans6\" #> [30,] \"Beans8 Beans6 Beans2 Beans5 Beans9 Beans10 Beans1 Beans3 Beans4 Beans7\" #>  #> [[2]] #>       PLOT   REP Whole-plot #>  [1,] \"1001\" \"1\" \"Fung1\"    #>  [2,] \"1002\" \"1\" \"Fung3\"    #>  [3,] \"1003\" \"1\" \"NFung\"    #>  [4,] \"1004\" \"1\" \"Fung2\"    #>  [5,] \"1005\" \"1\" \"Fung4\"    #>  [6,] \"1101\" \"2\" \"Fung3\"    #>  [7,] \"1102\" \"2\" \"Fung2\"    #>  [8,] \"1103\" \"2\" \"Fung4\"    #>  [9,] \"1104\" \"2\" \"Fung1\"    #> [10,] \"1105\" \"2\" \"NFung\"    #> [11,] \"1201\" \"3\" \"NFung\"    #> [12,] \"1202\" \"3\" \"Fung2\"    #> [13,] \"1203\" \"3\" \"Fung1\"    #> [14,] \"1204\" \"3\" \"Fung4\"    #> [15,] \"1205\" \"3\" \"Fung3\"    #> [16,] \"1301\" \"4\" \"Fung3\"    #> [17,] \"1302\" \"4\" \"NFung\"    #> [18,] \"1303\" \"4\" \"Fung2\"    #> [19,] \"1304\" \"4\" \"Fung4\"    #> [20,] \"1305\" \"4\" \"Fung1\"    #> [21,] \"1401\" \"5\" \"Fung2\"    #> [22,] \"1402\" \"5\" \"NFung\"    #> [23,] \"1403\" \"5\" \"Fung1\"    #> [24,] \"1404\" \"5\" \"Fung4\"    #> [25,] \"1405\" \"5\" \"Fung3\"    #> [26,] \"1501\" \"6\" \"Fung2\"    #> [27,] \"1502\" \"6\" \"Fung1\"    #> [28,] \"1503\" \"6\" \"NFung\"    #> [29,] \"1504\" \"6\" \"Fung4\"    #> [30,] \"1505\" \"6\" \"Fung3\"    #>       Sub-plot                                                                 #>  [1,] \"Beans3 Beans6 Beans8 Beans9 Beans4 Beans5 Beans7 Beans2 Beans1 Beans10\" #>  [2,] \"Beans2 Beans4 Beans9 Beans10 Beans8 Beans3 Beans5 Beans6 Beans1 Beans7\" #>  [3,] \"Beans3 Beans7 Beans1 Beans6 Beans5 Beans2 Beans4 Beans10 Beans8 Beans9\" #>  [4,] \"Beans3 Beans5 Beans7 Beans6 Beans4 Beans10 Beans2 Beans9 Beans8 Beans1\" #>  [5,] \"Beans4 Beans9 Beans8 Beans3 Beans6 Beans7 Beans5 Beans1 Beans2 Beans10\" #>  [6,] \"Beans6 Beans3 Beans5 Beans2 Beans7 Beans10 Beans9 Beans1 Beans8 Beans4\" #>  [7,] \"Beans8 Beans5 Beans6 Beans7 Beans10 Beans2 Beans3 Beans9 Beans4 Beans1\" #>  [8,] \"Beans3 Beans1 Beans10 Beans4 Beans7 Beans9 Beans5 Beans2 Beans8 Beans6\" #>  [9,] \"Beans7 Beans3 Beans9 Beans10 Beans1 Beans5 Beans6 Beans4 Beans8 Beans2\" #> [10,] \"Beans10 Beans1 Beans5 Beans9 Beans6 Beans3 Beans8 Beans7 Beans4 Beans2\" #> [11,] \"Beans6 Beans7 Beans8 Beans3 Beans5 Beans4 Beans2 Beans1 Beans9 Beans10\" #> [12,] \"Beans3 Beans9 Beans8 Beans5 Beans2 Beans1 Beans4 Beans6 Beans10 Beans7\" #> [13,] \"Beans2 Beans5 Beans9 Beans1 Beans8 Beans3 Beans4 Beans6 Beans10 Beans7\" #> [14,] \"Beans10 Beans7 Beans9 Beans8 Beans5 Beans1 Beans4 Beans3 Beans2 Beans6\" #> [15,] \"Beans1 Beans8 Beans2 Beans3 Beans7 Beans6 Beans5 Beans10 Beans4 Beans9\" #> [16,] \"Beans1 Beans4 Beans3 Beans9 Beans10 Beans5 Beans6 Beans7 Beans2 Beans8\" #> [17,] \"Beans1 Beans8 Beans6 Beans9 Beans7 Beans2 Beans3 Beans5 Beans10 Beans4\" #> [18,] \"Beans2 Beans3 Beans1 Beans8 Beans7 Beans6 Beans4 Beans9 Beans5 Beans10\" #> [19,] \"Beans9 Beans1 Beans10 Beans8 Beans7 Beans3 Beans5 Beans6 Beans4 Beans2\" #> [20,] \"Beans2 Beans1 Beans3 Beans7 Beans4 Beans10 Beans8 Beans6 Beans9 Beans5\" #> [21,] \"Beans10 Beans9 Beans6 Beans7 Beans4 Beans3 Beans5 Beans8 Beans1 Beans2\" #> [22,] \"Beans3 Beans10 Beans4 Beans7 Beans1 Beans8 Beans2 Beans9 Beans5 Beans6\" #> [23,] \"Beans8 Beans7 Beans2 Beans3 Beans10 Beans6 Beans5 Beans4 Beans1 Beans9\" #> [24,] \"Beans3 Beans10 Beans5 Beans8 Beans9 Beans4 Beans2 Beans1 Beans7 Beans6\" #> [25,] \"Beans2 Beans8 Beans4 Beans1 Beans5 Beans6 Beans7 Beans10 Beans3 Beans9\" #> [26,] \"Beans10 Beans1 Beans6 Beans2 Beans9 Beans8 Beans3 Beans5 Beans7 Beans4\" #> [27,] \"Beans4 Beans8 Beans7 Beans5 Beans10 Beans9 Beans2 Beans3 Beans1 Beans6\" #> [28,] \"Beans7 Beans9 Beans6 Beans5 Beans1 Beans8 Beans3 Beans10 Beans4 Beans2\" #> [29,] \"Beans3 Beans9 Beans8 Beans1 Beans7 Beans10 Beans6 Beans2 Beans4 Beans5\" #> [30,] \"Beans3 Beans2 Beans1 Beans8 Beans9 Beans6 Beans4 Beans7 Beans10 Beans5\" #>  #> [[3]] #>       PLOT   REP Whole-plot #>  [1,] \"2001\" \"1\" \"NFung\"    #>  [2,] \"2002\" \"1\" \"Fung2\"    #>  [3,] \"2003\" \"1\" \"Fung1\"    #>  [4,] \"2004\" \"1\" \"Fung4\"    #>  [5,] \"2005\" \"1\" \"Fung3\"    #>  [6,] \"2101\" \"2\" \"Fung1\"    #>  [7,] \"2102\" \"2\" \"Fung2\"    #>  [8,] \"2103\" \"2\" \"Fung4\"    #>  [9,] \"2104\" \"2\" \"NFung\"    #> [10,] \"2105\" \"2\" \"Fung3\"    #> [11,] \"2201\" \"3\" \"Fung3\"    #> [12,] \"2202\" \"3\" \"NFung\"    #> [13,] \"2203\" \"3\" \"Fung4\"    #> [14,] \"2204\" \"3\" \"Fung2\"    #> [15,] \"2205\" \"3\" \"Fung1\"    #> [16,] \"2301\" \"4\" \"Fung3\"    #> [17,] \"2302\" \"4\" \"Fung4\"    #> [18,] \"2303\" \"4\" \"Fung1\"    #> [19,] \"2304\" \"4\" \"Fung2\"    #> [20,] \"2305\" \"4\" \"NFung\"    #> [21,] \"2401\" \"5\" \"Fung3\"    #> [22,] \"2402\" \"5\" \"Fung2\"    #> [23,] \"2403\" \"5\" \"Fung1\"    #> [24,] \"2404\" \"5\" \"Fung4\"    #> [25,] \"2405\" \"5\" \"NFung\"    #> [26,] \"2501\" \"6\" \"Fung1\"    #> [27,] \"2502\" \"6\" \"Fung3\"    #> [28,] \"2503\" \"6\" \"Fung2\"    #> [29,] \"2504\" \"6\" \"Fung4\"    #> [30,] \"2505\" \"6\" \"NFung\"    #>       Sub-plot                                                                 #>  [1,] \"Beans3 Beans2 Beans6 Beans4 Beans5 Beans10 Beans7 Beans1 Beans8 Beans9\" #>  [2,] \"Beans5 Beans4 Beans9 Beans1 Beans6 Beans2 Beans10 Beans7 Beans8 Beans3\" #>  [3,] \"Beans4 Beans7 Beans6 Beans1 Beans2 Beans10 Beans9 Beans3 Beans8 Beans5\" #>  [4,] \"Beans9 Beans8 Beans3 Beans6 Beans1 Beans7 Beans10 Beans5 Beans2 Beans4\" #>  [5,] \"Beans7 Beans10 Beans4 Beans8 Beans2 Beans5 Beans9 Beans1 Beans3 Beans6\" #>  [6,] \"Beans8 Beans1 Beans3 Beans10 Beans6 Beans4 Beans9 Beans5 Beans7 Beans2\" #>  [7,] \"Beans3 Beans6 Beans1 Beans5 Beans7 Beans10 Beans9 Beans4 Beans8 Beans2\" #>  [8,] \"Beans4 Beans2 Beans7 Beans1 Beans10 Beans9 Beans6 Beans5 Beans3 Beans8\" #>  [9,] \"Beans2 Beans7 Beans9 Beans3 Beans4 Beans1 Beans5 Beans6 Beans8 Beans10\" #> [10,] \"Beans9 Beans2 Beans4 Beans5 Beans6 Beans3 Beans1 Beans8 Beans10 Beans7\" #> [11,] \"Beans6 Beans10 Beans1 Beans7 Beans2 Beans9 Beans4 Beans5 Beans8 Beans3\" #> [12,] \"Beans5 Beans3 Beans10 Beans9 Beans4 Beans2 Beans7 Beans6 Beans1 Beans8\" #> [13,] \"Beans1 Beans2 Beans7 Beans8 Beans5 Beans3 Beans10 Beans6 Beans9 Beans4\" #> [14,] \"Beans5 Beans8 Beans1 Beans3 Beans10 Beans6 Beans2 Beans9 Beans4 Beans7\" #> [15,] \"Beans5 Beans8 Beans3 Beans4 Beans9 Beans1 Beans10 Beans7 Beans2 Beans6\" #> [16,] \"Beans9 Beans5 Beans8 Beans1 Beans3 Beans7 Beans2 Beans6 Beans10 Beans4\" #> [17,] \"Beans2 Beans5 Beans3 Beans9 Beans6 Beans7 Beans1 Beans4 Beans8 Beans10\" #> [18,] \"Beans3 Beans10 Beans1 Beans8 Beans2 Beans6 Beans9 Beans4 Beans5 Beans7\" #> [19,] \"Beans9 Beans10 Beans1 Beans7 Beans3 Beans6 Beans5 Beans4 Beans2 Beans8\" #> [20,] \"Beans9 Beans1 Beans4 Beans3 Beans6 Beans2 Beans5 Beans10 Beans8 Beans7\" #> [21,] \"Beans1 Beans9 Beans4 Beans8 Beans2 Beans5 Beans7 Beans6 Beans3 Beans10\" #> [22,] \"Beans4 Beans5 Beans10 Beans7 Beans6 Beans1 Beans2 Beans9 Beans8 Beans3\" #> [23,] \"Beans6 Beans3 Beans10 Beans8 Beans1 Beans9 Beans2 Beans4 Beans5 Beans7\" #> [24,] \"Beans6 Beans7 Beans8 Beans4 Beans3 Beans1 Beans9 Beans2 Beans5 Beans10\" #> [25,] \"Beans3 Beans9 Beans8 Beans7 Beans1 Beans5 Beans10 Beans2 Beans4 Beans6\" #> [26,] \"Beans8 Beans5 Beans7 Beans10 Beans1 Beans3 Beans2 Beans6 Beans4 Beans9\" #> [27,] \"Beans9 Beans4 Beans10 Beans7 Beans1 Beans6 Beans8 Beans5 Beans3 Beans2\" #> [28,] \"Beans7 Beans8 Beans1 Beans10 Beans3 Beans4 Beans2 Beans6 Beans9 Beans5\" #> [29,] \"Beans3 Beans5 Beans4 Beans2 Beans7 Beans10 Beans9 Beans8 Beans1 Beans6\" #> [30,] \"Beans3 Beans6 Beans2 Beans9 Beans1 Beans4 Beans8 Beans7 Beans5 Beans10\" #>  head(SPDExample2$fieldBook,12) #>    ID LOCATION PLOT REP WHOLE_PLOT SUB_PLOT      TRT_COMB #> 1   1        A  101   1      Fung4   Beans5  Fung4|Beans5 #> 2   2        A  101   1      Fung4   Beans1  Fung4|Beans1 #> 3   3        A  101   1      Fung4   Beans2  Fung4|Beans2 #> 4   4        A  101   1      Fung4   Beans3  Fung4|Beans3 #> 5   5        A  101   1      Fung4  Beans10 Fung4|Beans10 #> 6   6        A  101   1      Fung4   Beans6  Fung4|Beans6 #> 7   7        A  101   1      Fung4   Beans7  Fung4|Beans7 #> 8   8        A  101   1      Fung4   Beans9  Fung4|Beans9 #> 9   9        A  101   1      Fung4   Beans4  Fung4|Beans4 #> 10 10        A  101   1      Fung4   Beans8  Fung4|Beans8 #> 11 11        A  102   1      Fung3   Beans9  Fung3|Beans9 #> 12 12        A  102   1      Fung3  Beans10 Fung3|Beans10"},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_split_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Split Split Plot Design — split_split_plot","title":"Generates a Split Split Plot Design — split_split_plot","text":"randomly generates split split plot design (SSPD) across locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_split_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Split Split Plot Design — split_split_plot","text":"","code":"split_split_plot(   wp = NULL,   sp = NULL,   ssp = NULL,   reps = NULL,   type = 2,   l = 1,   plotNumber = 101,   seed = NULL,   locationNames = NULL,   factorLabels = TRUE,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_split_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Split Split Plot Design — split_split_plot","text":"wp Number whole plots, integer vector. sp Number sub plots per whole plot, integer vector. ssp Number sub-sub plots, integer vector. reps Number blocks (full replicates). type Option CRD RCBD designs. Values type = 1 (CRD) type = 2 (RCBD). default type = 2. l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. seed (optional) Real number specifies starting seed obtain reproducible designs. locationNames (optional) Names location. factorLabels (optional) TRUE retain levels labels original data set otherwise, numeric labels assigned. Default factorLabels =TRUE. data (optional) Data frame label list treatments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_split_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Split Split Plot Design — split_split_plot","text":"list two elements. infoDesign list information design parameters. fieldBook data frame split split plot field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_split_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Split Split Plot Design — split_split_plot","text":"Federer, W. T. (1955). Experimental Design. Theory Application. New York, USA. Macmillan Company.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_split_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Split Split Plot Design — split_split_plot","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/split_split_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Split Split Plot Design — split_split_plot","text":"","code":"# Example 1: Generates a split split plot design SSPD with 5 whole plots, 2 sub-plots, # 3 sub-sub plots, and 3 reps in an RCBD arrangement. This is for one location. SSPD1 <- split_split_plot(wp = 4, sp = 2, ssp = 3, reps = 5, l = 1,                            plotNumber = 101,                            seed = 23,                            type = 2,                            locationNames = \"FARGO\") SSPD1$infoDesign #> $Whole.Plots #> [1] 1 2 3 4 #>  #> $Sub.Plots #> [1] 1 2 #>  #> $Sub.Sub.Plots #> [1] 1 2 3 #>  #> $Locations #> [1] 1 #>  #> $typeDesign #> [1] \"RCBD\" #>  #> $seed #> [1] 23 #>  #> $id_design #> [1] 6 #>  head(SSPD1$fieldBook,12) #>    ID LOCATION PLOT REP WHOLE_PLOT SUB_PLOT SUB_SUB_PLOT TRT_COMB #> 1   1    FARGO  101   1          1        2            2    1|2|2 #> 2   2    FARGO  101   1          1        2            1    1|2|1 #> 3   3    FARGO  101   1          1        2            3    1|2|3 #> 4   4    FARGO  101   1          1        1            2    1|1|2 #> 5   5    FARGO  101   1          1        1            1    1|1|1 #> 6   6    FARGO  101   1          1        1            3    1|1|3 #> 7   7    FARGO  102   1          3        1            2    3|1|2 #> 8   8    FARGO  102   1          3        1            1    3|1|1 #> 9   9    FARGO  102   1          3        1            3    3|1|3 #> 10 10    FARGO  102   1          3        2            2    3|2|2 #> 11 11    FARGO  102   1          3        2            1    3|2|1 #> 12 12    FARGO  102   1          3        2            3    3|2|3  # Example 2: Generates a split split plot design SSPD with 2 whole plost  # (Irrigation, No irrigation), 5 sub plots (4 types of fungicide + one control), and  # 10 sub-sub plots (Ten varieties of beans), and 4 reps in an RCBD arrangement. # This is for 3 locations. In this case, we show how to use the option data. wp <- paste(\"IRR_\", c(\"NO\", \"Yes\"), sep = \"\") #Irrigation (2 Whole plots) sp <- c(\"NFung\", paste(\"Fung\", 1:4, sep = \"\")) #Fungicides (5 Sub plots) ssp <- paste(\"Beans\", 1:10, sep = \"\") #Beans varieties (10 Sub-sub plots) split_split_plot_Data <- data.frame(list(WHOLPLOT = c(wp, rep(NA, 8)),                                           SUBPLOT = c(sp, rep(NA, 5)),                                          SUB_SUBPLOTS = ssp)) head(split_split_plot_Data, 10) #>    WHOLPLOT SUBPLOT SUB_SUBPLOTS #> 1    IRR_NO   NFung       Beans1 #> 2   IRR_Yes   Fung1       Beans2 #> 3      <NA>   Fung2       Beans3 #> 4      <NA>   Fung3       Beans4 #> 5      <NA>   Fung4       Beans5 #> 6      <NA>    <NA>       Beans6 #> 7      <NA>    <NA>       Beans7 #> 8      <NA>    <NA>       Beans8 #> 9      <NA>    <NA>       Beans9 #> 10     <NA>    <NA>      Beans10 SSPD2 <- split_split_plot(reps = 4, l = 3,                            plotNumber = c(101, 1001, 2001),                           seed = 23,                            type = 2,                            locationNames = c(\"A\", \"B\", \"C\"),                           data = split_split_plot_Data) SSPD2$infoDesign #> $Whole.Plots #> [1] \"IRR_NO\"  \"IRR_Yes\" #>  #> $Sub.Plots #> [1] \"NFung\" \"Fung1\" \"Fung2\" \"Fung3\" \"Fung4\" #>  #> $Sub.Sub.Plots #>  [1] \"Beans1\"  \"Beans2\"  \"Beans3\"  \"Beans4\"  \"Beans5\"  \"Beans6\"  \"Beans7\"  #>  [8] \"Beans8\"  \"Beans9\"  \"Beans10\" #>  #> $Locations #> [1] 3 #>  #> $typeDesign #> [1] \"RCBD\" #>  #> $seed #> [1] 23 #>  #> $id_design #> [1] 6 #>  head(SSPD2$fieldBook,12) #>    ID LOCATION PLOT REP WHOLE_PLOT SUB_PLOT SUB_SUB_PLOT             TRT_COMB #> 1   1        A  101   1     IRR_NO    Fung3       Beans3  IRR_NO|Fung3|Beans3 #> 2   2        A  101   1     IRR_NO    Fung3       Beans9  IRR_NO|Fung3|Beans9 #> 3   3        A  101   1     IRR_NO    Fung3      Beans10 IRR_NO|Fung3|Beans10 #> 4   4        A  101   1     IRR_NO    Fung3       Beans7  IRR_NO|Fung3|Beans7 #> 5   5        A  101   1     IRR_NO    Fung3       Beans8  IRR_NO|Fung3|Beans8 #> 6   6        A  101   1     IRR_NO    Fung3       Beans5  IRR_NO|Fung3|Beans5 #> 7   7        A  101   1     IRR_NO    Fung3       Beans2  IRR_NO|Fung3|Beans2 #> 8   8        A  101   1     IRR_NO    Fung3       Beans6  IRR_NO|Fung3|Beans6 #> 9   9        A  101   1     IRR_NO    Fung3       Beans4  IRR_NO|Fung3|Beans4 #> 10 10        A  101   1     IRR_NO    Fung3       Beans1  IRR_NO|Fung3|Beans1 #> 11 11        A  101   1     IRR_NO    Fung1       Beans9  IRR_NO|Fung1|Beans9 #> 12 12        A  101   1     IRR_NO    Fung1       Beans2  IRR_NO|Fung1|Beans2"},{"path":"https://didiermurillof.github.io/FielDHub/reference/square_lattice.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates a Square Lattice Design. — square_lattice","title":"Generates a Square Lattice Design. — square_lattice","text":"randomly generates square lattice design across locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/square_lattice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates a Square Lattice Design. — square_lattice","text":"","code":"square_lattice(   t = NULL,   k = NULL,   r = NULL,   l = 1,   plotNumber = 101,   locationNames = NULL,   seed = NULL,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/square_lattice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates a Square Lattice Design. — square_lattice","text":"t Number  treatments. k Size incomplete blocks (number units per incomplete block). r Number blocks (full resolvable replicates). l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. locationNames (optional) Names location. seed (optional) Real number specifies starting seed obtain reproducible designs. data (optional) Data frame label list treatments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/square_lattice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates a Square Lattice Design. — square_lattice","text":"list two elements. infoDesign list information design parameters. fieldBook data frame square lattice design field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/square_lattice.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generates a Square Lattice Design. — square_lattice","text":"Edmondson., R. N. (2021). blocksdesign: Nested crossed block designs factorial unstructured treatment sets. https://CRAN.R-project.org/package=blocksdesign","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/square_lattice.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generates a Square Lattice Design. — square_lattice","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/square_lattice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates a Square Lattice Design. — square_lattice","text":"","code":"# Example 1: Generates a square lattice design with 5 full blocks, 8 units per IBlock, # 8 IBlocks for a square number of treatmens of 64 in two locations. squareLattice1 <- square_lattice(t = 64, k = 8, r = 5, l = 2,                                   plotNumber = c(1001, 2001),                                  locationNames = c(\"FARGO\", \"MINOT\"),                                   seed = 1986) squareLattice1$infoDesign #> $Reps #> [1] 5 #>  #> $IBlocks #> [1] 8 #>  #> $NumberTreatments #> [1] 64 #>  #> $NumberLocations #> [1] 2 #>  #> $Locations #> [1] \"FARGO\" \"MINOT\" #>  #> $seed #> [1] 1986 #>  #> $lambda #> [1] 0.5555556 #>  #> $id_design #> [1] 10 #>  head(squareLattice1$fieldBook,12) #>    ID LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT #> 1   1    FARGO 1001   1      1    1     3       G-3 #> 2   2    FARGO 1002   1      1    2     4       G-4 #> 3   3    FARGO 1003   1      1    3     5       G-5 #> 4   4    FARGO 1004   1      1    4     6       G-6 #> 5   5    FARGO 1005   1      1    5     2       G-2 #> 6   6    FARGO 1006   1      1    6     8       G-8 #> 7   7    FARGO 1007   1      1    7     7       G-7 #> 8   8    FARGO 1008   1      1    8     1       G-1 #> 9   9    FARGO 1009   1      2    1    51      G-51 #> 10 10    FARGO 1010   1      2    2    55      G-55 #> 11 11    FARGO 1011   1      2    3    54      G-54 #> 12 12    FARGO 1012   1      2    4    53      G-53  # Example 2: Generates a square lattice design with 3 full blocks, 7 units per IBlock, # 7 IBlocks for a square number of treatmens of 49 in one location. # In this case, we show how to use the option data. treatments <- paste(\"G\", 1:49, sep = \"\") ENTRY <- 1:49 treatment_list <- data.frame(list(ENTRY = ENTRY, TREATMENT = treatments)) head(treatment_list)  #>   ENTRY TREATMENT #> 1     1        G1 #> 2     2        G2 #> 3     3        G3 #> 4     4        G4 #> 5     5        G5 #> 6     6        G6 squareLattice2 <- square_lattice(t = 49, k = 7, r = 3, l = 1,                                   plotNumber = 1001,                                  locationNames = \"CASSELTON\",                                   seed = 1986,                                  data = treatment_list) squareLattice2$infoDesign #> $Reps #> [1] 3 #>  #> $IBlocks #> [1] 7 #>  #> $NumberTreatments #> [1] 49 #>  #> $NumberLocations #> [1] 1 #>  #> $Locations #> [1] \"CASSELTON\" #>  #> $seed #> [1] 1986 #>  #> $lambda #> [1] 0.375 #>  #> $id_design #> [1] 10 #>  head(squareLattice2$fieldBook,12) #>    ID  LOCATION PLOT REP IBLOCK UNIT ENTRY TREATMENT #> 1   1 CASSELTON 1001   1      1    1    46       G46 #> 2   2 CASSELTON 1002   1      1    2     4        G4 #> 3   3 CASSELTON 1003   1      1    3    18       G18 #> 4   4 CASSELTON 1004   1      1    4    32       G32 #> 5   5 CASSELTON 1005   1      1    5    39       G39 #> 6   6 CASSELTON 1006   1      1    6    11       G11 #> 7   7 CASSELTON 1007   1      1    7    25       G25 #> 8   8 CASSELTON 1008   1      2    1    19       G19 #> 9   9 CASSELTON 1009   1      2    2    47       G47 #> 10 10 CASSELTON 1010   1      2    3     5        G5 #> 11 11 CASSELTON 1011   1      2    4    26       G26 #> 12 12 CASSELTON 1012   1      2    5    33       G33"},{"path":"https://didiermurillof.github.io/FielDHub/reference/strip_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip Plot Design — strip_plot","title":"Strip Plot Design — strip_plot","text":"randomly generates strip plot design across locations.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/strip_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip Plot Design — strip_plot","text":"","code":"strip_plot(   Hplots = NULL,   Vplots = NULL,   b = 1,   l = 1,   plotNumber = NULL,   planter = \"serpentine\",   locationNames = NULL,   seed = NULL,   factorLabels = TRUE,   data = NULL )"},{"path":"https://didiermurillof.github.io/FielDHub/reference/strip_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip Plot Design — strip_plot","text":"Hplots Number horizontal factors, integer vector. Vplots Number vertical factors, integer vector. b Number blocks (full replicates). l Number locations. default l = 1. plotNumber Numeric vector starting plot number location. default plotNumber = 101. planter Option serpentine cartesian arrangement. default planter = 'serpentine'. locationNames (optional) Names location. seed (optional) Real number specifies starting seed obtain reproducible designs. factorLabels (optional) TRUE retain levels labels original data set otherwise, numeric labels assigned. Default factorLabels =TRUE. data (optional) data frame labels vertical hirizontal plots.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/strip_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip Plot Design — strip_plot","text":"list four elements. infoDesign list information design parameters. stripsBlockLoc list strip blocks location. plotLayouts list layout plot numbers location. fieldBook data frame  strip plot field book.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/strip_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Strip Plot Design — strip_plot","text":"Federer, W. T. (1955). Experimental Design. Theory Application. New York, USA. Macmillan Company.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/strip_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Strip Plot Design — strip_plot","text":"Didier Murillo [aut],         Salvador Gezan [aut],         Ana Heilman [ctb],         Thomas Walk [ctb],          Johan Aparicio [ctb],          Richard Horsley [ctb]","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/strip_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip Plot Design — strip_plot","text":"","code":"# Example 1: Generates a strip plot design with 5 vertical strips and 4 horizontal strips, # with 3 reps in one location. H <- paste(\"H\", 1:4, sep = \"\") V <- paste(\"V\", 1:5, sep = \"\") strip1 <- strip_plot(Hplots = H,                       Vplots = V,                       b = 3,                       l = 1,                       plotNumber = 101,                      planter = \"serpentine\",                      locationNames = \"A\",                       seed = 333) strip1$infoDesign                   #> $Hplots #> [1] 4 #>  #> $Vplots #> [1] 5 #>  #> $blocks #> [1] 3 #>  #> $numberLocations #> [1] 1 #>  #> $nameLocations #> [1] \"A\" #>  #> $seed #> [1] 333 #>  #> $id_design #> [1] 7 #>  strip1$stripsBlockLoc #> $Loc_A #> $Loc_A$rep1 #>    V4      V2      V5      V1      V3      #> H2 \"H2|V4\" \"H2|V2\" \"H2|V5\" \"H2|V1\" \"H2|V3\" #> H1 \"H1|V4\" \"H1|V2\" \"H1|V5\" \"H1|V1\" \"H1|V3\" #> H3 \"H3|V4\" \"H3|V2\" \"H3|V5\" \"H3|V1\" \"H3|V3\" #> H4 \"H4|V4\" \"H4|V2\" \"H4|V5\" \"H4|V1\" \"H4|V3\" #>  #> $Loc_A$rep2 #>    V1      V3      V4      V2      V5      #> H3 \"H3|V1\" \"H3|V3\" \"H3|V4\" \"H3|V2\" \"H3|V5\" #> H4 \"H4|V1\" \"H4|V3\" \"H4|V4\" \"H4|V2\" \"H4|V5\" #> H2 \"H2|V1\" \"H2|V3\" \"H2|V4\" \"H2|V2\" \"H2|V5\" #> H1 \"H1|V1\" \"H1|V3\" \"H1|V4\" \"H1|V2\" \"H1|V5\" #>  #> $Loc_A$rep3 #>    V3      V1      V2      V4      V5      #> H2 \"H2|V3\" \"H2|V1\" \"H2|V2\" \"H2|V4\" \"H2|V5\" #> H1 \"H1|V3\" \"H1|V1\" \"H1|V2\" \"H1|V4\" \"H1|V5\" #> H4 \"H4|V3\" \"H4|V1\" \"H4|V2\" \"H4|V4\" \"H4|V5\" #> H3 \"H3|V3\" \"H3|V1\" \"H3|V2\" \"H3|V4\" \"H3|V5\" #>  #>  strip1$plotLayouts #> $Loc_A #> $Loc_A$rep1 #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  101  102  103  104  105 #> [2,]  110  109  108  107  106 #> [3,]  111  112  113  114  115 #> [4,]  120  119  118  117  116 #>  #> $Loc_A$rep2 #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  201  202  203  204  205 #> [2,]  210  209  208  207  206 #> [3,]  211  212  213  214  215 #> [4,]  220  219  218  217  216 #>  #> $Loc_A$rep3 #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  301  302  303  304  305 #> [2,]  310  309  308  307  306 #> [3,]  311  312  313  314  315 #> [4,]  320  319  318  317  316 #>  #>  head(strip1$fieldBook,12)                      #>    ID LOCATION PLOT REP HSTRIP VSTRIP TRT_COMB #> 1   1        A  101   1     H2     V4    H2|V4 #> 2   2        A  102   1     H2     V2    H2|V2 #> 3   3        A  103   1     H2     V5    H2|V5 #> 4   4        A  104   1     H2     V1    H2|V1 #> 5   5        A  105   1     H2     V3    H2|V3 #> 6   6        A  110   1     H1     V4    H1|V4 #> 7   7        A  109   1     H1     V2    H1|V2 #> 8   8        A  108   1     H1     V5    H1|V5 #> 9   9        A  107   1     H1     V1    H1|V1 #> 10 10        A  106   1     H1     V3    H1|V3 #> 11 11        A  111   1     H3     V4    H3|V4 #> 12 12        A  112   1     H3     V2    H3|V2  # Example 2: Generates a strip plot design with 5 vertical strips and 5 horizontal strips, # with 6 reps across to 3 locations. In this case, we show how to use the option data. Hplots <- LETTERS[1:5] Vplots <- LETTERS[1:4] strip_data <- data.frame(list(HPLOTS = Hplots, VPLOTS = c(Vplots, NA))) head(strip_data) #>   HPLOTS VPLOTS #> 1      A      A #> 2      B      B #> 3      C      C #> 4      D      D #> 5      E   <NA> strip2 <- strip_plot(Hplots = 5,                       Vplots = 5,                       b = 6,                       l = 3,                       plotNumber = c(101,1001,2001),                      planter = \"cartesian\",                      locationNames = c(\"A\", \"B\", \"C\"),                       seed = 222,                      data = strip_data) strip2$infoDesign                   #> $Hplots #> [1] 5 #>  #> $Vplots #> [1] 4 #>  #> $blocks #> [1] 6 #>  #> $numberLocations #> [1] 3 #>  #> $nameLocations #> [1] \"A\" \"B\" \"C\" #>  #> $seed #> [1] 222 #>  #> $id_design #> [1] 7 #>  strip2$stripsBlockLoc #> $Loc_A #> $Loc_A$rep1 #>   D     B     C     A     #> E \"E|D\" \"E|B\" \"E|C\" \"E|A\" #> B \"B|D\" \"B|B\" \"B|C\" \"B|A\" #> C \"C|D\" \"C|B\" \"C|C\" \"C|A\" #> D \"D|D\" \"D|B\" \"D|C\" \"D|A\" #> A \"A|D\" \"A|B\" \"A|C\" \"A|A\" #>  #> $Loc_A$rep2 #>   D     B     C     A     #> A \"A|D\" \"A|B\" \"A|C\" \"A|A\" #> B \"B|D\" \"B|B\" \"B|C\" \"B|A\" #> E \"E|D\" \"E|B\" \"E|C\" \"E|A\" #> D \"D|D\" \"D|B\" \"D|C\" \"D|A\" #> C \"C|D\" \"C|B\" \"C|C\" \"C|A\" #>  #> $Loc_A$rep3 #>   A     D     C     B     #> A \"A|A\" \"A|D\" \"A|C\" \"A|B\" #> D \"D|A\" \"D|D\" \"D|C\" \"D|B\" #> E \"E|A\" \"E|D\" \"E|C\" \"E|B\" #> B \"B|A\" \"B|D\" \"B|C\" \"B|B\" #> C \"C|A\" \"C|D\" \"C|C\" \"C|B\" #>  #> $Loc_A$rep4 #>   A     B     C     D     #> A \"A|A\" \"A|B\" \"A|C\" \"A|D\" #> C \"C|A\" \"C|B\" \"C|C\" \"C|D\" #> E \"E|A\" \"E|B\" \"E|C\" \"E|D\" #> B \"B|A\" \"B|B\" \"B|C\" \"B|D\" #> D \"D|A\" \"D|B\" \"D|C\" \"D|D\" #>  #> $Loc_A$rep5 #>   A     C     D     B     #> B \"B|A\" \"B|C\" \"B|D\" \"B|B\" #> C \"C|A\" \"C|C\" \"C|D\" \"C|B\" #> E \"E|A\" \"E|C\" \"E|D\" \"E|B\" #> A \"A|A\" \"A|C\" \"A|D\" \"A|B\" #> D \"D|A\" \"D|C\" \"D|D\" \"D|B\" #>  #> $Loc_A$rep6 #>   B     C     D     A     #> D \"D|B\" \"D|C\" \"D|D\" \"D|A\" #> E \"E|B\" \"E|C\" \"E|D\" \"E|A\" #> B \"B|B\" \"B|C\" \"B|D\" \"B|A\" #> C \"C|B\" \"C|C\" \"C|D\" \"C|A\" #> A \"A|B\" \"A|C\" \"A|D\" \"A|A\" #>  #>  #> $Loc_B #> $Loc_B$rep1 #>   B     C     D     A     #> B \"B|B\" \"B|C\" \"B|D\" \"B|A\" #> D \"D|B\" \"D|C\" \"D|D\" \"D|A\" #> E \"E|B\" \"E|C\" \"E|D\" \"E|A\" #> A \"A|B\" \"A|C\" \"A|D\" \"A|A\" #> C \"C|B\" \"C|C\" \"C|D\" \"C|A\" #>  #> $Loc_B$rep2 #>   D     C     A     B     #> D \"D|D\" \"D|C\" \"D|A\" \"D|B\" #> A \"A|D\" \"A|C\" \"A|A\" \"A|B\" #> C \"C|D\" \"C|C\" \"C|A\" \"C|B\" #> E \"E|D\" \"E|C\" \"E|A\" \"E|B\" #> B \"B|D\" \"B|C\" \"B|A\" \"B|B\" #>  #> $Loc_B$rep3 #>   D     A     C     B     #> B \"B|D\" \"B|A\" \"B|C\" \"B|B\" #> E \"E|D\" \"E|A\" \"E|C\" \"E|B\" #> C \"C|D\" \"C|A\" \"C|C\" \"C|B\" #> D \"D|D\" \"D|A\" \"D|C\" \"D|B\" #> A \"A|D\" \"A|A\" \"A|C\" \"A|B\" #>  #> $Loc_B$rep4 #>   C     D     A     B     #> D \"D|C\" \"D|D\" \"D|A\" \"D|B\" #> C \"C|C\" \"C|D\" \"C|A\" \"C|B\" #> E \"E|C\" \"E|D\" \"E|A\" \"E|B\" #> A \"A|C\" \"A|D\" \"A|A\" \"A|B\" #> B \"B|C\" \"B|D\" \"B|A\" \"B|B\" #>  #> $Loc_B$rep5 #>   A     B     D     C     #> D \"D|A\" \"D|B\" \"D|D\" \"D|C\" #> C \"C|A\" \"C|B\" \"C|D\" \"C|C\" #> A \"A|A\" \"A|B\" \"A|D\" \"A|C\" #> B \"B|A\" \"B|B\" \"B|D\" \"B|C\" #> E \"E|A\" \"E|B\" \"E|D\" \"E|C\" #>  #> $Loc_B$rep6 #>   C     D     B     A     #> B \"B|C\" \"B|D\" \"B|B\" \"B|A\" #> D \"D|C\" \"D|D\" \"D|B\" \"D|A\" #> A \"A|C\" \"A|D\" \"A|B\" \"A|A\" #> C \"C|C\" \"C|D\" \"C|B\" \"C|A\" #> E \"E|C\" \"E|D\" \"E|B\" \"E|A\" #>  #>  #> $Loc_C #> $Loc_C$rep1 #>   D     A     C     B     #> D \"D|D\" \"D|A\" \"D|C\" \"D|B\" #> B \"B|D\" \"B|A\" \"B|C\" \"B|B\" #> E \"E|D\" \"E|A\" \"E|C\" \"E|B\" #> A \"A|D\" \"A|A\" \"A|C\" \"A|B\" #> C \"C|D\" \"C|A\" \"C|C\" \"C|B\" #>  #> $Loc_C$rep2 #>   B     C     A     D     #> B \"B|B\" \"B|C\" \"B|A\" \"B|D\" #> A \"A|B\" \"A|C\" \"A|A\" \"A|D\" #> D \"D|B\" \"D|C\" \"D|A\" \"D|D\" #> C \"C|B\" \"C|C\" \"C|A\" \"C|D\" #> E \"E|B\" \"E|C\" \"E|A\" \"E|D\" #>  #> $Loc_C$rep3 #>   C     D     A     B     #> E \"E|C\" \"E|D\" \"E|A\" \"E|B\" #> C \"C|C\" \"C|D\" \"C|A\" \"C|B\" #> D \"D|C\" \"D|D\" \"D|A\" \"D|B\" #> A \"A|C\" \"A|D\" \"A|A\" \"A|B\" #> B \"B|C\" \"B|D\" \"B|A\" \"B|B\" #>  #> $Loc_C$rep4 #>   C     D     B     A     #> D \"D|C\" \"D|D\" \"D|B\" \"D|A\" #> A \"A|C\" \"A|D\" \"A|B\" \"A|A\" #> B \"B|C\" \"B|D\" \"B|B\" \"B|A\" #> E \"E|C\" \"E|D\" \"E|B\" \"E|A\" #> C \"C|C\" \"C|D\" \"C|B\" \"C|A\" #>  #> $Loc_C$rep5 #>   A     B     D     C     #> B \"B|A\" \"B|B\" \"B|D\" \"B|C\" #> D \"D|A\" \"D|B\" \"D|D\" \"D|C\" #> A \"A|A\" \"A|B\" \"A|D\" \"A|C\" #> E \"E|A\" \"E|B\" \"E|D\" \"E|C\" #> C \"C|A\" \"C|B\" \"C|D\" \"C|C\" #>  #> $Loc_C$rep6 #>   C     D     A     B     #> B \"B|C\" \"B|D\" \"B|A\" \"B|B\" #> E \"E|C\" \"E|D\" \"E|A\" \"E|B\" #> A \"A|C\" \"A|D\" \"A|A\" \"A|B\" #> D \"D|C\" \"D|D\" \"D|A\" \"D|B\" #> C \"C|C\" \"C|D\" \"C|A\" \"C|B\" #>  #>  strip2$plotLayouts #> $Loc_A #> $Loc_A$rep1 #>      [,1] [,2] [,3] [,4] #> [1,]  101  102  103  104 #> [2,]  105  106  107  108 #> [3,]  109  110  111  112 #> [4,]  113  114  115  116 #> [5,]  117  118  119  120 #>  #> $Loc_A$rep2 #>      [,1] [,2] [,3] [,4] #> [1,]  201  202  203  204 #> [2,]  205  206  207  208 #> [3,]  209  210  211  212 #> [4,]  213  214  215  216 #> [5,]  217  218  219  220 #>  #> $Loc_A$rep3 #>      [,1] [,2] [,3] [,4] #> [1,]  301  302  303  304 #> [2,]  305  306  307  308 #> [3,]  309  310  311  312 #> [4,]  313  314  315  316 #> [5,]  317  318  319  320 #>  #> $Loc_A$rep4 #>      [,1] [,2] [,3] [,4] #> [1,]  401  402  403  404 #> [2,]  405  406  407  408 #> [3,]  409  410  411  412 #> [4,]  413  414  415  416 #> [5,]  417  418  419  420 #>  #> $Loc_A$rep5 #>      [,1] [,2] [,3] [,4] #> [1,]  501  502  503  504 #> [2,]  505  506  507  508 #> [3,]  509  510  511  512 #> [4,]  513  514  515  516 #> [5,]  517  518  519  520 #>  #> $Loc_A$rep6 #>      [,1] [,2] [,3] [,4] #> [1,]  601  602  603  604 #> [2,]  605  606  607  608 #> [3,]  609  610  611  612 #> [4,]  613  614  615  616 #> [5,]  617  618  619  620 #>  #>  #> $Loc_B #> $Loc_B$rep1 #>      [,1] [,2] [,3] [,4] #> [1,] 1001 1002 1003 1004 #> [2,] 1005 1006 1007 1008 #> [3,] 1009 1010 1011 1012 #> [4,] 1013 1014 1015 1016 #> [5,] 1017 1018 1019 1020 #>  #> $Loc_B$rep2 #>      [,1] [,2] [,3] [,4] #> [1,] 1101 1102 1103 1104 #> [2,] 1105 1106 1107 1108 #> [3,] 1109 1110 1111 1112 #> [4,] 1113 1114 1115 1116 #> [5,] 1117 1118 1119 1120 #>  #> $Loc_B$rep3 #>      [,1] [,2] [,3] [,4] #> [1,] 1201 1202 1203 1204 #> [2,] 1205 1206 1207 1208 #> [3,] 1209 1210 1211 1212 #> [4,] 1213 1214 1215 1216 #> [5,] 1217 1218 1219 1220 #>  #> $Loc_B$rep4 #>      [,1] [,2] [,3] [,4] #> [1,] 1301 1302 1303 1304 #> [2,] 1305 1306 1307 1308 #> [3,] 1309 1310 1311 1312 #> [4,] 1313 1314 1315 1316 #> [5,] 1317 1318 1319 1320 #>  #> $Loc_B$rep5 #>      [,1] [,2] [,3] [,4] #> [1,] 1401 1402 1403 1404 #> [2,] 1405 1406 1407 1408 #> [3,] 1409 1410 1411 1412 #> [4,] 1413 1414 1415 1416 #> [5,] 1417 1418 1419 1420 #>  #> $Loc_B$rep6 #>      [,1] [,2] [,3] [,4] #> [1,] 1501 1502 1503 1504 #> [2,] 1505 1506 1507 1508 #> [3,] 1509 1510 1511 1512 #> [4,] 1513 1514 1515 1516 #> [5,] 1517 1518 1519 1520 #>  #>  #> $Loc_C #> $Loc_C$rep1 #>      [,1] [,2] [,3] [,4] #> [1,] 2001 2002 2003 2004 #> [2,] 2005 2006 2007 2008 #> [3,] 2009 2010 2011 2012 #> [4,] 2013 2014 2015 2016 #> [5,] 2017 2018 2019 2020 #>  #> $Loc_C$rep2 #>      [,1] [,2] [,3] [,4] #> [1,] 2101 2102 2103 2104 #> [2,] 2105 2106 2107 2108 #> [3,] 2109 2110 2111 2112 #> [4,] 2113 2114 2115 2116 #> [5,] 2117 2118 2119 2120 #>  #> $Loc_C$rep3 #>      [,1] [,2] [,3] [,4] #> [1,] 2201 2202 2203 2204 #> [2,] 2205 2206 2207 2208 #> [3,] 2209 2210 2211 2212 #> [4,] 2213 2214 2215 2216 #> [5,] 2217 2218 2219 2220 #>  #> $Loc_C$rep4 #>      [,1] [,2] [,3] [,4] #> [1,] 2301 2302 2303 2304 #> [2,] 2305 2306 2307 2308 #> [3,] 2309 2310 2311 2312 #> [4,] 2313 2314 2315 2316 #> [5,] 2317 2318 2319 2320 #>  #> $Loc_C$rep5 #>      [,1] [,2] [,3] [,4] #> [1,] 2401 2402 2403 2404 #> [2,] 2405 2406 2407 2408 #> [3,] 2409 2410 2411 2412 #> [4,] 2413 2414 2415 2416 #> [5,] 2417 2418 2419 2420 #>  #> $Loc_C$rep6 #>      [,1] [,2] [,3] [,4] #> [1,] 2501 2502 2503 2504 #> [2,] 2505 2506 2507 2508 #> [3,] 2509 2510 2511 2512 #> [4,] 2513 2514 2515 2516 #> [5,] 2517 2518 2519 2520 #>  #>  head(strip2$fieldBook,12) #>    ID LOCATION PLOT REP HSTRIP VSTRIP TRT_COMB #> 1   1        A  101   1      E      D      E|D #> 2   2        A  102   1      E      B      E|B #> 3   3        A  103   1      E      C      E|C #> 4   4        A  104   1      E      A      E|A #> 5   5        A  105   1      B      D      B|D #> 6   6        A  106   1      B      B      B|B #> 7   7        A  107   1      B      C      B|C #> 8   8        A  108   1      B      A      B|A #> 9   9        A  109   1      C      D      C|D #> 10 10        A  110   1      C      B      C|B #> 11 11        A  111   1      C      C      C|C #> 12 12        A  112   1      C      A      C|A"},{"path":"https://didiermurillof.github.io/FielDHub/reference/summary.FielDHub.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary a FielDHub object — summary.FielDHub","title":"Summary a FielDHub object — summary.FielDHub","text":"Summarise information design parameters, data   frame structure","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/summary.FielDHub.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary a FielDHub object — summary.FielDHub","text":"","code":"# S3 method for FielDHub summary(object, ...)"},{"path":"https://didiermurillof.github.io/FielDHub/reference/summary.FielDHub.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary a FielDHub object — summary.FielDHub","text":"object object inheriting class FielDHub ... Unused, extensibility","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/summary.FielDHub.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary a FielDHub object — summary.FielDHub","text":"object inheriting class summary.FielDHub","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/summary.FielDHub.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary a FielDHub object — summary.FielDHub","text":"Thiago de Paula Oliveira,   thiago.paula.oliveira@alumni.usp.br","code":""},{"path":"https://didiermurillof.github.io/FielDHub/reference/summary.FielDHub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary a FielDHub object — summary.FielDHub","text":"","code":"# Example 1: Generates a CRD design with 5 treatments and 5 reps each. crd1 <- CRD(t = 5, reps = 5, plotNumber = 101, seed = 1985, locationName = \"Fargo\") crd1$infoDesign #> $numberofTreatments #> [1] 5 #>  #> $treatments #> [1] \"T1\" \"T2\" \"T3\" \"T4\" \"T5\" #>  #> $Reps #> [1] 5 #>  #> $locationName #> [1] \"Fargo\" #>  #> $seed #> [1] 1985 #>  #> $id_design #> [1] 1 #>  summary(crd1) #> Completely Randomized Design (CRD):  #>  #> 1. Information on the design parameters:  #> List of 6 #>  $ numberofTreatments: num 5 #>  $ treatments        : chr [1:5] \"T1\" \"T2\" \"T3\" \"T4\" ... #>  $ Reps              : num 5 #>  $ locationName      : chr \"Fargo\" #>  $ seed              : num 1985 #>  $ id_design         : num 1 #>  #> 2. Structure of the data frame with the CRD field book:  #>  #> 'data.frame':\t25 obs. of  5 variables: #>  $ ID       : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ LOCATION : chr  \"Fargo\" \"Fargo\" \"Fargo\" \"Fargo\" ... #>  $ PLOT     : int  101 102 103 104 105 106 107 108 109 110 ... #>  $ REP      : Factor w/ 5 levels \"1\",\"2\",\"3\",\"4\",..: 3 4 2 3 2 2 4 5 1 5 ... #>  $ TREATMENT: chr  \"T3\" \"T2\" \"T1\" \"T5\" ..."},{"path":"https://didiermurillof.github.io/FielDHub/news/index.html","id":"fieldhub-120","dir":"Changelog","previous_headings":"","what":"FielDHub 1.2.0","title":"FielDHub 1.2.0","text":"CRAN release: 2022-08-05","code":""},{"path":"https://didiermurillof.github.io/FielDHub/news/index.html","id":"shiny-app-1-2-0","dir":"Changelog","previous_headings":"","what":"Shiny App","title":"FielDHub 1.2.0","text":"Added help menu option app connect directly documentation available GitHub repository. Added vignettes help documentation standard functions modules available designs app. Added capability making multiple randomizations across different locations unreplicated, partially replicated, lattice, RCBD, factorial, split-plot, split-split-plot, strip-plot, IBD, RCD designs. Added capability produce heatmap visualizations simulated data experimental designs. Added action buttons copy save field maps field book outputs Excel. Added factorization options aid users creation randomizations mapping layouts unreplicated partially replicated designs. Previous version required users * mathematical calculation priori. Added filters search boxes field book tables. Updated UI/UX design home page. Grouped single diagonal arrangement, multiple diagonal arrangement, optimized arrangement augmented RCB designs one single module. Added action run button experimental designs prevent reactivity issues application. Improved standardized user experience features readability access. Improved error logging messages. Added features inform end-users utilization correct input data file formats associated metadata/columns, checking duplicate values input files, well data type verification. Added plot() method FielDHub package display field layout field book designs. Added additional field layout visualization/map options experimental designs. Previous version mapping options unreplicated p-rep designs. Added drop-menu display multiple layout mapping option shown entry number plot experimental designs. means, now can visualize randomization layout option locations input. Added option repeating whole entries/experiments unreplicated diagonal arrangement design multiple experiments (previously called decision blocks). Added check box feature Augmented RCB design allow creation nurseries option randomizing experimental entries . user decides leave option unchecked, checks randomized, experimental entries shown consecutive order. Added check box option RCB design allow continuous plot numbering independently rep block number. Previous version coded replication plot number (.e., 101 =rep1, 201=rep2, etc.). Fixed restriction RCBD mapping layout allow use 25 entries. PS: better designs number entries higher 25 (info go : FIELD PLOT DESIGN ).","code":""},{"path":"https://didiermurillof.github.io/FielDHub/news/index.html","id":"standalone-functions-in-fieldhub-package-1-2-0","dir":"Changelog","previous_headings":"","what":"Standalone Functions in FielDHub Package","title":"FielDHub 1.2.0","text":"partially_replicated() now generates randomization across multiple locations/sites. diagonal_arrangement() now generates randomization across multiple locations/sites. optimized_arrangement() now generates randomization across multiple locations/sites. partially_replicated() now allows entries/treatments replicates. , required least unreplicated entries. Functions optimized_arrangement(), diagonal_arrangement() partially_replicated() now return feedback input dimensions nrows ncols incorrect. RCBD() now includes argument (continuous) manage way sets plotting number. RCBD_augmented() now allows customization field dimensions inputting number rows columns nrows ncols arguments. RCBD_augmented() now returns feedback input dimensions nrows ncols match data entered. RCBD_augmented() random = FALSE now allows randomizing checks/controls user wants. Fixed bug full_factorial() CRD factorial design prevented option including possible factorial combinations. Added method print() class fieldLayout. See print(). Added method plot() class FieldHub returns object class fieldLayout. See plot(). method plot() can plot field layout designs output. possible pass arguments location, layout order others. detail see plot(), print() summary() methods FielDHub. Fixed bug diagonal_arrangement() kindExpt = DBUDC. problem affected random distribution checks case unbalanced control plot numbers experiment. Fixed bug diagonal_arrangement() kindExpt = DBUDC. problem affected merging data user data randomization data users wanted replicated entries across experiments.","code":""},{"path":"https://didiermurillof.github.io/FielDHub/news/index.html","id":"fieldhub-010","dir":"Changelog","previous_headings":"","what":"FielDHub 0.1.0","title":"FielDHub 0.1.0","text":"CRAN release: 2021-05-19 CRAN release.","code":""}]
